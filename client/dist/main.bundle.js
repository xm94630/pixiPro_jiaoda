!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=41)}([function(t,e,r){"use strict";t.exports={gl:null,primitiveShader:null,stripShader:null,defaultShader:null,offset:null,projection:null,texturesToUpdate:[],texturesToDestroy:[],visibleCount:0}},function(t,e,r){"use strict";t.exports=function(t,e){this.passes=[this],this.dirty=!0,this.padding=0,this.uniforms=e||{},this.fragmentSrc=t||[]}},function(t,e,r){(function(e){!function(e){"use strict";t.exports={global:e,console:e.console,document:e.document,location:e.location,navigator:e.navigator,window:e.window,createCanvas:function(){return e.document.createElement("canvas")},createImage:function(){return new e.Image},createRequest:function(){return new e.XMLHttpRequest}}}(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,r(28))},function(t,e,r){"use strict";function n(t,e){this.x=t||0,this.y=e||0}n.prototype.clone=function(){return new n(this.x,this.y)},t.exports=n},function(t,e,r){"use strict";function n(t,e){if(s.call(this),e||(this.noFrame=!0,e=new a(0,0,1,1)),t instanceof n&&(t=t.baseTexture),this.baseTexture=t,this.frame=e,this.trim=new o,this.scope=this,t.hasLoaded)this.noFrame&&(e=new a(0,0,t.width,t.height)),this.setFrame(e);else{var r=this;t.addEventListener("loaded",function(){r.onBaseTextureLoaded()})}}var i=r(12),o=r(3),a=r(8),s=r(5),u=n.prototype;u.onBaseTextureLoaded=function(){var t=this.baseTexture;t.removeEventListener("loaded",this.onLoaded),this.noFrame&&(this.frame=new a(0,0,t.width,t.height)),this.noFrame=!1,this.width=this.frame.width,this.height=this.frame.height,this.scope.dispatchEvent({type:"update",content:this})},u.destroy=function(t){t&&this.baseTexture.destroy()},u.setFrame=function(t){if(this.frame=t,this.width=t.width,this.height=t.height,t.x+t.width>this.baseTexture.width||t.y+t.height>this.baseTexture.height)throw new Error("Texture Error: frame does not fit inside the base Texture dimensions "+this);this.updateFrame=!0,n.frameUpdates.push(this)},n.fromImage=function(t,e,r){var o=n.cache[t];return o||(o=new n(i.fromImage(t,e,r)),n.cache[t]=o),o},n.fromFrame=function(t){var e=n.cache[t];if(!e)throw new Error('The frameId "'+t+'" does not exist in the texture cache '+this);return e},n.fromCanvas=function(t,e){return new n(new i(t,e))},n.addTextureToCache=function(t,e){n.cache[e]=t},n.removeTextureFromCache=function(t){var e=n.cache[t];return n.cache[t]=null,e},n.cache={},n.frameUpdates=[],n.SCALE_MODE=i.SCALE_MODE,t.exports=n},function(t,e,r){"use strict";t.exports=function(){var t={};this.addEventListener=this.on=function(e,r){void 0===t[e]&&(t[e]=[]),-1===t[e].indexOf(r)&&t[e].push(r)},this.dispatchEvent=this.emit=function(e){if(t[e.type]&&t[e.type].length)for(var r=0,n=t[e.type].length;n>r;r++)t[e.type][r](e)},this.removeEventListener=this.off=function(e,r){var n=t[e].indexOf(r);-1!==n&&t[e].splice(n,1)},this.removeAllEventListeners=function(e){var r=t[e];r&&(r.length=0)}}},function(t,e,r){"use strict";function n(){i.call(this),this.children=[]}var i=r(19),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});o.addChild=function(t){if(t.parent&&t.parent!==this&&t.parent.removeChild(t),t.parent=this,this.children.push(t),this.stage){var e=t;do{e.interactive&&(this.stage.dirty=!0),e.stage=this.stage,e=e._iNext}while(e)}var r,n,i=t.first,o=t.last;r=(n=this._filters||this._mask?this.last._iPrev:this.last)._iNext;for(var a=this,s=n;a;)a.last===s&&(a.last=t.last),a=a.parent;r&&(r._iPrev=o,o._iNext=r),i._iPrev=n,n._iNext=i,this.__renderGroup&&(t.__renderGroup&&t.__renderGroup.removeDisplayObjectAndChildren(t),this.__renderGroup.addDisplayObjectAndChildren(t))},o.addChildAt=function(t,e){if(!(e>=0&&e<=this.children.length))throw new Error(t+" The index "+e+" supplied is out of bounds "+this.children.length);if(void 0!==t.parent&&t.parent.removeChild(t),t.parent=this,this.stage){var r=t;do{r.interactive&&(this.stage.dirty=!0),r.stage=this.stage,r=r._iNext}while(r)}var n,i,o=t.first,a=t.last;if(e===this.children.length){i=this.last;for(var s=this,u=this.last;s;)s.last===u&&(s.last=t.last),s=s.parent}else i=0===e?this:this.children[e-1].last;(n=i._iNext)&&(n._iPrev=a,a._iNext=n),o._iPrev=i,i._iNext=o,this.children.splice(e,0,t),this.__renderGroup&&(t.__renderGroup&&t.__renderGroup.removeDisplayObjectAndChildren(t),this.__renderGroup.addDisplayObjectAndChildren(t))},o.swapChildren=function(t,e){if(t!==e){var r=this.children.indexOf(t),n=this.children.indexOf(e);if(0>r||0>n)throw new Error("swapChildren: Both the supplied DisplayObjects must be a child of the caller.");this.removeChild(t),this.removeChild(e),n>r?(this.addChildAt(e,r),this.addChildAt(t,n)):(this.addChildAt(t,n),this.addChildAt(e,r))}},o.getChildAt=function(t){if(t>=0&&t<this.children.length)return this.children[t];throw new Error("Both the supplied DisplayObjects must be a child of the caller "+this)},o.removeChild=function(t){var e=this.children.indexOf(t);if(-1===e)throw new Error(t+" The supplied DisplayObject must be a child of the caller "+this);var r=t.first,n=t.last,i=n._iNext,o=r._iPrev;if(i&&(i._iPrev=o),o._iNext=i,this.last===n)for(var a=r._iPrev,s=this;s.last===n&&(s.last=a,s=s.parent););if(n._iNext=null,r._iPrev=null,this.stage){var u=t;do{u.interactive&&(this.stage.dirty=!0),u.stage=null,u=u._iNext}while(u)}t.__renderGroup&&t.__renderGroup.removeDisplayObjectAndChildren(t),t.parent=void 0,this.children.splice(e,1)},o.updateTransform=function(){if(this.visible){i.prototype.updateTransform.call(this);for(var t=0,e=this.children.length;e>t;t++)this.children[t].updateTransform()}},t.exports=n},function(t,e,r){"use strict";function n(t){if(o.call(this),this.anchor=new a,this.texture=t,this.blendMode=i.NORMAL,this._width=0,this._height=0,t.baseTexture.hasLoaded)this.updateFrame=!0;else{var e=this;this.texture.addEventListener("update",function(){e.onTextureUpdate()})}this.renderable=!0}var i=r(11),o=r(6),a=r(3),s=r(4),u=n.prototype=Object.create(o.prototype,{constructor:{value:n}});Object.defineProperty(u,"width",{get:function(){return this.scale.x*this.texture.frame.width},set:function(t){this.scale.x=t/this.texture.frame.width,this._width=t}}),Object.defineProperty(u,"height",{get:function(){return this.scale.y*this.texture.frame.height},set:function(t){this.scale.y=t/this.texture.frame.height,this._height=t}}),u.setTexture=function(t){this.texture.baseTexture!==t.baseTexture?(this.textureChange=!0,this.texture=t,this.__renderGroup&&this.__renderGroup.updateTexture(this)):this.texture=t,this.updateFrame=!0},u.onTextureUpdate=function(){this._width&&(this.scale.x=this._width/this.texture.frame.width),this._height&&(this.scale.y=this._height/this.texture.frame.height),this.updateFrame=!0},n.fromFrame=function(t){var e=s.cache[t];if(!e)throw new Error('The frameId "'+t+'" does not exist in the texture cache'+this);return new n(e)},n.fromImage=function(t){return new n(s.fromImage(t))},t.exports=n},function(t,e,r){"use strict";function n(t,e,r,n){this.x=t||0,this.y=e||0,this.width=r||0,this.height=n||0}var i=n.prototype;i.clone=function(){return new n(this.x,this.y,this.width,this.height)},i.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var r=this.x;if(t>=r&&t<=r+this.width){var n=this.y;if(e>=n&&e<=n+this.height)return!0}return!1},t.exports=n},function(t,e,r){"use strict";var n=e.Matrix="undefined"!=typeof Float32Array?Float32Array:Array,i=e.mat3={},o=e.mat4={};i.create=function(){var t=new n(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},i.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},o.create=function(){var t=new n(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},i.multiply=function(t,e,r){r||(r=t);var n=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],h=t[6],l=t[7],f=t[8],c=e[0],d=e[1],p=e[2],v=e[3],g=e[4],m=e[5],_=e[6],x=e[7],y=e[8];return r[0]=c*n+d*a+p*h,r[1]=c*i+d*s+p*l,r[2]=c*o+d*u+p*f,r[3]=v*n+g*a+m*h,r[4]=v*i+g*s+m*l,r[5]=v*o+g*u+m*f,r[6]=_*n+x*a+y*h,r[7]=_*i+x*s+y*l,r[8]=_*o+x*u+y*f,r},i.clone=function(t){var e=new n(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},i.transpose=function(t,e){if(!e||t===e){var r=t[1],n=t[2],i=t[5];return t[1]=t[3],t[2]=t[6],t[3]=r,t[5]=t[7],t[6]=n,t[7]=i,t}return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],e},i.toMat4=function(t,e){return e||(e=o.create()),e[15]=1,e[14]=0,e[13]=0,e[12]=0,e[11]=0,e[10]=t[8],e[9]=t[7],e[8]=t[6],e[7]=0,e[6]=t[5],e[5]=t[4],e[4]=t[3],e[3]=0,e[2]=t[2],e[1]=t[1],e[0]=t[0],e},o.create=function(){var t=new n(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},o.transpose=function(t,e){if(!e||t===e){var r=t[1],n=t[2],i=t[3],o=t[6],a=t[7],s=t[11];return t[1]=t[4],t[2]=t[8],t[3]=t[12],t[4]=r,t[6]=t[9],t[7]=t[13],t[8]=n,t[9]=o,t[11]=t[14],t[12]=i,t[13]=a,t[14]=s,t}return e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15],e},o.multiply=function(t,e,r){r||(r=t);var n=t[0],i=t[1],o=t[2],a=t[3],s=t[4],u=t[5],h=t[6],l=t[7],f=t[8],c=t[9],d=t[10],p=t[11],v=t[12],g=t[13],m=t[14],_=t[15],x=e[0],y=e[1],b=e[2],T=e[3];return r[0]=x*n+y*s+b*f+T*v,r[1]=x*i+y*u+b*c+T*g,r[2]=x*o+y*h+b*d+T*m,r[3]=x*a+y*l+b*p+T*_,x=e[4],y=e[5],b=e[6],T=e[7],r[4]=x*n+y*s+b*f+T*v,r[5]=x*i+y*u+b*c+T*g,r[6]=x*o+y*h+b*d+T*m,r[7]=x*a+y*l+b*p+T*_,x=e[8],y=e[9],b=e[10],T=e[11],r[8]=x*n+y*s+b*f+T*v,r[9]=x*i+y*u+b*c+T*g,r[10]=x*o+y*h+b*d+T*m,r[11]=x*a+y*l+b*p+T*_,x=e[12],y=e[13],b=e[14],T=e[15],r[12]=x*n+y*s+b*f+T*v,r[13]=x*i+y*u+b*c+T*g,r[14]=x*o+y*h+b*d+T*m,r[15]=x*a+y*l+b*p+T*_,r}},function(t,e,r){"use strict";function n(){i.call(this),this.renderable=!0,this.fillAlpha=1,this.lineWidth=0,this.lineColor="black",this.graphicsData=[],this.currentPath={points:[]}}var i=r(6),o=r(8),a=n.prototype=Object.create(i.prototype,{constructor:{value:n}});a.lineStyle=function(t,e,r){this.currentPath.points.length||this.graphicsData.pop(),this.lineWidth=t||0,this.lineColor=e||0,this.lineAlpha=arguments.length<3?1:r,this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:n.POLY},this.graphicsData.push(this.currentPath)},a.moveTo=function(t,e){this.currentPath.points.length||this.graphicsData.pop(),this.currentPath=this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:n.POLY},this.currentPath.points.push(t,e),this.graphicsData.push(this.currentPath)},a.lineTo=function(t,e){this.currentPath.points.push(t,e),this.dirty=!0},a.beginFill=function(t,e){this.filling=!0,this.fillColor=t||0,this.fillAlpha=arguments.length<2?1:e},a.endFill=function(){this.filling=!1,this.fillColor=null,this.fillAlpha=1},a.drawRect=function(t,e,r,i){this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,r,i],type:n.RECT},this.graphicsData.push(this.currentPath),this.dirty=!0},a.drawCircle=function(t,e,r){this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,r,r],type:n.CIRC},this.graphicsData.push(this.currentPath),this.dirty=!0},a.drawElipse=function(t,e,r,i){this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,r,i],type:n.ELIP},this.graphicsData.push(this.currentPath),this.dirty=!0},a.clear=function(){this.lineWidth=0,this.filling=!1,this.dirty=!0,this.clearDirty=!0,this.graphicsData=[],this.bounds=null},a.updateFilterBounds=function(){if(!this.bounds){for(var t,e,r,i=1/0,a=-1/0,s=1/0,u=-1/0,h=0;h<this.graphicsData.length;h++){var l=this.graphicsData[h],f=l.type,c=l.lineWidth;if(t=l.points,f===n.RECT){e=t.x-c/2,r=t.y-c/2;var d=t.width+c,p=t.height+c;i=i>e?e:i,a=e+d>a?e+d:a,s=s>r?e:s,u=r+p>u?r+p:u}else if(f===n.CIRC||f===n.ELIP){e=t.x,r=t.y;var v=t.radius+c/2;i=i>e-v?e-v:i,a=e+v>a?e+v:a,s=s>r-v?r-v:s,u=r+v>u?r+v:u}else for(var g=0;g<t.length;g+=2)e=t[g],r=t[g+1],i=i>e-c?e-c:i,a=e+c>a?e+c:a,s=s>r-c?r-c:s,u=r+c>u?r+c:u}this.bounds=new o(i,s,a-i,u-s)}},n.POLY=0,n.RECT=1,n.CIRC=2,n.ELIP=3,t.exports=n},function(t,e,r){"use strict";t.exports={NORMAL:0,SCREEN:1}},function(t,e,r){"use strict";function n(t,e){if(a.call(this),this.width=100,this.height=100,this.scaleMode=e||n.SCALE_MODE.DEFAULT,this.hasLoaded=!1,this.source=t,t){if("complete"in this.source)if(this.source.complete)this.hasLoaded=!0,this.width=this.source.width,this.height=this.source.height,o.texturesToUpdate.push(this);else{var r=this;this.source.onload=function(){r.hasLoaded=!0,r.width=r.source.width,r.height=r.source.height,o.texturesToUpdate.push(r),r.dispatchEvent({type:"loaded",content:r})}}else this.hasLoaded=!0,this.width=this.source.width,this.height=this.source.height,o.texturesToUpdate.push(this);this.imageUrl=null,this._powerOf2=!1}}var i=r(2),o=r(0),a=r(5),s={},u=n.prototype;u.destroy=function(){this.source.src&&(this.imageUrl in s&&delete s[this.imageUrl],this.imageUrl=null,this.source.src=null),this.source=null,o.texturesToDestroy.push(this)},u.updateSourceImage=function(t){this.hasLoaded=!1,this.source.src=null,this.source.src=t},n.fromImage=function(t,e,r){var o=s[t];if(!o){var a=new i.createImage;e&&(a.crossOrigin=""),a.src=t,(o=new n(a,r)).imageUrl=t,s[t]=o}return o},n.SCALE_MODE={DEFAULT:0,LINEAR:0,NEAREST:1},t.exports=n},function(t,e,r){"use strict";function n(t){var e="data:";if(t.slice(0,e.length).toLowerCase()===e){var r=t.slice(e.length),n=r.indexOf(",");if(-1===n)return null;var i=r.slice(0,n).split(";")[0];return i&&"text/plain"!==i.toLowerCase()?i.split("/").pop().toLowerCase():"txt"}return null}function i(t,e){o.call(this),this.assetURLs=t,this.crossorigin=e}var o=r(5),a={},s=i.prototype;s.load=function(){function t(){e.onAssetLoaded()}var e=this;this.loadCount=this.assetURLs.length;for(var r=0,i=this.assetURLs.length;i>r;r++){var o=this.assetURLs[r],s=n(o);s||(s=o.split("?").shift().split(".").pop().toLowerCase());var u=a[s];if(!u)throw new Error(s+" is an unsupported file type");var h=new u(o,this.crossorigin);h.addEventListener("loaded",t),h.load()}},s.onAssetLoaded=function(){this.loadCount--,this.dispatchEvent({type:"onProgress",content:this}),this.onProgress&&this.onProgress(),this.loadCount||(this.dispatchEvent({type:"onComplete",content:this}),this.onComplete&&this.onComplete())},i.registerLoaderType=function(t,e){a[t]=e},t.exports=i},function(t,e,r){"use strict";var n=r(0),i=r(42),o=r(43),a=r(29);e.initDefaultShaders=function(){n.primitiveShader=new i,n.primitiveShader.init(),n.stripShader=new o,n.stripShader.init(),n.defaultShader=new a,n.defaultShader.init();var t=n.gl,e=n.defaultShader.program;t.useProgram(e),t.enableVertexAttribArray(n.defaultShader.aVertexPosition),t.enableVertexAttribArray(n.defaultShader.colorAttribute),t.enableVertexAttribArray(n.defaultShader.aTextureCoord)},e.activatePrimitiveShader=function(){var t=n.gl;t.useProgram(n.primitiveShader.program),t.disableVertexAttribArray(n.defaultShader.aVertexPosition),t.disableVertexAttribArray(n.defaultShader.colorAttribute),t.disableVertexAttribArray(n.defaultShader.aTextureCoord),t.enableVertexAttribArray(n.primitiveShader.aVertexPosition),t.enableVertexAttribArray(n.primitiveShader.colorAttribute)},e.deactivatePrimitiveShader=function(){var t=n.gl;t.useProgram(n.defaultShader.program),t.disableVertexAttribArray(n.primitiveShader.aVertexPosition),t.disableVertexAttribArray(n.primitiveShader.colorAttribute),t.enableVertexAttribArray(n.defaultShader.aVertexPosition),t.enableVertexAttribArray(n.defaultShader.colorAttribute),t.enableVertexAttribArray(n.defaultShader.aTextureCoord)},e.activateStripShader=function(){n.gl.useProgram(n.stripShader.program)},e.deactivateStripShader=function(){n.gl.useProgram(n.defaultShader.program)}},function(t,e,r){"use strict";t.exports=function(){this.visible=!0,this.renderable=!0}},function(t,e,r){"use strict";function n(t,e,r){o.call(this),this.texture=t,this.blendMode=i.NORMAL;try{this.uvs=new Float32Array([0,1,1,1,1,0,0,1]),this.verticies=new Float32Array([0,0,0,0,0,0,0,0,0]),this.colors=new Float32Array([1,1,1,1]),this.indices=new Uint16Array([0,1,2,3])}catch(t){this.uvs=[0,1,1,1,1,0,0,1],this.verticies=[0,0,0,0,0,0,0,0,0],this.colors=[1,1,1,1],this.indices=[0,1,2,3]}if(this.width=e,this.height=r,t.baseTexture.hasLoaded)this.width=this.texture.frame.width,this.height=this.texture.frame.height,this.updateFrame=!0;else{var n=this;this.texture.addEventListener("update",function(){n.onTextureUpdate()})}this.renderable=!0}var i=r(11),o=r(6),a=n.prototype=Object.create(o.prototype,{constructor:{value:n}});a.setTexture=function(t){this.texture=t,this.width=t.frame.width,this.height=t.frame.height,this.updateFrame=!0},a.onTextureUpdate=function(){this.updateFrame=!0},t.exports=n},function(t,e,r){"use strict";function n(t,e){o.call(this),this.texture=a.fromImage(t,e),this.frames=[]}var i=r(13),o=r(5),a=r(4),s=n.prototype;s.load=function(){if(this.texture.baseTexture.hasLoaded)this.onLoaded();else{var t=this;this.texture.baseTexture.addEventListener("loaded",function(){t.onLoaded()})}},s.onLoaded=function(){this.dispatchEvent({type:"loaded",content:this})},s.loadFramedSpriteSheet=function(t,e,r){this.frames=[];for(var n=Math.floor(this.texture.width/t),i=Math.floor(this.texture.height/e),o=0,s=0;i>s;s++)for(var u=0;n>u;u++,o++){var h=new a(this.texture,{x:u*t,y:s*e,width:t,height:e});this.frames.push(h),r&&(a.cache[r+"-"+o]=h)}if(this.texture.baseTexture.hasLoaded)this.onLoaded();else{var l=this;this.texture.baseTexture.addEventListener("loaded",function(){l.onLoaded()})}},i.registerLoaderType("jpg",n),i.registerLoaderType("jpeg",n),i.registerLoaderType("png",n),i.registerLoaderType("gif",n),t.exports=n},function(t,e,r){"use strict";var n=r(2);e.shader=function(t,e,r){var i=e.join("\n"),o=t.createShader(r);return t.shaderSource(o,i),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS)?o:(n.console&&n.console.error(t.getShaderInfoLog(o)),null)},e.program=function(t,r,i){var o=e.shader(t,i,t.FRAGMENT_SHADER),a=e.shader(t,r,t.VERTEX_SHADER),s=t.createProgram();return t.attachShader(s,a),t.attachShader(s,o),t.linkProgram(s),t.getProgramParameter(s,t.LINK_STATUS)?s:(n.console&&n.console.error("Could not initialise shaders"),null)}},function(t,e,r){function n(){this.last=this,this.first=this,this.position=new s,this.scale=new s(1,1),this.pivot=new s(0,0),this.rotation=0,this.alpha=1,this.visible=!0,this.hitArea=null,this.buttonMode=!1,this.renderable=!1,this.parent=null,this.stage=null,this.worldAlpha=1,this._interactive=!1,this.defaultCursor="pointer",this.worldTransform=o.create(),this.localTransform=o.create(),this.color=[],this.dynamic=!0,this._sr=0,this._cr=1,this.filterArea=new u(0,0,1,1)}var i=r(0),o=r(9).mat3,a=r(15),s=r(3),u=r(8),h=n.prototype;h.setInteractive=function(t){this.interactive=t},Object.defineProperty(h,"interactive",{get:function(){return this._interactive},set:function(t){this._interactive=t,this.stage&&(this.stage.dirty=!0)}}),Object.defineProperty(h,"mask",{get:function(){return this._mask},set:function(t){t?this._mask?(t.start=this._mask.start,t.end=this._mask.end):(this.addFilter(t),t.renderable=!1):(this.removeFilter(this._mask),this._mask.renderable=!0),this._mask=t}}),Object.defineProperty(h,"filters",{get:function(){return this._filters},set:function(t){if(t){this._filters&&this.removeFilter(this._filters),this.addFilter(t);for(var e=[],r=0;r<t.length;r++)for(var n=t[r].passes,i=0;i<n.length;i++)e.push(n[i]);t.start.filterPasses=e}else this._filters&&this.removeFilter(this._filters);this._filters=t}}),h.addFilter=function(t){var e=new a,r=new a;t.start=e,t.end=r,e.data=t,r.data=t,e.first=e.last=this,r.first=r.last=this,e.open=!0,e.target=this;var n,i,o=e,s=e;(i=this.first._iPrev)?(n=i._iNext,o._iPrev=i,i._iNext=o):n=this,n&&(n._iPrev=s,s._iNext=n),o=r,s=r,n=null,i=null,(n=(i=this.last)._iNext)&&(n._iPrev=s,s._iNext=n),o._iPrev=i,i._iNext=o;for(var u=this,h=this.last;u;)u.last===h&&(u.last=r),u=u.parent;this.first=e,this.__renderGroup&&this.__renderGroup.addFilterBlocks(e,r)},h.removeFilter=function(t){var e=t.start,r=e._iNext,n=e._iPrev;r&&(r._iPrev=n),n&&(n._iNext=r),this.first=e._iNext;var i=t.end;r=i._iNext,n=i._iPrev,r&&(r._iPrev=n),n._iNext=r;for(var o=i._iPrev,a=this;a.last===i&&(a.last=o,a=a.parent););this.__renderGroup&&this.__renderGroup.removeFilterBlocks(e,i)},h.updateTransform=function(){this.rotation!==this.rotationCache&&(this.rotationCache=this.rotation,this._sr=Math.sin(this.rotation),this._cr=Math.cos(this.rotation));var t=this.localTransform,e=this.parent.worldTransform,r=this.worldTransform;t[0]=this._cr*this.scale.x,t[1]=-this._sr*this.scale.y,t[3]=this._sr*this.scale.x,t[4]=this._cr*this.scale.y;var n=this.pivot.x,o=this.pivot.y,a=t[0],s=t[1],u=this.position.x-t[0]*n-o*t[1],h=t[3],l=t[4],f=this.position.y-t[4]*o-n*t[3],c=e[0],d=e[1],p=e[2],v=e[3],g=e[4],m=e[5];t[2]=u,t[5]=f,r[0]=c*a+d*h,r[1]=c*s+d*l,r[2]=c*u+d*f+p,r[3]=v*a+g*h,r[4]=v*s+g*l,r[5]=v*u+g*f+m,this.worldAlpha=this.alpha*this.parent.worldAlpha,this.vcount=i.visibleCount},t.exports=n},function(t,e,r){"use strict";function n(t,e,r,n){this.transparent=n,this.width=t||800,this.height=e||600,this.view=r||i.createCanvas(),this.context=this.view.getContext("2d"),this.smoothProperty=null,"imageSmoothingEnabled"in this.context?this.smoothProperty="imageSmoothingEnabled":"webkitImageSmoothingEnabled"in this.context?this.smoothProperty="webkitImageSmoothingEnabled":"mozImageSmoothingEnabled"in this.context?this.smoothProperty="mozImageSmoothingEnabled":"oImageSmoothingEnabled"in this.context&&(this.smoothProperty="oImageSmoothingEnabled"),this.scaleMode=null,this.refresh=!0,this.view.width=this.width,this.view.height=this.height,this.count=0}var i=r(2),o=r(0),a=r(35),s=r(12),u=r(4),h=r(7),l=r(21),f=r(16),c=r(22),d=r(10),p=r(15),v=n.prototype;v.render=function(t){o.texturesToUpdate=[],o.texturesToDestroy=[],o.visibleCount++,t.updateTransform(),this.view.style.backgroundColor===t.backgroundColorString||this.transparent||(this.view.style.backgroundColor=t.backgroundColorString),this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.width,this.height),this.renderDisplayObject(t),t.interactive&&(t._interactiveEventsAdded||(t._interactiveEventsAdded=!0,t.interactionManager.setTarget(this))),u.frameUpdates.length>0&&(u.frameUpdates=[])},v.resize=function(t,e){this.width=t,this.height=e,this.view.width=t,this.view.height=e},v.renderDisplayObject=function(t){var e,r=this.context;r.globalCompositeOperation="source-over";var n=t.last._iNext;t=t.first;do{if(e=t.worldTransform,t.visible)if(t.renderable){if(t instanceof h){var i=t.texture.frame;i&&i.width&&i.height&&t.texture.baseTexture.source&&(r.globalAlpha=t.worldAlpha,r.setTransform(e[0],e[3],e[1],e[4],e[2],e[5]),this.smoothProperty&&this.scaleMode!==t.texture.baseTexture.scaleMode&&(this.scaleMode=t.texture.baseTexture.scaleMode,r[this.smoothProperty]=this.scaleMode===s.SCALE_MODE.LINEAR),r.drawImage(t.texture.baseTexture.source,i.x,i.y,i.width,i.height,t.anchor.x*-i.width,t.anchor.y*-i.height,i.width,i.height))}else if(t instanceof f)r.setTransform(e[0],e[3],e[1],e[4],e[2],e[5]),this.renderStrip(t);else if(t instanceof l)r.setTransform(e[0],e[3],e[1],e[4],e[2],e[5]),this.renderTilingSprite(t);else if(t instanceof c)r.setTransform(e[0],e[3],e[1],e[4],e[2],e[5]),t.renderCanvas(this);else if(t instanceof d)r.setTransform(e[0],e[3],e[1],e[4],e[2],e[5]),a.renderGraphics(t,r);else if(t instanceof p&&t.data instanceof d){var o=t.data;if(t.open){r.save();var u=o.alpha,v=o.worldTransform;r.setTransform(v[0],v[3],v[1],v[4],v[2],v[5]),o.worldAlpha=.5,r.worldAlpha=0,a.renderGraphicsMask(o,r),r.clip(),o.worldAlpha=u}else r.restore()}t=t._iNext}else t=t._iNext;else t=t.last._iNext}while(t!==n)},v.renderStripFlat=function(t){var e=this.context,r=t.verticies,n=r.length/2;this.count++,e.beginPath();for(var i=1;n-2>i;i++){var o=2*i,a=r[o],s=r[o+2],u=r[o+4],h=r[o+1],l=r[o+3],f=r[o+5];e.moveTo(a,h),e.lineTo(s,l),e.lineTo(u,f)}e.fillStyle="#FF0000",e.fill(),e.closePath()},v.renderTilingSprite=function(t){var e=this.context;e.globalAlpha=t.worldAlpha,t.__tilePattern||(t.__tilePattern=e.createPattern(t.texture.baseTexture.source,"repeat")),e.beginPath();var r=t.tilePosition,n=t.tileScale;e.scale(n.x,n.y),e.translate(r.x,r.y),e.fillStyle=t.__tilePattern,e.fillRect(-r.x,-r.y,t.width/n.x,t.height/n.y),e.scale(1/n.x,1/n.y),e.translate(-r.x,-r.y),e.closePath()},v.renderStrip=function(t){var e=this.context,r=t.verticies,n=t.uvs,i=r.length/2;this.count++;for(var o=1;i-2>o;o++){var a=2*o,s=r[a],u=r[a+2],h=r[a+4],l=r[a+1],f=r[a+3],c=r[a+5],d=n[a]*t.texture.width,p=n[a+2]*t.texture.width,v=n[a+4]*t.texture.width,g=n[a+1]*t.texture.height,m=n[a+3]*t.texture.height,_=n[a+5]*t.texture.height;e.save(),e.beginPath(),e.moveTo(s,l),e.lineTo(u,f),e.lineTo(h,c),e.closePath(),e.clip();var x=d*m+g*v+p*_-m*v-g*p-d*_,y=s*m+g*h+u*_-m*h-g*u-s*_,b=d*u+s*v+p*h-u*v-s*p-d*h,T=d*m*h+g*u*v+s*p*_-s*m*v-g*p*h-d*u*_,w=l*m+g*c+f*_-m*c-g*f-l*_,A=d*f+l*v+p*c-f*v-l*p-d*c,E=d*m*c+g*f*v+l*p*_-l*m*v-g*p*c-d*f*_;e.transform(y/x,w/x,b/x,A/x,T/x,E/x),e.drawImage(t.texture.baseTexture.source,0,0),e.restore()}},t.exports=n},function(t,e,r){"use strict";function n(t,e,r){o.call(this),this.texture=t,this.width=e,this.height=r,this.tileScale=new a(1,1),this.tilePosition=new a(0,0),this.renderable=!0,this.blendMode=i.NORMAL}var i=r(11),o=r(6),a=r(3),s=n.prototype=Object.create(o.prototype,{constructor:{value:n}});s.setTexture=function(t){this.texture=t,this.updateFrame=!0},s.onTextureUpdate=function(){this.updateFrame=!0},t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.renderable=!0}var i=r(19),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});o.renderCanvas=function(){},o.initWebGL=function(){},o.renderWebGL=function(){},t.exports=n},function(t,e,r){"use strict";function n(t){this.gl=t,this.size=0,this.vertexBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),this.uvBuffer=t.createBuffer(),this.colorBuffer=t.createBuffer(),this.blendMode=o.NORMAL,this.dynamicSize=1}var i=r(0),o=r(11),a=n.prototype;a.clean=function(){this.verticies=[],this.uvs=[],this.indices=[],this.colors=[],this.dynamicSize=1,this.texture=null,this.last=null,this.size=0,this.head=null,this.tail=null},a.restoreLostContext=function(t){this.gl=t,this.vertexBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),this.uvBuffer=t.createBuffer(),this.colorBuffer=t.createBuffer()},a.init=function(t){t.batch=this,this.dirty=!0,this.blendMode=t.blendMode,this.texture=t.texture.baseTexture,this.head=t,this.tail=t,this.size=1,this.growBatch()},a.insertBefore=function(t,e){this.size++,t.batch=this,this.dirty=!0;var r=e.__prev;e.__prev=t,t.__next=e,r?(t.__prev=r,r.__next=t):this.head=t},a.insertAfter=function(t,e){this.size++,t.batch=this,this.dirty=!0;var r=e.__next;e.__next=t,t.__prev=e,r?(t.__next=r,r.__prev=t):this.tail=t},a.remove=function(t){return this.size--,this.size?(t.__prev?t.__prev.__next=t.__next:(this.head=t.__next,this.head.__prev=null),t.__next?t.__next.__prev=t.__prev:(this.tail=t.__prev,this.tail.__next=null),t.batch=null,t.__next=null,t.__prev=null,void(this.dirty=!0)):(t.batch=null,t.__prev=null,void(t.__next=null))},a.split=function(t){this.dirty=!0;var e=new n(this.gl);e.init(t),e.texture=this.texture,e.tail=this.tail,this.tail=t.__prev,this.tail.__next=null,t.__prev=null;for(var r=0;t;)r++,t.batch=e,t=t.__next;return e.size=r,this.size-=r,e},a.merge=function(t){this.dirty=!0,this.tail.__next=t.head,t.head.__prev=this.tail,this.size+=t.size,this.tail=t.tail;for(var e=t.head;e;)e.batch=this,e=e.__next},a.growBatch=function(){var t=this.gl;1===this.size?this.dynamicSize=1:this.dynamicSize=1.5*this.size,this.verticies=new Float32Array(8*this.dynamicSize),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.verticies,t.DYNAMIC_DRAW),this.uvs=new Float32Array(8*this.dynamicSize),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),t.bufferData(t.ARRAY_BUFFER,this.uvs,t.DYNAMIC_DRAW),this.dirtyUVS=!0,this.colors=new Float32Array(4*this.dynamicSize),t.bindBuffer(t.ARRAY_BUFFER,this.colorBuffer),t.bufferData(t.ARRAY_BUFFER,this.colors,t.DYNAMIC_DRAW),this.dirtyColors=!0,this.indices=new Uint16Array(6*this.dynamicSize);for(var e=0,r=this.indices.length/6;r>e;e++){var n=6*e,i=4*e;this.indices[n+0]=i+0,this.indices[n+1]=i+1,this.indices[n+2]=i+2,this.indices[n+3]=i+0,this.indices[n+4]=i+2,this.indices[n+5]=i+3}t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW)},a.refresh=function(){this.dynamicSize<this.size&&this.growBatch();for(var t,e,r=0,n=this.head;n;){t=8*r;var i=n.texture,o=i.frame,a=i.baseTexture.width,s=i.baseTexture.height;this.uvs[t+0]=o.x/a,this.uvs[t+1]=o.y/s,this.uvs[t+2]=(o.x+o.width)/a,this.uvs[t+3]=o.y/s,this.uvs[t+4]=(o.x+o.width)/a,this.uvs[t+5]=(o.y+o.height)/s,this.uvs[t+6]=o.x/a,this.uvs[t+7]=(o.y+o.height)/s,n.updateFrame=!1,e=4*r,this.colors[e]=this.colors[e+1]=this.colors[e+2]=this.colors[e+3]=n.worldAlpha,n=n.__next,r++}this.dirtyUVS=!0,this.dirtyColors=!0},a.update=function(){for(var t,e,r,n,o,a,s,u,h,l,f,c,d,p,v,g,m=0,_=this.head,x=this.verticies,y=this.uvs,b=this.colors;_;){if(_.vcount===i.visibleCount){if(e=_.texture.frame.width,r=_.texture.frame.height,a=e*(1-(n=_.anchor.x)),s=e*-n,u=r*(1-(o=_.anchor.y)),h=r*-o,l=8*m,f=(t=_.worldTransform)[0],c=t[3],d=t[1],p=t[4],v=t[2],g=t[5],x[l+0]=f*s+d*h+v,x[l+1]=p*h+c*s+g,x[l+2]=f*a+d*h+v,x[l+3]=p*h+c*a+g,x[l+4]=f*a+d*u+v,x[l+5]=p*u+c*a+g,x[l+6]=f*s+d*u+v,x[l+7]=p*u+c*s+g,_.updateFrame||_.texture.updateFrame){this.dirtyUVS=!0;var T=_.texture,w=T.frame,A=T.baseTexture.width,E=T.baseTexture.height;y[l+0]=w.x/A,y[l+1]=w.y/E,y[l+2]=(w.x+w.width)/A,y[l+3]=w.y/E,y[l+4]=(w.x+w.width)/A,y[l+5]=(w.y+w.height)/E,y[l+6]=w.x/A,y[l+7]=(w.y+w.height)/E,_.updateFrame=!1}if(_.cacheAlpha!==_.worldAlpha){_.cacheAlpha=_.worldAlpha;var C=4*m;b[C]=b[C+1]=b[C+2]=b[C+3]=_.worldAlpha,this.dirtyColors=!0}}else x[(l=8*m)+0]=x[l+1]=x[l+2]=x[l+3]=x[l+4]=x[l+5]=x[l+6]=x[l+7]=0;m++,_=_.__next}},a.render=function(t,e){if(t=t||0,arguments.length<2&&(e=this.size),this.dirty&&(this.refresh(),this.dirty=!1),this.size){this.update();var r=this.gl,n=i.defaultShader;r.bindBuffer(r.ARRAY_BUFFER,this.vertexBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,this.verticies),r.vertexAttribPointer(n.aVertexPosition,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,this.uvBuffer),this.dirtyUVS&&(this.dirtyUVS=!1,r.bufferSubData(r.ARRAY_BUFFER,0,this.uvs)),r.vertexAttribPointer(n.aTextureCoord,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,this.texture._glTexture),r.bindBuffer(r.ARRAY_BUFFER,this.colorBuffer),this.dirtyColors&&(this.dirtyColors=!1,r.bufferSubData(r.ARRAY_BUFFER,0,this.colors)),r.vertexAttribPointer(n.colorAttribute,1,r.FLOAT,!1,0,0),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,this.indexBuffer);var o=e-t;r.drawElements(r.TRIANGLES,6*o,r.UNSIGNED_SHORT,2*t*6)}};var s=[];n.restoreBatches=function(t){for(var e=0,r=s.length;r>e;e++)s[e].restoreLostContext(t)},n.getBatch=function(){return s.length?s.pop():new n(i.gl)},n.returnBatch=function(t){t.clean(),s.push(t)},t.exports=n},function(t,e,r){"use strict";function n(t,e){this.gl=t,this.root=null,this.backgroundColor=void 0,this.transparent=void 0===e||e,this.batchs=[],this.toRemove=[],this.filterManager=new u(this.transparent)}var i=r(0),o=r(14),a=r(37),s=r(23),u=r(64),h=r(9).mat3,l=r(12),f=r(21),c=r(16),d=r(10),p=r(15),v=r(7),g=r(22),m=n.prototype;m.setRenderable=function(t){this.root&&this.removeDisplayObjectAndChildren(this.root),t.worldVisible=t.visible,this.root=t,this.addDisplayObjectAndChildren(t)},m.render=function(t,e){var r=this.gl;n.updateTextures(r),r.uniform2f(i.defaultShader.projectionVector,t.x,t.y),this.filterManager.begin(t,e),r.blendFunc(r.ONE,r.ONE_MINUS_SRC_ALPHA);for(var o,a=0;a<this.batchs.length;a++)(o=this.batchs[a])instanceof s?this.batchs[a].render():this.renderSpecial(o,t)},m.handleFilter=function(){},m.renderSpecific=function(t,e,r){var o=this.gl;n.updateTextures(o),o.uniform2f(i.defaultShader.projectionVector,e.x,e.y),this.filterManager.begin(e,r);for(var a,u,h,l,f,c,d=t.first;d._iNext&&(!d.renderable||!d.__renderGroup);)d=d._iNext;var p=d.batch;if(d instanceof v)if((c=(p=d.batch).head)===d)a=0;else for(a=1;c.__next!==d;)a++,c=c.__next;else p=d;for(var g=t.last;g._iPrev&&(!g.renderable||!g.__renderGroup);)g=g._iNext;if(g instanceof v)if((c=(f=g.batch).head)===g)h=0;else for(h=1;c.__next!==g;)h++,c=c.__next;else f=g;if(p!==f){u=this.batchs.indexOf(p),l=this.batchs.indexOf(f),p instanceof s?p.render(a):this.renderSpecial(p,e);for(var m,_=u+1;l>_;_++)(m=this.batchs[_])instanceof s?this.batchs[_].render():this.renderSpecial(m,e);f instanceof s?f.render(0,h+1):this.renderSpecial(f,e)}else p instanceof s?p.render(a,h+1):this.renderSpecial(p,e)},m.renderSpecial=function(t,e){var r=t.vcount===i.visibleCount;t instanceof f?r&&this.renderTilingSprite(t,e):t instanceof c?r&&this.renderStrip(t,e):t instanceof g?r&&t.renderWebGL(this,e):t instanceof d?r&&t.renderable&&a.renderGraphics(t,e):t instanceof p&&this.handleFilterBlock(t,e)};var _=[];m.handleFilterBlock=function(t,e){var r=i.gl;if(t.open)t.data instanceof Array?this.filterManager.pushFilter(t):(_.push(t),r.enable(r.STENCIL_TEST),r.colorMask(!1,!1,!1,!1),r.stencilFunc(r.ALWAYS,1,1),r.stencilOp(r.KEEP,r.KEEP,r.INCR),a.renderGraphics(t.data,e),r.colorMask(!0,!0,!0,!0),r.stencilFunc(r.NOTEQUAL,0,_.length),r.stencilOp(r.KEEP,r.KEEP,r.KEEP));else if(t.data instanceof Array)this.filterManager.popFilter();else{var n=_.pop(t);n&&(r.colorMask(!1,!1,!1,!1),r.stencilFunc(r.ALWAYS,1,1),r.stencilOp(r.KEEP,r.KEEP,r.DECR),a.renderGraphics(n.data,e),r.colorMask(!0,!0,!0,!0),r.stencilFunc(r.NOTEQUAL,0,_.length),r.stencilOp(r.KEEP,r.KEEP,r.KEEP)),r.disable(r.STENCIL_TEST)}},m.updateTexture=function(t){this.removeObject(t);for(var e=t.first;e!==this.root&&(!(e=e._iPrev).renderable||!e.__renderGroup););for(var r=t.last;r._iNext&&(!(r=r._iNext).renderable||!r.__renderGroup););this.insertObject(t,e,r)},m.addFilterBlocks=function(t,e){t.__renderGroup=this,e.__renderGroup=this;for(var r=t;r!==this.root.first&&(!(r=r._iPrev).renderable||!r.__renderGroup););this.insertAfter(t,r);for(var n=e;n!==this.root.first&&(!(n=n._iPrev).renderable||!n.__renderGroup););this.insertAfter(e,n)},m.removeFilterBlocks=function(t,e){this.removeObject(t),this.removeObject(e)},m.addDisplayObjectAndChildren=function(t){t.__renderGroup&&t.__renderGroup.removeDisplayObjectAndChildren(t);for(var e=t.first;e!==this.root.first&&(!(e=e._iPrev).renderable||!e.__renderGroup););for(var r=t.last;r._iNext&&(!(r=r._iNext).renderable||!r.__renderGroup););var n=t.first,i=t.last._iNext;do{n.__renderGroup=this,n.renderable&&(this.insertObject(n,e,r),e=n),n=n._iNext}while(n!==i)},m.removeDisplayObjectAndChildren=function(t){if(t.__renderGroup===this)do{t.__renderGroup=null,t.renderable&&this.removeObject(t),t=t._iNext}while(t)},m.insertObject=function(t,e,r){var n,i,o=e,a=r;if(t instanceof v){var u,h;if(o instanceof v){if((u=o.batch)&&u.texture===t.texture.baseTexture&&u.blendMode===t.blendMode)return void u.insertAfter(t,o)}else u=o;if(a)if(a instanceof v){if(h=a.batch){if(h.texture===t.texture.baseTexture&&h.blendMode===t.blendMode)return void h.insertBefore(t,a);if(h===u){var l=u.split(a);return n=s.getBatch(),i=this.batchs.indexOf(u),n.init(t),void this.batchs.splice(i+1,0,n,l)}}}else h=a;return(n=s.getBatch()).init(t),void(u?(i=this.batchs.indexOf(u),this.batchs.splice(i+1,0,n)):this.batchs.push(n))}t instanceof f?this.initTilingSprite(t):t instanceof c&&this.initStrip(t),this.insertAfter(t,o)},m.insertAfter=function(t,e){var r,n,i;e instanceof v?(r=e.batch)?r.tail===e?(i=this.batchs.indexOf(r),this.batchs.splice(i+1,0,t)):(n=r.split(e.__next),i=this.batchs.indexOf(r),this.batchs.splice(i+1,0,t,n)):this.batchs.push(t):(i=this.batchs.indexOf(e),this.batchs.splice(i+1,0,t))},m.removeObject=function(t){var e,r;if(t instanceof v){var n=t.batch;if(!n)return;n.remove(t),n.size||(e=n)}else e=t;if(e){if(-1===(r=this.batchs.indexOf(e)))return;if(0===r||r===this.batchs.length-1)return this.batchs.splice(r,1),void(e instanceof s&&s.returnBatch(e));if(this.batchs[r-1]instanceof s&&this.batchs[r+1]instanceof s&&this.batchs[r-1].texture===this.batchs[r+1].texture&&this.batchs[r-1].blendMode===this.batchs[r+1].blendMode)return this.batchs[r-1].merge(this.batchs[r+1]),e instanceof s&&s.returnBatch(e),s.returnBatch(this.batchs[r+1]),void this.batchs.splice(r,2);this.batchs.splice(r,1),e instanceof s&&s.returnBatch(e)}},m.initTilingSprite=function(t){var e=this.gl;t.verticies=new Float32Array([0,0,t.width,0,t.width,t.height,0,t.height]),t.uvs=new Float32Array([0,0,1,0,1,1,0,1]),t.colors=new Float32Array([1,1,1,1]),t.indices=new Uint16Array([0,1,3,2]),t._vertexBuffer=e.createBuffer(),t._indexBuffer=e.createBuffer(),t._uvBuffer=e.createBuffer(),t._colorBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,t._vertexBuffer),e.bufferData(e.ARRAY_BUFFER,t.verticies,e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,t._uvBuffer),e.bufferData(e.ARRAY_BUFFER,t.uvs,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,t._colorBuffer),e.bufferData(e.ARRAY_BUFFER,t.colors,e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t._indexBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t.indices,e.STATIC_DRAW),t.texture.baseTexture._glTexture?(e.bindTexture(e.TEXTURE_2D,t.texture.baseTexture._glTexture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),t.texture.baseTexture._powerOf2=!0):t.texture.baseTexture._powerOf2=!0},m.renderStrip=function(t,e){var r=this.gl;o.activateStripShader();var n=i.stripShader,a=h.clone(t.worldTransform);h.transpose(a),r.uniformMatrix3fv(n.translationMatrix,!1,a),r.uniform2f(n.projectionVector,e.x,e.y),r.uniform2f(n.offsetVector,-i.offset.x,-i.offset.y),r.uniform1f(n.alpha,t.worldAlpha),t.dirty?(t.dirty=!1,r.bindBuffer(r.ARRAY_BUFFER,t._vertexBuffer),r.bufferData(r.ARRAY_BUFFER,t.verticies,r.STATIC_DRAW),r.vertexAttribPointer(n.aVertexPosition,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,t._uvBuffer),r.bufferData(r.ARRAY_BUFFER,t.uvs,r.STATIC_DRAW),r.vertexAttribPointer(n.aTextureCoord,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t.texture.baseTexture._glTexture),r.bindBuffer(r.ARRAY_BUFFER,t._colorBuffer),r.bufferData(r.ARRAY_BUFFER,t.colors,r.STATIC_DRAW),r.vertexAttribPointer(n.colorAttribute,1,r.FLOAT,!1,0,0),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t._indexBuffer),r.bufferData(r.ELEMENT_ARRAY_BUFFER,t.indices,r.STATIC_DRAW)):(r.bindBuffer(r.ARRAY_BUFFER,t._vertexBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,t.verticies),r.vertexAttribPointer(n.aVertexPosition,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,t._uvBuffer),r.vertexAttribPointer(n.aTextureCoord,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t.texture.baseTexture._glTexture),r.bindBuffer(r.ARRAY_BUFFER,t._colorBuffer),r.vertexAttribPointer(n.colorAttribute,1,r.FLOAT,!1,0,0),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t._indexBuffer)),r.drawElements(r.TRIANGLE_STRIP,t.indices.length,r.UNSIGNED_SHORT,0),o.deactivateStripShader()},m.renderTilingSprite=function(t,e){var r=this.gl,n=t.tilePosition,i=t.tileScale,o=n.x/t.texture.baseTexture.width,a=n.y/t.texture.baseTexture.height,s=t.width/t.texture.baseTexture.width/i.x,u=t.height/t.texture.baseTexture.height/i.y;t.uvs[0]=0-o,t.uvs[1]=0-a,t.uvs[2]=1*s-o,t.uvs[3]=0-a,t.uvs[4]=1*s-o,t.uvs[5]=1*u-a,t.uvs[6]=0-o,t.uvs[7]=1*u-a,r.bindBuffer(r.ARRAY_BUFFER,t._uvBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,t.uvs),this.renderStrip(t,e)},m.initStrip=function(t){var e=this.gl;t._vertexBuffer=e.createBuffer(),t._indexBuffer=e.createBuffer(),t._uvBuffer=e.createBuffer(),t._colorBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,t._vertexBuffer),e.bufferData(e.ARRAY_BUFFER,t.verticies,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,t._uvBuffer),e.bufferData(e.ARRAY_BUFFER,t.uvs,e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,t._colorBuffer),e.bufferData(e.ARRAY_BUFFER,t.colors,e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t._indexBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t.indices,e.STATIC_DRAW)},n.updateTexture=function(t,e){e._glTexture||(e._glTexture=t.createTexture()),e.hasLoaded&&(t.bindTexture(t.TEXTURE_2D,e._glTexture),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e.source),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,e.scaleMode===l.SCALE_MODE.LINEAR?t.LINEAR:t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,e.scaleMode===l.SCALE_MODE.LINEAR?t.LINEAR:t.NEAREST),e._powerOf2?(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT)):(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),t.bindTexture(t.TEXTURE_2D,null))},n.destroyTexture=function(t,e){e._glTexture&&(e._glTexture=t.createTexture(),t.deleteTexture(t.TEXTURE_2D,e._glTexture))},n.updateTextures=function(t){for(var e=0,r=i.texturesToUpdate.length;r>e;e++)n.updateTexture(t,i.texturesToUpdate[e]);for(e=0,r=i.texturesToDestroy.length;r>e;e++)n.destroyTexture(t,i.texturesToDestroy[e]);i.texturesToUpdate=[],i.texturesToDestroy=[]},t.exports=n},function(t,e,r){"use strict";function n(t){if(o.call(this),this.spineData=n.animCache[t],!this.spineData)throw new Error("Spine data must be preloaded using SpineLoader or AssetLoader: "+t);this.skeleton=new i.Skeleton(this.spineData),this.skeleton.updateWorldTransform(),this.stateData=new i.AnimationStateData(this.spineData),this.state=new i.AnimationState(this.stateData),this.slotContainers=[];for(var e=0,r=this.skeleton.drawOrder.length;r>e;e++){var a=this.skeleton.drawOrder[e],s=a.attachment,u=new o;if(this.slotContainers.push(u),this.addChild(u),s instanceof i.RegionAttachment){var h=s.rendererObject.name,l=this.createSprite(a,s.rendererObject);a.currentSprite=l,a.currentSpriteName=h,u.addChild(l)}}}var i=r(26),o=r(6),a=r(7),s=r(4),u=n.prototype=Object.create(o.prototype,{constructor:{value:n}});u.updateTransform=function(){this.lastTime=this.lastTime||Date.now();var t=.001*(Date.now()-this.lastTime);this.lastTime=Date.now(),this.state.update(t),this.state.apply(this.skeleton),this.skeleton.updateWorldTransform();for(var e=this.skeleton.drawOrder,r=0,n=e.length;n>r;r++){var a=e[r],s=a.attachment,u=this.slotContainers[r];if(s instanceof i.RegionAttachment){if(s.rendererObject&&(!a.currentSpriteName||a.currentSpriteName!==s.name)){var h=s.rendererObject.name;if(void 0!==a.currentSprite&&(a.currentSprite.visible=!1),a.sprites=a.sprites||{},void 0!==a.sprites[h])a.sprites[h].visible=!0;else{var l=this.createSprite(a,s.rendererObject);u.addChild(l)}a.currentSprite=a.sprites[h],a.currentSpriteName=h}u.visible=!0;var f=a.bone;u.position.x=f.worldX+s.x*f.m00+s.y*f.m01,u.position.y=f.worldY+s.x*f.m10+s.y*f.m11,u.scale.x=f.worldScaleX,u.scale.y=f.worldScaleY,u.rotation=-a.bone.worldRotation*Math.PI/180}else u.visible=!1}o.prototype.updateTransform.call(this)},u.createSprite=function(t,e){var r=s.cache[e.name]?e.name:e.name+".png",n=new a(s.fromFrame(r));return n.scale=e.scale,n.rotation=e.rotation,n.anchor.x=n.anchor.y=.5,t.sprites=t.sprites||{},t.sprites[e.name]=n,n},n.animCache={},t.exports=n},function(t,e,r){"use strict";var n=t.exports={};n.BoneData=function(t,e){this.name=t,this.parent=e},n.BoneData.prototype={length:0,x:0,y:0,rotation:0,scaleX:1,scaleY:1},n.SlotData=function(t,e){this.name=t,this.boneData=e},n.SlotData.prototype={r:1,g:1,b:1,a:1,attachmentName:null},n.Bone=function(t,e){this.data=t,this.parent=e,this.setToSetupPose()},n.Bone.yDown=!1,n.Bone.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,m00:0,m01:0,worldX:0,m10:0,m11:0,worldY:0,worldRotation:0,worldScaleX:1,worldScaleY:1,updateWorldTransform:function(t,e){var r=this.parent;null!=r?(this.worldX=this.x*r.m00+this.y*r.m01+r.worldX,this.worldY=this.x*r.m10+this.y*r.m11+r.worldY,this.worldScaleX=r.worldScaleX*this.scaleX,this.worldScaleY=r.worldScaleY*this.scaleY,this.worldRotation=r.worldRotation+this.rotation):(this.worldX=this.x,this.worldY=this.y,this.worldScaleX=this.scaleX,this.worldScaleY=this.scaleY,this.worldRotation=this.rotation);var i=this.worldRotation*Math.PI/180,o=Math.cos(i),a=Math.sin(i);this.m00=o*this.worldScaleX,this.m10=a*this.worldScaleX,this.m01=-a*this.worldScaleY,this.m11=o*this.worldScaleY,t&&(this.m00=-this.m00,this.m01=-this.m01),e&&(this.m10=-this.m10,this.m11=-this.m11),n.Bone.yDown&&(this.m10=-this.m10,this.m11=-this.m11)},setToSetupPose:function(){var t=this.data;this.x=t.x,this.y=t.y,this.rotation=t.rotation,this.scaleX=t.scaleX,this.scaleY=t.scaleY}},n.Slot=function(t,e,r){this.data=t,this.skeleton=e,this.bone=r,this.setToSetupPose()},n.Slot.prototype={r:1,g:1,b:1,a:1,_attachmentTime:0,attachment:null,setAttachment:function(t){this.attachment=t,this._attachmentTime=this.skeleton.time},setAttachmentTime:function(t){this._attachmentTime=this.skeleton.time-t},getAttachmentTime:function(){return this.skeleton.time-this._attachmentTime},setToSetupPose:function(){var t=this.data;this.r=t.r,this.g=t.g,this.b=t.b,this.a=t.a;for(var e=this.skeleton.data.slots,r=0,n=e.length;n>r;r++)if(e[r]==t){this.setAttachment(t.attachmentName?this.skeleton.getAttachmentBySlotIndex(r,t.attachmentName):null);break}}},n.Skin=function(t){this.name=t,this.attachments={}},n.Skin.prototype={addAttachment:function(t,e,r){this.attachments[t+":"+e]=r},getAttachment:function(t,e){return this.attachments[t+":"+e]},_attachAll:function(t,e){for(var r in e.attachments){var n=r.indexOf(":"),i=parseInt(r.substring(0,n),10),o=r.substring(n+1),a=t.slots[i];if(a.attachment&&a.attachment.name==o){var s=this.getAttachment(i,o);s&&a.setAttachment(s)}}}},n.Animation=function(t,e,r){this.name=t,this.timelines=e,this.duration=r},n.Animation.prototype={apply:function(t,e,r){r&&this.duration&&(e%=this.duration);for(var n=this.timelines,i=0,o=n.length;o>i;i++)n[i].apply(t,e,1)},mix:function(t,e,r,n){r&&this.duration&&(e%=this.duration);for(var i=this.timelines,o=0,a=i.length;a>o;o++)i[o].apply(t,e,n)}},n.binarySearch=function(t,e,r){var n=0,i=Math.floor(t.length/r)-2;if(!i)return r;for(var o=i>>>1;;){if(t[(o+1)*r]<=e?n=o+1:i=o,n==i)return(n+1)*r;o=n+i>>>1}},n.linearSearch=function(t,e,r){for(var n=0,i=t.length-r;i>=n;n+=r)if(t[n]>e)return n;return-1},n.Curves=function(t){this.curves=[],this.curves.length=6*(t-1)},n.Curves.prototype={setLinear:function(t){this.curves[6*t]=0},setStepped:function(t){this.curves[6*t]=-1},setCurve:function(t,e,r,n,i){var o=.1*.1,a=.1*o,s=3*o,u=6*o,h=6*a,l=2*-e+n,f=2*-r+i,c=3*(e-n)+1,d=3*(r-i)+1,p=6*t,v=this.curves;v[p]=e*(3*.1)+l*s+c*a,v[p+1]=r*(3*.1)+f*s+d*a,v[p+2]=l*u+c*h,v[p+3]=f*u+d*h,v[p+4]=c*h,v[p+5]=d*h},getCurvePercent:function(t,e){e=0>e?0:e>1?1:e;var r=6*t,n=this.curves,i=n[r];if(!i)return e;if(-1==i)return 0;for(var o=n[r+1],a=n[r+2],s=n[r+3],u=n[r+4],h=n[r+5],l=i,f=o,c=8;;){if(l>=e){var d=l-i,p=f-o;return p+(f-p)*(e-d)/(l-d)}if(!c)break;c--,i+=a,o+=s,a+=u,s+=h,l+=i,f+=o}return f+(1-f)*(e-l)/(1-l)}},n.RotateTimeline=function(t){this.curves=new n.Curves(t),this.frames=[],this.frames.length=2*t},n.RotateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(t,e,r){t*=2,this.frames[t]=e,this.frames[t+1]=r},apply:function(t,e,r){var i,o=this.frames;if(!(e<o[0])){var a=t.bones[this.boneIndex];if(e>=o[o.length-2]){for(i=a.data.rotation+o[o.length-1]-a.rotation;i>180;)i-=360;for(;-180>i;)i+=360;return void(a.rotation+=i*r)}var s=n.binarySearch(o,e,2),u=o[s-1],h=o[s],l=1-(e-h)/(o[s-2]-h);for(l=this.curves.getCurvePercent(s/2-1,l),i=o[s+1]-u;i>180;)i-=360;for(;-180>i;)i+=360;for(i=a.data.rotation+(u+i*l)-a.rotation;i>180;)i-=360;for(;-180>i;)i+=360;a.rotation+=i*r}}},n.TranslateTimeline=function(t){this.curves=new n.Curves(t),this.frames=[],this.frames.length=3*t},n.TranslateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(t,e,r,n){t*=3,this.frames[t]=e,this.frames[t+1]=r,this.frames[t+2]=n},apply:function(t,e,r){var i=this.frames;if(!(e<i[0])){var o=t.bones[this.boneIndex];if(e>=i[i.length-3])return o.x+=(o.data.x+i[i.length-2]-o.x)*r,void(o.y+=(o.data.y+i[i.length-1]-o.y)*r);var a=n.binarySearch(i,e,3),s=i[a-2],u=i[a-1],h=i[a],l=1-(e-h)/(i[a+-3]-h);l=this.curves.getCurvePercent(a/3-1,l),o.x+=(o.data.x+s+(i[a+1]-s)*l-o.x)*r,o.y+=(o.data.y+u+(i[a+2]-u)*l-o.y)*r}}},n.ScaleTimeline=function(t){this.curves=new n.Curves(t),this.frames=[],this.frames.length=3*t},n.ScaleTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(t,e,r,n){t*=3,this.frames[t]=e,this.frames[t+1]=r,this.frames[t+2]=n},apply:function(t,e,r){var i=this.frames;if(!(e<i[0])){var o=t.bones[this.boneIndex];if(e>=i[i.length-3])return o.scaleX+=(o.data.scaleX-1+i[i.length-2]-o.scaleX)*r,void(o.scaleY+=(o.data.scaleY-1+i[i.length-1]-o.scaleY)*r);var a=n.binarySearch(i,e,3),s=i[a-2],u=i[a-1],h=i[a],l=1-(e-h)/(i[a+-3]-h);l=this.curves.getCurvePercent(a/3-1,l),o.scaleX+=(o.data.scaleX-1+s+(i[a+1]-s)*l-o.scaleX)*r,o.scaleY+=(o.data.scaleY-1+u+(i[a+2]-u)*l-o.scaleY)*r}}},n.ColorTimeline=function(t){this.curves=new n.Curves(t),this.frames=[],this.frames.length=5*t},n.ColorTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(t,e,r,n,i,o){t*=5,this.frames[t]=e,this.frames[t+1]=r,this.frames[t+2]=n,this.frames[t+3]=i,this.frames[t+4]=o},apply:function(t,e,r){var i=this.frames;if(!(e<i[0])){var o=t.slots[this.slotIndex];if(e>=i[i.length-5]){var a=i.length-1;return o.r=i[a-3],o.g=i[a-2],o.b=i[a-1],void(o.a=i[a])}var s=n.binarySearch(i,e,5),u=i[s-4],h=i[s-3],l=i[s-2],f=i[s-1],c=i[s],d=1-(e-c)/(i[s-5]-c);d=this.curves.getCurvePercent(s/5-1,d);var p=u+(i[s+1]-u)*d,v=h+(i[s+2]-h)*d,g=l+(i[s+3]-l)*d,m=f+(i[s+4]-f)*d;1>r?(o.r+=(p-o.r)*r,o.g+=(v-o.g)*r,o.b+=(g-o.b)*r,o.a+=(m-o.a)*r):(o.r=p,o.g=v,o.b=g,o.a=m)}}},n.AttachmentTimeline=function(t){this.curves=new n.Curves(t),this.frames=[],this.frames.length=t,this.attachmentNames=[],this.attachmentNames.length=t},n.AttachmentTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length},setFrame:function(t,e,r){this.frames[t]=e,this.attachmentNames[t]=r},apply:function(t,e,r){var i=this.frames;if(!(e<i[0])){var o;o=e>=i[i.length-1]?i.length-1:n.binarySearch(i,e,1)-1;var a=this.attachmentNames[o];t.slots[this.slotIndex].setAttachment(a?t.getAttachmentBySlotIndex(this.slotIndex,a):null)}}},n.SkeletonData=function(){this.bones=[],this.slots=[],this.skins=[],this.animations=[]},n.SkeletonData.prototype={defaultSkin:null,findBone:function(t){for(var e=this.bones,r=0,n=e.length;n>r;r++)if(e[r].name==t)return e[r];return null},findBoneIndex:function(t){for(var e=this.bones,r=0,n=e.length;n>r;r++)if(e[r].name==t)return r;return-1},findSlot:function(t){for(var e=this.slots,r=0,n=e.length;n>r;r++)if(e[r].name==t)return e[r];return null},findSlotIndex:function(t){for(var e=this.slots,r=0,n=e.length;n>r;r++)if(e[r].name==t)return r;return-1},findSkin:function(t){for(var e=this.skins,r=0,n=e.length;n>r;r++)if(e[r].name==t)return e[r];return null},findAnimation:function(t){for(var e=this.animations,r=0,n=e.length;n>r;r++)if(e[r].name==t)return e[r];return null}},n.Skeleton=function(t){this.data=t,this.bones=[];for(var e=0,r=t.bones.length;r>e;e++){var i=t.bones[e],o=i.parent?this.bones[t.bones.indexOf(i.parent)]:null;this.bones.push(new n.Bone(i,o))}for(this.slots=[],this.drawOrder=[],e=0,r=t.slots.length;r>e;e++){var a=t.slots[e],s=this.bones[t.bones.indexOf(a.boneData)],u=new n.Slot(a,this,s);this.slots.push(u),this.drawOrder.push(u)}},n.Skeleton.prototype={x:0,y:0,skin:null,r:1,g:1,b:1,a:1,time:0,flipX:!1,flipY:!1,updateWorldTransform:function(){for(var t=this.flipX,e=this.flipY,r=this.bones,n=0,i=r.length;i>n;n++)r[n].updateWorldTransform(t,e)},setToSetupPose:function(){this.setBonesToSetupPose(),this.setSlotsToSetupPose()},setBonesToSetupPose:function(){for(var t=this.bones,e=0,r=t.length;r>e;e++)t[e].setToSetupPose()},setSlotsToSetupPose:function(){for(var t=this.slots,e=0,r=t.length;r>e;e++)t[e].setToSetupPose(e)},getRootBone:function(){return this.bones.length?this.bones[0]:null},findBone:function(t){for(var e=this.bones,r=0,n=e.length;n>r;r++)if(e[r].data.name==t)return e[r];return null},findBoneIndex:function(t){for(var e=this.bones,r=0,n=e.length;n>r;r++)if(e[r].data.name==t)return r;return-1},findSlot:function(t){for(var e=this.slots,r=0,n=e.length;n>r;r++)if(e[r].data.name==t)return e[r];return null},findSlotIndex:function(t){for(var e=this.slots,r=0,n=e.length;n>r;r++)if(e[r].data.name==t)return r;return-1},setSkinByName:function(t){var e=this.data.findSkin(t);if(!e)throw"Skin not found: "+t;this.setSkin(e)},setSkin:function(t){this.skin&&t&&t._attachAll(this,this.skin),this.skin=t},getAttachmentBySlotName:function(t,e){return this.getAttachmentBySlotIndex(this.data.findSlotIndex(t),e)},getAttachmentBySlotIndex:function(t,e){if(this.skin){var r=this.skin.getAttachment(t,e);if(r)return r}return this.data.defaultSkin?this.data.defaultSkin.getAttachment(t,e):null},setAttachment:function(t,e){for(var r=this.slots,n=0,i=r.size;i>n;n++){var o=r[n];if(o.data.name==t){var a=null;if(e&&null==(a=this.getAttachment(n,e)))throw"Attachment not found: "+e+", for slot: "+t;return void o.setAttachment(a)}}throw"Slot not found: "+t},update:function(t){this.time+=t}},n.AttachmentType={region:0},n.RegionAttachment=function(){this.offset=[],this.offset.length=8,this.uvs=[],this.uvs.length=8},n.RegionAttachment.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,width:0,height:0,rendererObject:null,regionOffsetX:0,regionOffsetY:0,regionWidth:0,regionHeight:0,regionOriginalWidth:0,regionOriginalHeight:0,setUVs:function(t,e,r,n,i){var o=this.uvs;i?(o[2]=t,o[3]=n,o[4]=t,o[5]=e,o[6]=r,o[7]=e,o[0]=r,o[1]=n):(o[0]=t,o[1]=n,o[2]=t,o[3]=e,o[4]=r,o[5]=e,o[6]=r,o[7]=n)},updateOffset:function(){var t=this.width/this.regionOriginalWidth*this.scaleX,e=this.height/this.regionOriginalHeight*this.scaleY,r=-this.width/2*this.scaleX+this.regionOffsetX*t,n=-this.height/2*this.scaleY+this.regionOffsetY*e,i=r+this.regionWidth*t,o=n+this.regionHeight*e,a=this.rotation*Math.PI/180,s=Math.cos(a),u=Math.sin(a),h=r*s+this.x,l=r*u,f=n*s+this.y,c=n*u,d=i*s+this.x,p=i*u,v=o*s+this.y,g=o*u,m=this.offset;m[0]=h-c,m[1]=f+l,m[2]=h-g,m[3]=v+l,m[4]=d-g,m[5]=v+p,m[6]=d-c,m[7]=f+p},computeVertices:function(t,e,r,n){t+=r.worldX,e+=r.worldY;var i=r.m00,o=r.m01,a=r.m10,s=r.m11,u=this.offset;n[0]=u[0]*i+u[1]*o+t,n[1]=u[0]*a+u[1]*s+e,n[2]=u[2]*i+u[3]*o+t,n[3]=u[2]*a+u[3]*s+e,n[4]=u[4]*i+u[5]*o+t,n[5]=u[4]*a+u[5]*s+e,n[6]=u[6]*i+u[7]*o+t,n[7]=u[6]*a+u[7]*s+e}},n.AnimationStateData=function(t){this.skeletonData=t,this.animationToMixTime={}},n.AnimationStateData.prototype={defaultMix:0,setMixByName:function(t,e,r){var n=this.skeletonData.findAnimation(t);if(!n)throw"Animation not found: "+t;var i=this.skeletonData.findAnimation(e);if(!i)throw"Animation not found: "+e;this.setMix(n,i,r)},setMix:function(t,e,r){this.animationToMixTime[t.name+":"+e.name]=r},getMix:function(t,e){var r=this.animationToMixTime[t.name+":"+e.name];return r||this.defaultMix}},n.AnimationState=function(t){this.data=t,this.queue=[]},n.AnimationState.prototype={current:null,previous:null,currentTime:0,previousTime:0,currentLoop:!1,previousLoop:!1,mixTime:0,mixDuration:0,update:function(t){if(this.currentTime+=t,this.previousTime+=t,this.mixTime+=t,this.queue.length>0){var e=this.queue[0];this.currentTime>=e.delay&&(this._setAnimation(e.animation,e.loop),this.queue.shift())}},apply:function(t){if(this.current)if(this.previous){this.previous.apply(t,this.previousTime,this.previousLoop);var e=this.mixTime/this.mixDuration;e>=1&&(e=1,this.previous=null),this.current.mix(t,this.currentTime,this.currentLoop,e)}else this.current.apply(t,this.currentTime,this.currentLoop)},clearAnimation:function(){this.previous=null,this.current=null,this.queue.length=0},_setAnimation:function(t,e){this.previous=null,t&&this.current&&(this.mixDuration=this.data.getMix(this.current,t),this.mixDuration>0&&(this.mixTime=0,this.previous=this.current,this.previousTime=this.currentTime,this.previousLoop=this.currentLoop)),this.current=t,this.currentLoop=e,this.currentTime=0},setAnimationByName:function(t,e){var r=this.data.skeletonData.findAnimation(t);if(!r)throw"Animation not found: "+t;this.setAnimation(r,e)},setAnimation:function(t,e){this.queue.length=0,this._setAnimation(t,e)},addAnimationByName:function(t,e,r){var n=this.data.skeletonData.findAnimation(t);if(!n)throw"Animation not found: "+t;this.addAnimation(n,e,r)},addAnimation:function(t,e,r){var n={};if(n.animation=t,n.loop=e,!r||0>=r){var i=this.queue.length?this.queue[this.queue.length-1].animation:this.current;r=null!=i?i.duration-this.data.getMix(i,t)+(r||0):0}n.delay=r,this.queue.push(n)},isComplete:function(){return!this.current||this.currentTime>=this.current.duration}},n.SkeletonJson=function(t){this.attachmentLoader=t},n.SkeletonJson.prototype={scale:1,readSkeletonData:function(t){for(var e,r=new n.SkeletonData,i=t.bones,o=0,a=i.length;a>o;o++){var s=i[o],u=null;if(s.parent&&!(u=r.findBone(s.parent)))throw"Parent bone not found: "+s.parent;(e=new n.BoneData(s.name,u)).length=(s.length||0)*this.scale,e.x=(s.x||0)*this.scale,e.y=(s.y||0)*this.scale,e.rotation=s.rotation||0,e.scaleX=s.scaleX||1,e.scaleY=s.scaleY||1,r.bones.push(e)}var h=t.slots;for(o=0,a=h.length;a>o;o++){var l=h[o];if(!(e=r.findBone(l.bone)))throw"Slot bone not found: "+l.bone;var f=new n.SlotData(l.name,e),c=l.color;c&&(f.r=n.SkeletonJson.toColor(c,0),f.g=n.SkeletonJson.toColor(c,1),f.b=n.SkeletonJson.toColor(c,2),f.a=n.SkeletonJson.toColor(c,3)),f.attachmentName=l.attachment,r.slots.push(f)}var d=t.skins;for(var p in d)if(d.hasOwnProperty(p)){var v=d[p],g=new n.Skin(p);for(var m in v)if(v.hasOwnProperty(m)){var _=r.findSlotIndex(m),x=v[m];for(var y in x)if(x.hasOwnProperty(y)){var b=this.readAttachment(g,y,x[y]);null!=b&&g.addAttachment(_,y,b)}}r.skins.push(g),"default"==g.name&&(r.defaultSkin=g)}var T=t.animations;for(var w in T)T.hasOwnProperty(w)&&this.readAnimation(w,T[w],r);return r},readAttachment:function(t,e,r){e=r.name||e;var i=n.AttachmentType[r.type||"region"];if(i==n.AttachmentType.region){var o=new n.RegionAttachment;return o.x=(r.x||0)*this.scale,o.y=(r.y||0)*this.scale,o.scaleX=r.scaleX||1,o.scaleY=r.scaleY||1,o.rotation=r.rotation||0,o.width=(r.width||32)*this.scale,o.height=(r.height||32)*this.scale,o.updateOffset(),o.rendererObject={},o.rendererObject.name=e,o.rendererObject.scale={},o.rendererObject.scale.x=o.scaleX,o.rendererObject.scale.y=o.scaleY,o.rendererObject.rotation=-o.rotation*Math.PI/180,o}throw"Unknown attachment type: "+i},readAnimation:function(t,e,r){var i,o,a,s,u,h,l,f=[],c=0,d=e.bones;for(var p in d)if(d.hasOwnProperty(p)){var v=r.findBoneIndex(p);if(-1==v)throw"Bone not found: "+p;var g=d[p];for(a in g)if(g.hasOwnProperty(a))if(u=g[a],"rotate"==a){for((o=new n.RotateTimeline(u.length)).boneIndex=v,i=0,h=0,l=u.length;l>h;h++)s=u[h],o.setFrame(i,s.time,s.angle),n.SkeletonJson.readCurve(o,i,s),i++;f.push(o),c=Math.max(c,o.frames[2*o.getFrameCount()-2])}else{if("translate"!=a&&"scale"!=a)throw"Invalid timeline type for a bone: "+a+" ("+p+")";var m=1;for("scale"==a?o=new n.ScaleTimeline(u.length):(o=new n.TranslateTimeline(u.length),m=this.scale),o.boneIndex=v,i=0,h=0,l=u.length;l>h;h++){var _=((s=u[h]).x||0)*m,x=(s.y||0)*m;o.setFrame(i,s.time,_,x),n.SkeletonJson.readCurve(o,i,s),i++}f.push(o),c=Math.max(c,o.frames[3*o.getFrameCount()-3])}}var y=e.slots;for(var b in y)if(y.hasOwnProperty(b)){var T=y[b],w=r.findSlotIndex(b);for(a in T)if(T.hasOwnProperty(a))if(u=T[a],"color"==a){for((o=new n.ColorTimeline(u.length)).slotIndex=w,i=0,h=0,l=u.length;l>h;h++){var A=(s=u[h]).color,E=n.SkeletonJson.toColor(A,0),C=n.SkeletonJson.toColor(A,1),S=n.SkeletonJson.toColor(A,2),R=n.SkeletonJson.toColor(A,3);o.setFrame(i,s.time,E,C,S,R),n.SkeletonJson.readCurve(o,i,s),i++}f.push(o),c=Math.max(c,o.frames[5*o.getFrameCount()-5])}else{if("attachment"!=a)throw"Invalid timeline type for a slot: "+a+" ("+b+")";for((o=new n.AttachmentTimeline(u.length)).slotIndex=w,i=0,h=0,l=u.length;l>h;h++)s=u[h],o.setFrame(i++,s.time,s.name);f.push(o),c=Math.max(c,o.frames[o.getFrameCount()-1])}}r.animations.push(new n.Animation(t,f,c))}},n.SkeletonJson.readCurve=function(t,e,r){var n=r.curve;n&&("stepped"==n?t.curves.setStepped(e):n instanceof Array&&t.curves.setCurve(e,n[0],n[1],n[2],n[3]))},n.SkeletonJson.toColor=function(t,e){if(8!=t.length)throw"Color hexidecimal length must be 8, recieved: "+t;return parseInt(t.substring(2*e,2),16)/255},n.Atlas=function(t,e){this.textureLoader=e,this.pages=[],this.regions=[];var r=new n.AtlasReader(t),i=[];i.length=4;for(var o=null;;){var a=r.readLine();if(null==a)break;if((a=r.trim(a)).length)if(o){var s=new n.AtlasRegion;s.name=a,s.page=o,s.rotate="true"==r.readValue(),r.readTuple(i);var u=parseInt(i[0],10),h=parseInt(i[1],10);r.readTuple(i);var l=parseInt(i[0],10),f=parseInt(i[1],10);s.u=u/o.width,s.v=h/o.height,s.rotate?(s.u2=(u+f)/o.width,s.v2=(h+l)/o.height):(s.u2=(u+l)/o.width,s.v2=(h+f)/o.height),s.x=u,s.y=h,s.width=Math.abs(l),s.height=Math.abs(f),4==r.readTuple(i)&&(s.splits=[parseInt(i[0],10),parseInt(i[1],10),parseInt(i[2],10),parseInt(i[3],10)],4==r.readTuple(i)&&(s.pads=[parseInt(i[0],10),parseInt(i[1],10),parseInt(i[2],10),parseInt(i[3],10)],r.readTuple(i))),s.originalWidth=parseInt(i[0],10),s.originalHeight=parseInt(i[1],10),r.readTuple(i),s.offsetX=parseInt(i[0],10),s.offsetY=parseInt(i[1],10),s.index=parseInt(r.readValue(),10),this.regions.push(s)}else{(o=new n.AtlasPage).name=a,o.format=n.Atlas.Format[r.readValue()],r.readTuple(i),o.minFilter=n.Atlas.TextureFilter[i[0]],o.magFilter=n.Atlas.TextureFilter[i[1]];var c=r.readValue();o.uWrap=n.Atlas.TextureWrap.clampToEdge,o.vWrap=n.Atlas.TextureWrap.clampToEdge,"x"==c?o.uWrap=n.Atlas.TextureWrap.repeat:"y"==c?o.vWrap=n.Atlas.TextureWrap.repeat:"xy"==c&&(o.uWrap=o.vWrap=n.Atlas.TextureWrap.repeat),e.load(o,a),this.pages.push(o)}else o=null}},n.Atlas.prototype={findRegion:function(t){for(var e=this.regions,r=0,n=e.length;n>r;r++)if(e[r].name==t)return e[r];return null},dispose:function(){for(var t=this.pages,e=0,r=t.length;r>e;e++)this.textureLoader.unload(t[e].rendererObject)},updateUVs:function(t){for(var e=this.regions,r=0,n=e.length;n>r;r++){var i=e[r];i.page==t&&(i.u=i.x/t.width,i.v=i.y/t.height,i.rotate?(i.u2=(i.x+i.height)/t.width,i.v2=(i.y+i.width)/t.height):(i.u2=(i.x+i.width)/t.width,i.v2=(i.y+i.height)/t.height))}}},n.Atlas.Format={alpha:0,intensity:1,luminanceAlpha:2,rgb565:3,rgba4444:4,rgb888:5,rgba8888:6},n.Atlas.TextureFilter={nearest:0,linear:1,mipMap:2,mipMapNearestNearest:3,mipMapLinearNearest:4,mipMapNearestLinear:5,mipMapLinearLinear:6},n.Atlas.TextureWrap={mirroredRepeat:0,clampToEdge:1,repeat:2},n.AtlasPage=function(){},n.AtlasPage.prototype={name:null,format:null,minFilter:null,magFilter:null,uWrap:null,vWrap:null,rendererObject:null,width:0,height:0},n.AtlasRegion=function(){},n.AtlasRegion.prototype={page:null,name:null,x:0,y:0,width:0,height:0,u:0,v:0,u2:0,v2:0,offsetX:0,offsetY:0,originalWidth:0,originalHeight:0,index:0,rotate:!1,splits:null,pads:null},n.AtlasReader=function(t){this.lines=t.split(/\r\n|\r|\n/)},n.AtlasReader.prototype={index:0,trim:function(t){return t.replace(/^\s+|\s+$/g,"")},readLine:function(){return this.index>=this.lines.length?null:this.lines[this.index++]},readValue:function(){var t=this.readLine(),e=t.indexOf(":");if(-1==e)throw"Invalid line: "+t;return this.trim(t.substring(e+1))},readTuple:function(t){var e=this.readLine(),r=e.indexOf(":");if(-1==r)throw"Invalid line: "+e;for(var n=0,i=r+1;3>n;n++){var o=e.indexOf(",",i);if(-1==o){if(!n)throw"Invalid line: "+e;break}t[n]=this.trim(e.substr(i,o-i)),i=o+1}return t[n]=this.trim(e.substring(i)),n+1}},n.AtlasAttachmentLoader=function(t){this.atlas=t},n.AtlasAttachmentLoader.prototype={newAttachment:function(t,e,r){switch(e){case n.AttachmentType.region:var i=this.atlas.findRegion(r);if(!i)throw"Region not found in atlas: "+r+" ("+e+")";var o=new n.RegionAttachment(r);return o.rendererObject=i,o.setUVs(i.u,i.v,i.u2,i.v2,i.rotate),o.regionOffsetX=i.offsetX,o.regionOffsetY=i.offsetY,o.regionWidth=i.width,o.regionHeight=i.height,o.regionOriginalWidth=i.originalWidth,o.regionOriginalHeight=i.originalHeight,o}throw"Unknown attachment type: "+e}},n.Bone.yDown=!0},function(t,e,r){"use strict";function n(t,e){a.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.loaded=!1}var i=r(13),o=r(17),a=r(5),s=r(4),u=r(25),h=r(26).SkeletonJson,l=r(2),f=n.prototype;f.handleEvent=function(t){switch(t.type){case"load":this.onJSONLoaded();break;default:this.onError()}},f.load=function(){this.request=l.createRequest(),this.request.addEventListener("load",this),this.request.addEventListener("error",this),this.request.open("GET",this.url,!0),this.request.overrideMimeType&&this.request.overrideMimeType("application/json"),this.request.send(null)},f.onJSONLoaded=function(){if(this.json=JSON.parse(this.request.responseText),this.json.frames){var t=this,e=this.baseUrl+this.json.meta.image,r=new o(e,this.crossorigin),n=this.json.frames;for(var i in this.texture=r.texture.baseTexture,r.addEventListener("loaded",function(){t.onLoaded()}),n){var a=n[i].frame;a&&(s.cache[i]=new s(this.texture,{x:a.x,y:a.y,width:a.w,height:a.h}),n[i].trimmed&&(s.cache[i].realSize=n[i].spriteSourceSize,s.cache[i].trim.x=0))}r.load()}else if(this.json.bones){var l=(new h).readSkeletonData(this.json);u.animCache[this.url]=l,this.onLoaded()}else this.onLoaded()},f.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:"loaded",content:this})},f.onError=function(){this.dispatchEvent({type:"error",content:this})},i.registerLoaderType("json",n),t.exports=n},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";function n(){this.program=null,this.fragmentSrc=["precision lowp float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;","}"],this.textureCount=0}var i=r(18),o=r(0),a=n.prototype;a.init=function(){var t=o.gl,e=i.program(t,this.vertexSrc||n.defaultVertexSrc,this.fragmentSrc);for(var r in t.useProgram(e),this.uSampler=t.getUniformLocation(e,"uSampler"),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.dimensions=t.getUniformLocation(e,"dimensions"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.colorAttribute=t.getAttribLocation(e,"aColor"),this.aTextureCoord=t.getAttribLocation(e,"aTextureCoord"),this.uniforms)this.uniforms[r].uniformLocation=t.getUniformLocation(e,r);this.initUniforms(),this.program=e},a.initUniforms=function(){var t;for(var e in this.textureCount=1,this.uniforms){var r=(t=this.uniforms[e]).type;"sampler2D"===r?(t._init=!1,null!==t.value&&this.initSampler2D(t)):"mat2"===r||"mat3"===r||"mat4"===r?(t.glMatrix=!0,t.glValueLength=1,"mat2"===r?t.glFunc=o.gl.uniformMatrix2fv:"mat3"===r?t.glFunc=o.gl.uniformMatrix3fv:"mat4"===r&&(t.glFunc=o.gl.uniformMatrix4fv)):(t.glFunc=o.gl["uniform"+r],t.glValueLength="2f"===r||"2i"===r?2:"3f"===r||"3i"===r?3:"4f"===r||"4i"===r?4:1)}},a.initSampler2D=function(t){if(t.value&&t.value.baseTexture&&t.value.baseTexture.hasLoaded){if(o.gl.activeTexture(o.gl["TEXTURE"+this.textureCount]),o.gl.bindTexture(o.gl.TEXTURE_2D,t.value.baseTexture._glTexture),t.textureData){var e=t.textureData,r=e.magFilter?e.magFilter:o.gl.LINEAR,n=e.minFilter?e.minFilter:o.gl.LINEAR,i=e.wrapS?e.wrapS:o.gl.CLAMP_TO_EDGE,a=e.wrapT?e.wrapT:o.gl.CLAMP_TO_EDGE,s=e.luminance?o.gl.LUMINANCE:o.gl.RGBA;if(e.repeat&&(i=o.gl.REPEAT,a=o.gl.REPEAT),o.gl.pixelStorei(o.gl.UNPACK_FLIP_Y_WEBGL,!1),e.width){var u=e.width?e.width:512,h=e.height?e.height:2,l=e.border?e.border:0;o.gl.texImage2D(o.gl.TEXTURE_2D,0,s,u,h,l,s,o.gl.UNSIGNED_BYTE,null)}else o.gl.texImage2D(o.gl.TEXTURE_2D,0,s,o.gl.RGBA,o.gl.UNSIGNED_BYTE,t.value.baseTexture.source);o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MAG_FILTER,r),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MIN_FILTER,n),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_WRAP_S,i),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_WRAP_T,a)}o.gl.uniform1i(t.uniformLocation,this.textureCount),t._init=!0,this.textureCount++}},a.syncUniforms=function(){var t;for(var e in this.textureCount=1,this.uniforms)1===(t=this.uniforms[e]).glValueLength?!0===t.glMatrix?t.glFunc.call(o.gl,t.uniformLocation,t.transpose,t.value):t.glFunc.call(o.gl,t.uniformLocation,t.value):2===t.glValueLength?t.glFunc.call(o.gl,t.uniformLocation,t.value.x,t.value.y):3===t.glValueLength?t.glFunc.call(o.gl,t.uniformLocation,t.value.x,t.value.y,t.value.z):4===t.glValueLength?t.glFunc.call(o.gl,t.uniformLocation,t.value.x,t.value.y,t.value.z,t.value.w):"sampler2D"===t.type&&(t._init?(o.gl.activeTexture(o.gl["TEXTURE"+this.textureCount]),o.gl.bindTexture(o.gl.TEXTURE_2D,t.value.baseTexture._glTexture),o.gl.uniform1i(t.uniformLocation,this.textureCount),this.textureCount++):this.initSampler2D(t))},n.defaultVertexSrc=["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","varying float vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"],t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","   vec4 sum = vec4(0.0);","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blur, vTextureCoord.y)) * 0.05;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blur, vTextureCoord.y)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blur, vTextureCoord.y)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - blur, vTextureCoord.y)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + blur, vTextureCoord.y)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blur, vTextureCoord.y)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blur, vTextureCoord.y)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blur, vTextureCoord.y)) * 0.05;","   gl_FragColor = sum;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.dirty=!0,this.uniforms.blur.value=1/7e3*t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","   vec4 sum = vec4(0.0);","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blur)) * 0.05;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blur)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blur)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blur)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blur)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blur)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blur)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blur)) * 0.05;","   gl_FragColor = sum;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),t.exports=n},function(t,e,r){"use strict";function n(t,e){i.call(this),this.setText(t),this.setStyle(e),this.updateText(),this.dirty=!1}var i=r(6),o=r(7),a=r(3),s=n.prototype=Object.create(i.prototype,{constructor:{value:n}});s.setText=function(t){this.text=t||" ",this.dirty=!0},s.setStyle=function(t){(t=t||{}).align=t.align||"left",this.style=t;var e=t.font.split(" ");this.fontName=e[e.length-1],this.fontSize=e.length>=2?parseInt(e[e.length-2],10):n.fonts[this.fontName].size,this.dirty=!0},s.updateText=function(){for(var t=n.fonts[this.fontName],e=new a,r=null,i=[],s=0,u=[],h=0,l=this.fontSize/t.size,f=0;f<this.text.length;f++){var c=this.text.charCodeAt(f);if(/(?:\r\n|\r|\n)/.test(this.text.charAt(f)))u.push(e.x),s=Math.max(s,e.x),h++,e.x=0,e.y+=t.lineHeight,r=null;else{var d=t.chars[c];d&&(r&&d[r]&&(e.x+=d.kerning[r]),i.push({texture:d.texture,line:h,charCode:c,position:new a(e.x+d.xOffset,e.y+d.yOffset)}),e.x+=d.xAdvance,r=c)}}u.push(e.x),s=Math.max(s,e.x);var p=[];for(f=0;h>=f;f++){var v=0;"right"===this.style.align?v=s-u[f]:"center"===this.style.align&&(v=(s-u[f])/2),p.push(v)}for(f=0;f<i.length;f++){var g=new o(i[f].texture);g.position.x=(i[f].position.x+p[i[f].line])*l,g.position.y=i[f].position.y*l,g.scale.x=g.scale.y=l,this.addChild(g)}this.width=s*l,this.height=(e.y+t.lineHeight)*l},s.updateTransform=function(){if(this.dirty){for(;this.children.length>0;)this.removeChild(this.getChildAt(0));this.updateText(),this.dirty=!1}i.prototype.updateTransform.call(this)},n.fonts={},t.exports=n},function(t,e,r){"use strict";function n(){this.global=new a,this.local=new a,this.target=null,this.originalEvent=null}function i(t){this.stage=t,this.mouse=new n,this.touchs={},this.tempPoint=new a,this.mouseoverEnabled=!0,this.pool=[],this.interactiveItems=[],this.interactionDOMElement=null,this.last=0}var o=r(0),a=r(3),s=r(7),u=r(2);n.prototype.getLocalPosition=function(t){var e=t.worldTransform,r=this.global,n=e[0],i=e[1],o=e[2],s=e[3],u=e[4],h=e[5],l=1/(n*u+i*-s);return new a(u*l*r.x+-i*l*r.y+(h*i-o*u)*l,n*l*r.y+-s*l*r.x+(-h*n+o*s)*l)};var h=i.prototype;h.handleEvent=function(t){switch(t.type){case"mousedown":this.onMouseDown(t);break;case"mousemove":this.onMouseMove(t);break;case"mouseup":this.onMouseUp(t);break;case"mouseout":this.onMouseOut(t);break;case"touchstart":this.onTouchStart(t);break;case"touchmove":this.onTouchMove(t);break;case"touchend":this.onTouchEnd(t)}},h.collectInteractiveSprite=function(t,e){for(var r=t.children,n=r.length-1;n>=0;n--){var i=r[n];i.interactive?(e.interactiveChildren=!0,this.interactiveItems.push(i),i.children.length>0&&this.collectInteractiveSprite(i,i)):(i.__iParent=null,i.children.length>0&&this.collectInteractiveSprite(i,e))}},h.setTarget=function(t){t?null===this.interactionDOMElement&&this.setTargetDomElement(t.view):null!==this.target&&u.window.removeEventListener("mouseup",this,!0),u.window.addEventListener("mouseup",this,!0),this.target=t},h.setTargetDomElement=function(t){null!==this.interactionDOMElement&&(this.interactionDOMElement.style["-ms-content-zooming"]="",this.interactionDOMElement.style["-ms-touch-action"]="",this.interactionDOMElement.removeEventListener("mousemove",this,!0),this.interactionDOMElement.removeEventListener("mousedown",this,!0),this.interactionDOMElement.removeEventListener("mouseout",this,!0),this.interactionDOMElement.removeEventListener("touchstart",this,!0),this.interactionDOMElement.removeEventListener("touchend",this,!0),this.interactionDOMElement.removeEventListener("touchmove",this,!0));var e=u.navigator;e&&e.msPointerEnabled&&(t.style["-ms-content-zooming"]="none",t.style["-ms-touch-action"]="none"),t.addEventListener("mousemove",this,!0),t.addEventListener("mousedown",this,!0),t.addEventListener("mouseout",this,!0),t.addEventListener("touchstart",this,!0),t.addEventListener("touchend",this,!0),t.addEventListener("touchmove",this,!0),this.interactionDOMElement=t},h.update=function(){if(this.target){var t=Date.now(),e=t-this.last;if(!(1>(e=30*e/1e3))){var r,n;if(this.last=t,this.dirty){for(this.dirty=!1,r=0,n=this.interactiveItems.length;n>r;r++)this.interactiveItems[r].interactiveChildren=!1;this.interactiveItems=[],this.stage.interactive&&this.interactiveItems.push(this.stage),this.collectInteractiveSprite(this.stage,this.stage)}for(this.interactionDOMElement.style.cursor="inherit",r=0,n=this.interactiveItems.length;n>r;r++){var i=this.interactiveItems[r];(i.mouseover||i.mouseout||i.buttonMode)&&(i.__hit=this.hitTest(i,this.mouse),this.mouse.target=i,i.__hit?(i.buttonMode&&(this.interactionDOMElement.style.cursor=i.defaultCursor),i.__isOver||(i.mouseover&&i.mouseover(this.mouse),i.__isOver=!0)):i.__isOver&&(i.mouseout&&i.mouseout(this.mouse),i.__isOver=!1))}}}},h.onMouseMove=function(t){this.mouse.originalEvent=t;var e=this.interactionDOMElement.getBoundingClientRect();this.mouse.global.x=(t.clientX-e.left)*(this.target.width/e.width),this.mouse.global.y=(t.clientY-e.top)*(this.target.height/e.height);for(var r=0,n=this.interactiveItems.length;n>r;r++){var i=this.interactiveItems[r];i.mousemove&&i.mousemove(this.mouse)}},h.onMouseDown=function(t){this.mouse.originalEvent=t;for(var e=0,r=this.interactiveItems.length;r>e;e++){var n=this.interactiveItems[e];if((n.mousedown||n.click)&&(n.__mouseIsDown=!0,n.__hit=this.hitTest(n,this.mouse),n.__hit&&(n.mousedown&&n.mousedown(this.mouse),n.__isDown=!0,!n.interactiveChildren)))break}},h.onMouseOut=function(){this.interactionDOMElement.style.cursor="inherit";for(var t=0,e=this.interactiveItems.length;e>t;t++){var r=this.interactiveItems[t];r.__isOver&&(this.mouse.target=r,r.mouseout&&r.mouseout(this.mouse),r.__isOver=!1)}},h.onMouseUp=function(t){this.mouse.originalEvent=t;for(var e=!1,r=0,n=this.interactiveItems.length;n>r;r++){var i=this.interactiveItems[r];(i.mouseup||i.mouseupoutside||i.click)&&(i.__hit=this.hitTest(i,this.mouse),i.__hit&&!e?(i.mouseup&&i.mouseup(this.mouse),i.__isDown&&i.click&&i.click(this.mouse),i.interactiveChildren||(e=!0)):i.__isDown&&i.mouseupoutside&&i.mouseupoutside(this.mouse),i.__isDown=!1)}},h.hitTest=function(t,e){var r=e.global;if(t.vcount!==o.visibleCount)return!1;var n=t instanceof s,i=t.worldTransform,a=i[0],u=i[1],h=i[2],l=i[3],f=i[4],c=i[5],d=1/(a*f+u*-l),p=f*d*r.x+-u*d*r.y+(c*u-h*f)*d,v=a*d*r.y+-l*d*r.x+(-c*a+h*l)*d;if(e.target=t,t.hitArea&&t.hitArea.contains)return!!t.hitArea.contains(p,v)&&(e.target=t,!0);if(n){var g,m=t.texture.frame.width,_=t.texture.frame.height,x=-m*t.anchor.x;if(p>x&&x+m>p&&(v>(g=-_*t.anchor.y)&&g+_>v))return e.target=t,!0}for(var y=0,b=t.children.length;b>y;y++){var T=t.children[y];if(this.hitTest(T,e))return e.target=t,!0}return!1},h.onTouchMove=function(t){var e,r,n,i,o,a,s,u=this.interactionDOMElement.getBoundingClientRect(),h=t.changedTouches;for(e=0,r=h.length;r>e;e++)for(n=h[e],(i=this.touchs[n.identifier]).originalEvent=t,i.global.x=(n.clientX-u.left)*(this.target.width/u.width),i.global.y=(n.clientY-u.top)*(this.target.height/u.height),o=0,a=this.interactiveItems.length;a>o;o++)(s=this.interactiveItems[e]).touchmove&&s.touchmove(i)},h.onTouchStart=function(t){for(var e=this.interactionDOMElement.getBoundingClientRect(),r=t.changedTouches,i=0,o=r.length;o>i;i++){var a=r[i],s=this.pool.pop();s||(s=new n),s.originalEvent=t,this.touchs[a.identifier]=s,s.global.x=(a.clientX-e.left)*(this.target.width/e.width),s.global.y=(a.clientY-e.top)*(this.target.height/e.height);for(var u=0,h=this.interactiveItems.length;h>u;u++){var l=this.interactiveItems[u];if((l.touchstart||l.tap)&&(l.__hit=this.hitTest(l,s),l.__hit&&(l.touchstart&&l.touchstart(s),l.__isDown=!0,l.__touchData=s,!l.interactiveChildren)))break}}},h.onTouchEnd=function(t){for(var e=this.interactionDOMElement.getBoundingClientRect(),r=t.changedTouches,n=0,i=r.length;i>n;n++){var o=r[n],a=this.touchs[o.identifier],s=!1;a.global.x=(o.clientX-e.left)*(this.target.width/e.width),a.global.y=(o.clientY-e.top)*(this.target.height/e.height);for(var u=0,h=this.interactiveItems.length;h>u;u++){var l=this.interactiveItems[u],f=l.__touchData;l.__hit=this.hitTest(l,a),f===a&&(a.originalEvent=t,(l.touchend||l.tap)&&(l.__hit&&!s?(l.touchend&&l.touchend(a),l.__isDown&&l.tap&&l.tap(a),l.interactiveChildren||(s=!0)):l.__isDown&&l.touchendoutside&&l.touchendoutside(a),l.__isDown=!1),l.__touchData=null)}this.pool.push(a),this.touchs[o.identifier]=null}},t.exports=i},function(t,e,r){"use strict";e.hex2rgb=function(t){return[(t>>16&255)/255,(t>>8&255)/255,(255&t)/255]}},function(t,e,r){"use strict";var n=r(2),i=r(10);e.renderGraphics=function(t,e){for(var r,n,o,a,s=t.worldAlpha,u=0,h=t.graphicsData.length;h>u;u++)if(n=(r=t.graphicsData[u]).points,e.strokeStyle="#"+("00000"+(0|r.lineColor).toString(16)).substr(-6),e.lineWidth=r.lineWidth,r.type===i.POLY){for(e.beginPath(),e.moveTo(n[0],n[1]),o=1,a=n.length/2;a>o;o++)e.lineTo(n[2*o],n[2*o+1]);n[0]===n[n.length-2]&&n[1]===n[n.length-1]&&e.closePath(),r.fill&&(e.globalAlpha=r.fillAlpha*s,e.fillStyle="#"+("00000"+(0|r.fillColor).toString(16)).substr(-6),e.fill()),r.lineWidth&&(e.globalAlpha=r.lineAlpha*s,e.stroke())}else if(r.type===i.RECT)(r.fillColor||0===r.fillColor)&&(e.globalAlpha=r.fillAlpha*s,e.fillStyle="#"+("00000"+(0|r.fillColor).toString(16)).substr(-6),e.fillRect(n[0],n[1],n[2],n[3])),r.lineWidth&&(e.globalAlpha=r.lineAlpha*s,e.strokeRect(n[0],n[1],n[2],n[3]));else if(r.type===i.CIRC)e.beginPath(),e.arc(n[0],n[1],n[2],0,2*Math.PI),e.closePath(),r.fill&&(e.globalAlpha=r.fillAlpha*s,e.fillStyle="#"+("00000"+(0|r.fillColor).toString(16)).substr(-6),e.fill()),r.lineWidth&&(e.globalAlpha=r.lineAlpha*s,e.stroke());else if(r.type===i.ELIP){var l=r.points,f=2*l[2],c=2*l[3],d=l[0]-f/2,p=l[1]-c/2;e.beginPath();var v=.5522848,g=f/2*v,m=c/2*v,_=d+f,x=p+c,y=d+f/2,b=p+c/2;e.moveTo(d,b),e.bezierCurveTo(d,b-m,y-g,p,y,p),e.bezierCurveTo(y+g,p,_,b-m,_,b),e.bezierCurveTo(_,b+m,y+g,x,y,x),e.bezierCurveTo(y-g,x,d,b+m,d,b),e.closePath(),r.fill&&(e.globalAlpha=r.fillAlpha*s,e.fillStyle="#"+("00000"+(0|r.fillColor).toString(16)).substr(-6),e.fill()),r.lineWidth&&(e.globalAlpha=r.lineAlpha*s,e.stroke())}},e.renderGraphicsMask=function(t,e){var r=t.graphicsData.length;if(0!==r){r>1&&(r=1,n.console.warn("Pixi.js warning: masks in canvas can only mask using the first path in the graphics object"));for(var o=0;1>o;o++){var a=t.graphicsData[o],s=a.points;if(a.type===i.POLY){e.beginPath(),e.moveTo(s[0],s[1]);for(var u=1;u<s.length/2;u++)e.lineTo(s[2*u],s[2*u+1]);s[0]===s[s.length-2]&&s[1]===s[s.length-1]&&e.closePath()}else if(a.type===i.RECT)e.beginPath(),e.rect(s[0],s[1],s[2],s[3]),e.closePath();else if(a.type===i.CIRC)e.beginPath(),e.arc(s[0],s[1],s[2],0,2*Math.PI),e.closePath();else if(a.type===i.ELIP){var h=a.points,l=2*h[2],f=2*h[3],c=h[0]-l/2,d=h[1]-f/2;e.beginPath();var p=.5522848,v=l/2*p,g=f/2*p,m=c+l,_=d+f,x=c+l/2,y=d+f/2;e.moveTo(c,y),e.bezierCurveTo(c,y-g,x-v,d,x,d),e.bezierCurveTo(x+v,d,m,y-g,m,y),e.bezierCurveTo(m,y+g,x+v,_,x,_),e.bezierCurveTo(x-v,_,c,y+g,c,y),e.closePath()}}}}},function(t,e,r){"use strict";function n(t,e,r,n,l){var f;this.transparent=!!n,this.width=t||800,this.height=e||600,this.view=r||i.createCanvas(),this.view.width=this.width,this.view.height=this.height;var c=this;this.view.addEventListener("webglcontextlost",function(t){c.handleContextLost(t)},!1),this.view.addEventListener("webglcontextrestored",function(t){c.handleContextRestored(t)},!1),this.batchs=[];var d={alpha:this.transparent,antialias:!!l,premultipliedAlpha:!1,stencil:!0};try{f=this.view.getContext("experimental-webgl",d)}catch(t){try{f=this.view.getContext("webgl",d)}catch(t){throw new Error(" This browser does not support webGL. Try using the canvas renderer"+this)}}this.gl=o.gl=f,a.initDefaultShaders(),f.useProgram(o.defaultShader.program),this.batch=new s(f),f.disable(f.DEPTH_TEST),f.disable(f.CULL_FACE),f.enable(f.BLEND),f.colorMask(!0,!0,!0,this.transparent),this.projection=o.projection=new h(400,300),this.offset=o.offset=new h(0,0),this.resize(this.width,this.height),this.contextLost=!1,this.stageRenderGroup=new u(this.gl,this.transparent)}var i=r(2),o=r(0),a=r(14),s=r(23),u=r(24),h=r(3),l=r(4),f=n.prototype;f.render=function(t){if(!this.contextLost){this.__stage!==t&&(this.__stage=t,this.stageRenderGroup.setRenderable(t));var e=this.gl;if(u.updateTextures(e),o.visibleCount++,t.updateTransform(),e.colorMask(!0,!0,!0,this.transparent),e.viewport(0,0,this.width,this.height),e.bindFramebuffer(e.FRAMEBUFFER,null),e.clearColor(t.backgroundColorSplit[0],t.backgroundColorSplit[1],t.backgroundColorSplit[2],!this.transparent),e.clear(e.COLOR_BUFFER_BIT),this.stageRenderGroup.backgroundColor=t.backgroundColorSplit,this.projection.x=this.width/2,this.projection.y=-this.height/2,this.stageRenderGroup.render(this.projection),t.interactive&&(t._interactiveEventsAdded||(t._interactiveEventsAdded=!0,t.interactionManager.setTarget(this))),l.frameUpdates.length>0){for(var r=0,n=l.frameUpdates.length;n>r;r++)l.frameUpdates[r].updateFrame=!1;l.frameUpdates=[]}}},f.resize=function(t,e){this.width=t,this.height=e,this.view.width=t,this.view.height=e,this.gl.viewport(0,0,this.width,this.height),this.projection.x=this.width/2,this.projection.y=-this.height/2},f.handleContextLost=function(t){t.preventDefault(),this.contextLost=!0},f.handleContextRestored=function(){var t=this.gl=this.view.getContext("experimental-webgl",{alpha:!0});for(var e in this.initShaders(),l.cache){var r=l.cache[e].baseTexture;r._glTexture=null,u.updateTexture(t,r)}for(var n=0,i=this.batchs.length;i>n;n++)this.batchs[n].restoreLostContext(t),this.batchs[n].dirty=!0;s.restoreBatches(t),this.contextLost=!1},t.exports=n},function(t,e,r){"use strict";var n=r(14),i=r(0),o=r(9).mat3,a=r(34).hex2rgb,s=r(38).triangulate,u=r(3),h=r(10);e.renderGraphics=function(t,r){var a=i.gl;t._webGL||(t._webGL={points:[],indices:[],lastIndex:0,buffer:a.createBuffer(),indexBuffer:a.createBuffer()}),t.dirty&&(t.dirty=!1,t.clearDirty&&(t.clearDirty=!1,t._webGL.lastIndex=0,t._webGL.points=[],t._webGL.indices=[]),e.updateGraphics(t)),n.activatePrimitiveShader();var s=o.clone(t.worldTransform);o.transpose(s),a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.uniformMatrix3fv(i.primitiveShader.translationMatrix,!1,s),a.uniform2f(i.primitiveShader.projectionVector,r.x,-r.y),a.uniform2f(i.primitiveShader.offsetVector,-i.offset.x,-i.offset.y),a.uniform1f(i.primitiveShader.alpha,t.worldAlpha),a.bindBuffer(a.ARRAY_BUFFER,t._webGL.buffer),a.vertexAttribPointer(i.primitiveShader.aVertexPosition,2,a.FLOAT,!1,24,0),a.vertexAttribPointer(i.primitiveShader.colorAttribute,4,a.FLOAT,!1,24,8),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,t._webGL.indexBuffer),a.drawElements(a.TRIANGLE_STRIP,t._webGL.indices.length,a.UNSIGNED_SHORT,0),n.deactivatePrimitiveShader()},e.updateGraphics=function(t){for(var r=t._webGL.lastIndex;r<t.graphicsData.length;r++){var n=t.graphicsData[r];n.type===h.POLY?(n.fill&&n.points.length>3&&e.buildPoly(n,t._webGL),n.lineWidth>0&&e.buildLine(n,t._webGL)):n.type===h.RECT?e.buildRectangle(n,t._webGL):n.type===h.CIRC||(n.type,h.ELIP),e.buildCircle(n,t._webGL)}t._webGL.lastIndex=t.graphicsData.length;var o=i.gl;t._webGL.glPoints=new Float32Array(t._webGL.points),o.bindBuffer(o.ARRAY_BUFFER,t._webGL.buffer),o.bufferData(o.ARRAY_BUFFER,t._webGL.glPoints,o.STATIC_DRAW),t._webGL.glIndicies=new Uint16Array(t._webGL.indices),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,t._webGL.indexBuffer),o.bufferData(o.ELEMENT_ARRAY_BUFFER,t._webGL.glIndicies,o.STATIC_DRAW)},e.buildRectangle=function(t,r){var n=t.points,i=n[0],o=n[1],s=n[2],u=n[3];if(t.fill){var h=a(t.fillColor),l=t.fillAlpha,f=h[0]*l,c=h[1]*l,d=h[2]*l,p=r.points,v=r.indices,g=p.length/6;p.push(i,o),p.push(f,c,d,l),p.push(i+s,o),p.push(f,c,d,l),p.push(i,o+u),p.push(f,c,d,l),p.push(i+s,o+u),p.push(f,c,d,l),v.push(g,g,g+1,g+2,g+3,g+3)}t.lineWidth&&(t.points=[i,o,i+s,o,i+s,o+u,i,o+u,i,o],e.buildLine(t,r))},e.buildCircle=function(t,r){var n=t.points,i=n[0],o=n[1],s=n[2],u=n[3],h=2*Math.PI/40,l=0;if(t.fill){var f=a(t.fillColor),c=t.fillAlpha,d=f[0]*c,p=f[1]*c,v=f[2]*c,g=r.points,m=r.indices,_=g.length/6;for(m.push(_),l=0;41>l;l++)g.push(i,o,d,p,v,c),g.push(i+Math.sin(h*l)*s,o+Math.cos(h*l)*u,d,p,v,c),m.push(_++,_++);m.push(_-1)}if(t.lineWidth){for(t.points=[],l=0;41>l;l++)t.points.push(i+Math.sin(h*l)*s,o+Math.cos(h*l)*u);e.buildLine(t,r)}},e.buildLine=function(t,e){var r=0,n=t.points;if(0!==n.length){if(t.lineWidth%2)for(r=0;r<n.length;r++)n[r]+=.5;var i=new u(n[0],n[1]),o=new u(n[n.length-2],n[n.length-1]);if(i.x===o.x&&i.y===o.y){n.pop(),n.pop();var s=(o=new u(n[n.length-2],n[n.length-1])).x+.5*(i.x-o.x),h=o.y+.5*(i.y-o.y);n.unshift(s,h),n.push(s,h)}var l,f,c,d,p,v,g,m,_,x,y,b,T,w,A,E,C,S,R,F,L,D,B=e.points,P=e.indices,O=n.length/2,I=n.length,U=B.length/6,M=t.lineWidth/2,j=a(t.lineColor),k=t.lineAlpha,N=j[0]*k,W=j[1]*k,Y=j[2]*k;for(c=n[0],d=n[1],p=n[2],_=-(d-(v=n[3])),x=c-p,_/=D=Math.sqrt(_*_+x*x),x/=D,_*=M,x*=M,B.push(c-_,d-x,N,W,Y,k),B.push(c+_,d+x,N,W,Y,k),r=1;O-1>r;r++)c=n[2*(r-1)],d=n[2*(r-1)+1],p=n[2*r],v=n[2*r+1],g=n[2*(r+1)],m=n[2*(r+1)+1],_=-(d-v),x=c-p,_/=D=Math.sqrt(_*_+x*x),x/=D,_*=M,x*=M,y=-(v-m),b=p-g,y/=D=Math.sqrt(y*y+b*b),b/=D,C=(-_+c)*(-x+v)-(-_+p)*(-x+d),F=(-(y*=M)+g)*(-(b*=M)+v)-(-y+p)*(-b+m),L=(A=-x+d-(-x+v))*(R=-y+p-(-y+g))-(S=-b+m-(-b+v))*(E=-_+p-(-_+c)),Math.abs(L)<.1?(L+=10.1,B.push(p-_,v-x,N,W,Y,k),B.push(p+_,v+x,N,W,Y,k)):((l=(E*F-R*C)/L)-p)*(l-p)+((f=(S*C-A*F)/L)-v)+(f-v)>19600?(T=_-y,w=x-b,T/=D=Math.sqrt(T*T+w*w),w/=D,T*=M,w*=M,B.push(p-T,v-w),B.push(N,W,Y,k),B.push(p+T,v+w),B.push(N,W,Y,k),B.push(p-T,v-w),B.push(N,W,Y,k),I++):(B.push(l,f),B.push(N,W,Y,k),B.push(p-(l-p),v-(f-v)),B.push(N,W,Y,k));for(c=n[2*(O-2)],d=n[2*(O-2)+1],p=n[2*(O-1)],_=-(d-(v=n[2*(O-1)+1])),x=c-p,_/=D=Math.sqrt(_*_+x*x),x/=D,_*=M,x*=M,B.push(p-_,v-x),B.push(N,W,Y,k),B.push(p+_,v+x),B.push(N,W,Y,k),P.push(U),r=0;I>r;r++)P.push(U++);P.push(U-1)}},e.buildPoly=function(t,e){var r=t.points;if(!(r.length<6)){var n=e.points,i=e.indices,o=r.length/2,u=a(t.fillColor),h=t.fillAlpha,l=u[0]*h,f=u[1]*h,c=u[2]*h,d=s(r),p=n.length/6,v=0;for(v=0;v<d.length;v+=3)i.push(d[v]+p),i.push(d[v]+p),i.push(d[v+1]+p),i.push(d[v+2]+p),i.push(d[v+2]+p);for(v=0;o>v;v++)n.push(r[2*v],r[2*v+1],l,f,c,h)}}},function(t,e,r){"use strict";function n(t,e,r,n,i,o,a,s){var u=a-r,h=s-n,l=i-r,f=o-n,c=t-r,d=e-n,p=u*u+h*h,v=u*l+h*f,g=u*c+h*d,m=l*l+f*f,_=l*c+f*d,x=1/(p*m-v*v),y=(m*g-v*_)*x,b=(p*_-v*g)*x;return y>=0&&b>=0&&1>y+b}function i(t,e,r,n,i,o,a){return(e-n)*(i-r)+(r-t)*(o-n)>=0===a}var o=r(2);e.triangulate=function(t){var e=!0,r=t.length>>1;if(3>r)return[];for(var a=[],s=[],u=0;r>u;u++)s.push(u);u=0;for(var h=r;h>3;){var l=s[(u+0)%h],f=s[(u+1)%h],c=s[(u+2)%h],d=t[2*l],p=t[2*l+1],v=t[2*f],g=t[2*f+1],m=t[2*c],_=t[2*c+1],x=!1;if(i(d,p,v,g,m,_,e)){x=!0;for(var y=0;h>y;y++){var b=s[y];if(b!==l&&b!==f&&b!==c&&n(t[2*b],t[2*b+1],d,p,v,g,m,_)){x=!1;break}}}if(x)a.push(l,f,c),s.splice((u+1)%h,1),h--,u=0;else if(u++>3*h){if(!e)return o.console.warn("PIXI Warning: shape too complex to fill"),[];for(a=[],s=[],u=0;r>u;u++)s.push(u);u=0,h=r,e=!1}}return a.push(s[0],s[1],s[2]),a}},function(t,e,r){"use strict";var n=r(0),i=r(14),o=r(9),a=t.exports=Object.create(n);a.Point=r(3),a.Rectangle=r(8),a.Polygon=r(44),a.Circle=r(45),a.Ellipse=r(46),a.Matrix=o.Matrix,a.mat3=o.mat3,a.mat4=o.mat4,a.blendModes=r(11),a.DisplayObject=r(19),a.DisplayObjectContainer=r(6),a.Sprite=r(7),a.MovieClip=r(47),a.AbstractFilter=r(1),a.BlurFilter=r(48),a.BlurXFilter=r(30),a.BlurYFilter=r(31),a.ColorMatrixFilter=r(49),a.ColorStepFilter=r(50),a.CrossHatchFilter=r(51),a.DisplacementFilter=r(52),a.DotScreenFilter=r(53),a.FilterBlock=r(15),a.GrayFilter=r(54),a.InvertFilter=r(55),a.PixelateFilter=r(56),a.RGBSplitFilter=r(57),a.SepiaFilter=r(58),a.SmartBlurFilter=r(59),a.TwistFilter=r(60),a.Text=r(61),a.BitmapText=r(32),a.InteractionManager=r(33),a.Stage=r(62),a.EventTarget=r(5),a.autoDetectRenderer=r(63),a.PolyK=r(38),a.WebGLGraphics=r(37),a.WebGLRenderer=r(36),a.WebGLBatch=r(23),a.WebGLRenderGroup=r(24),a.CanvasRenderer=r(20),a.CanvasGraphics=r(35),a.Graphics=r(10),a.Strip=r(16),a.Rope=r(65),a.TilingSprite=r(21),a.Spine=r(25),a.CustomRenderable=r(22),a.BaseTexture=r(12),a.Texture=r(4),a.RenderTexture=r(66),a.AssetLoader=r(13),a.JsonLoader=r(27),a.SpriteSheetLoader=r(67),a.ImageLoader=r(17),a.BitmapFontLoader=r(68),a.SpineLoader=r(69),a.initDefaultShaders=i.initDefaultShaders,a.activatePrimitiveShader=i.activatePrimitiveShader,a.deactivatePrimitiveShader=i.deactivatePrimitiveShader,a.activateStripShader=i.activateStripShader,a.deactivateStripShader=i.deactivateStripShader;var s=r(70);a.runList=s.runList},function(t,e,r){(function(t,n){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",h="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",c=1,d=2,p=4,v=1,g=2,m=1,_=2,x=4,y=8,b=16,T=32,w=64,A=128,E=256,C=512,S=30,R="...",F=800,L=16,D=1,B=2,P=1/0,O=9007199254740991,I=1.7976931348623157e308,U=NaN,M=4294967295,j=M-1,k=M>>>1,N=[["ary",A],["bind",m],["bindKey",_],["curry",y],["curryRight",b],["flip",C],["partial",T],["partialRight",w],["rearg",E]],W="[object Arguments]",Y="[object Array]",G="[object AsyncFunction]",X="[object Boolean]",z="[object Date]",V="[object DOMException]",q="[object Error]",H="[object Function]",$="[object GeneratorFunction]",J="[object Map]",K="[object Number]",Z="[object Null]",Q="[object Object]",tt="[object Proxy]",et="[object RegExp]",rt="[object Set]",nt="[object String]",it="[object Symbol]",ot="[object Undefined]",at="[object WeakMap]",st="[object WeakSet]",ut="[object ArrayBuffer]",ht="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",ct="[object Int8Array]",dt="[object Int16Array]",pt="[object Int32Array]",vt="[object Uint8Array]",gt="[object Uint8ClampedArray]",mt="[object Uint16Array]",_t="[object Uint32Array]",xt=/\b__p \+= '';/g,yt=/\b(__p \+=) '' \+/g,bt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Tt=/&(?:amp|lt|gt|quot|#39);/g,wt=/[&<>"']/g,At=RegExp(Tt.source),Et=RegExp(wt.source),Ct=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,Rt=/<%=([\s\S]+?)%>/g,Ft=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Lt=/^\w*$/,Dt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Bt=/[\\^$.*+?()[\]{}|]/g,Pt=RegExp(Bt.source),Ot=/^\s+|\s+$/g,It=/^\s+/,Ut=/\s+$/,Mt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,jt=/\{\n\/\* \[wrapped with (.+)\] \*/,kt=/,? & /,Nt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wt=/\\(\\)?/g,Yt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Gt=/\w*$/,Xt=/^[-+]0x[0-9a-f]+$/i,zt=/^0b[01]+$/i,Vt=/^\[object .+?Constructor\]$/,qt=/^0o[0-7]+$/i,Ht=/^(?:0|[1-9]\d*)$/,$t=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Jt=/($^)/,Kt=/['\n\r\u2028\u2029\\]/g,Zt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Qt+"]",re="["+Zt+"]",ne="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+Qt+ne+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",se="\\ud83c[\\udffb-\\udfff]",ue="[^\\ud800-\\udfff]",he="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ce="(?:"+oe+"|"+ae+")",de="(?:"+fe+"|"+ae+")",pe="(?:"+re+"|"+se+")"+"?",ve="[\\ufe0e\\ufe0f]?"+pe+("(?:\\u200d(?:"+[ue,he,le].join("|")+")[\\ufe0e\\ufe0f]?"+pe+")*"),ge="(?:"+[ie,he,le].join("|")+")"+ve,me="(?:"+[ue+re+"?",re,he,le,te].join("|")+")",_e=RegExp("['’]","g"),xe=RegExp(re,"g"),ye=RegExp(se+"(?="+se+")|"+me+ve,"g"),be=RegExp([fe+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",de+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+ce,"$"].join("|")+")",fe+"?"+ce+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ne,ge].join("|"),"g"),Te=RegExp("[\\u200d\\ud800-\\udfff"+Zt+"\\ufe0e\\ufe0f]"),we=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ae=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ee=-1,Ce={};Ce[lt]=Ce[ft]=Ce[ct]=Ce[dt]=Ce[pt]=Ce[vt]=Ce[gt]=Ce[mt]=Ce[_t]=!0,Ce[W]=Ce[Y]=Ce[ut]=Ce[X]=Ce[ht]=Ce[z]=Ce[q]=Ce[H]=Ce[J]=Ce[K]=Ce[Q]=Ce[et]=Ce[rt]=Ce[nt]=Ce[at]=!1;var Se={};Se[W]=Se[Y]=Se[ut]=Se[ht]=Se[X]=Se[z]=Se[lt]=Se[ft]=Se[ct]=Se[dt]=Se[pt]=Se[J]=Se[K]=Se[Q]=Se[et]=Se[rt]=Se[nt]=Se[it]=Se[vt]=Se[gt]=Se[mt]=Se[_t]=!0,Se[q]=Se[H]=Se[at]=!1;var Re={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Fe=parseFloat,Le=parseInt,De="object"==typeof t&&t&&t.Object===Object&&t,Be="object"==typeof self&&self&&self.Object===Object&&self,Pe=De||Be||Function("return this")(),Oe="object"==typeof e&&e&&!e.nodeType&&e,Ie=Oe&&"object"==typeof n&&n&&!n.nodeType&&n,Ue=Ie&&Ie.exports===Oe,Me=Ue&&De.process,je=function(){try{var t=Ie&&Ie.require&&Ie.require("util").types;return t||Me&&Me.binding&&Me.binding("util")}catch(t){}}(),ke=je&&je.isArrayBuffer,Ne=je&&je.isDate,We=je&&je.isMap,Ye=je&&je.isRegExp,Ge=je&&je.isSet,Xe=je&&je.isTypedArray;function ze(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}function Ve(t,e,r,n){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(n,a,r(a),t)}return n}function qe(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}function He(t,e){for(var r=null==t?0:t.length;r--&&!1!==e(t[r],r,t););return t}function $e(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(!e(t[r],r,t))return!1;return!0}function Je(t,e){for(var r=-1,n=null==t?0:t.length,i=0,o=[];++r<n;){var a=t[r];e(a,r,t)&&(o[i++]=a)}return o}function Ke(t,e){return!!(null==t?0:t.length)&&sr(t,e,0)>-1}function Ze(t,e,r){for(var n=-1,i=null==t?0:t.length;++n<i;)if(r(e,t[n]))return!0;return!1}function Qe(t,e){for(var r=-1,n=null==t?0:t.length,i=Array(n);++r<n;)i[r]=e(t[r],r,t);return i}function tr(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}function er(t,e,r,n){var i=-1,o=null==t?0:t.length;for(n&&o&&(r=t[++i]);++i<o;)r=e(r,t[i],i,t);return r}function rr(t,e,r,n){var i=null==t?0:t.length;for(n&&i&&(r=t[--i]);i--;)r=e(r,t[i],i,t);return r}function nr(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}var ir=fr("length");function or(t,e,r){var n;return r(t,function(t,r,i){if(e(t,r,i))return n=r,!1}),n}function ar(t,e,r,n){for(var i=t.length,o=r+(n?1:-1);n?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function sr(t,e,r){return e==e?function(t,e,r){var n=r-1,i=t.length;for(;++n<i;)if(t[n]===e)return n;return-1}(t,e,r):ar(t,hr,r)}function ur(t,e,r,n){for(var i=r-1,o=t.length;++i<o;)if(n(t[i],e))return i;return-1}function hr(t){return t!=t}function lr(t,e){var r=null==t?0:t.length;return r?pr(t,e)/r:U}function fr(t){return function(e){return null==e?o:e[t]}}function cr(t){return function(e){return null==t?o:t[e]}}function dr(t,e,r,n,i){return i(t,function(t,i,o){r=n?(n=!1,t):e(r,t,i,o)}),r}function pr(t,e){for(var r,n=-1,i=t.length;++n<i;){var a=e(t[n]);a!==o&&(r=r===o?a:r+a)}return r}function vr(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}function gr(t){return function(e){return t(e)}}function mr(t,e){return Qe(e,function(e){return t[e]})}function _r(t,e){return t.has(e)}function xr(t,e){for(var r=-1,n=t.length;++r<n&&sr(e,t[r],0)>-1;);return r}function yr(t,e){for(var r=t.length;r--&&sr(e,t[r],0)>-1;);return r}var br=cr({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Tr=cr({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function wr(t){return"\\"+Re[t]}function Ar(t){return Te.test(t)}function Er(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function Cr(t,e){return function(r){return t(e(r))}}function Sr(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var a=t[r];a!==e&&a!==f||(t[r]=f,o[i++]=r)}return o}function Rr(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}function Fr(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=[t,t]}),r}function Lr(t){return Ar(t)?function(t){var e=ye.lastIndex=0;for(;ye.test(t);)++e;return e}(t):ir(t)}function Dr(t){return Ar(t)?function(t){return t.match(ye)||[]}(t):function(t){return t.split("")}(t)}var Br=cr({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Pr=function t(e){var r=(e=null==e?Pe:Pr.defaults(Pe.Object(),e,Pr.pick(Pe,Ae))).Array,n=e.Date,i=e.Error,Zt=e.Function,Qt=e.Math,te=e.Object,ee=e.RegExp,re=e.String,ne=e.TypeError,ie=r.prototype,oe=Zt.prototype,ae=te.prototype,se=e["__core-js_shared__"],ue=oe.toString,he=ae.hasOwnProperty,le=0,fe=function(){var t=/[^.]+$/.exec(se&&se.keys&&se.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),ce=ae.toString,de=ue.call(te),pe=Pe._,ve=ee("^"+ue.call(he).replace(Bt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ge=Ue?e.Buffer:o,me=e.Symbol,ye=e.Uint8Array,Te=ge?ge.allocUnsafe:o,Re=Cr(te.getPrototypeOf,te),De=te.create,Be=ae.propertyIsEnumerable,Oe=ie.splice,Ie=me?me.isConcatSpreadable:o,Me=me?me.iterator:o,je=me?me.toStringTag:o,ir=function(){try{var t=jo(te,"defineProperty");return t({},"",{}),t}catch(t){}}(),cr=e.clearTimeout!==Pe.clearTimeout&&e.clearTimeout,Or=n&&n.now!==Pe.Date.now&&n.now,Ir=e.setTimeout!==Pe.setTimeout&&e.setTimeout,Ur=Qt.ceil,Mr=Qt.floor,jr=te.getOwnPropertySymbols,kr=ge?ge.isBuffer:o,Nr=e.isFinite,Wr=ie.join,Yr=Cr(te.keys,te),Gr=Qt.max,Xr=Qt.min,zr=n.now,Vr=e.parseInt,qr=Qt.random,Hr=ie.reverse,$r=jo(e,"DataView"),Jr=jo(e,"Map"),Kr=jo(e,"Promise"),Zr=jo(e,"Set"),Qr=jo(e,"WeakMap"),tn=jo(te,"create"),en=Qr&&new Qr,rn={},nn=la($r),on=la(Jr),an=la(Kr),sn=la(Zr),un=la(Qr),hn=me?me.prototype:o,ln=hn?hn.valueOf:o,fn=hn?hn.toString:o;function cn(t){if(Ss(t)&&!gs(t)&&!(t instanceof gn)){if(t instanceof vn)return t;if(he.call(t,"__wrapped__"))return fa(t)}return new vn(t)}var dn=function(){function t(){}return function(e){if(!Cs(e))return{};if(De)return De(e);t.prototype=e;var r=new t;return t.prototype=o,r}}();function pn(){}function vn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function gn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=M,this.__views__=[]}function mn(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function _n(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function xn(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function yn(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new xn;++e<r;)this.add(t[e])}function bn(t){var e=this.__data__=new _n(t);this.size=e.size}function Tn(t,e){var r=gs(t),n=!r&&vs(t),i=!r&&!n&&ys(t),o=!r&&!n&&!i&&Is(t),a=r||n||i||o,s=a?vr(t.length,re):[],u=s.length;for(var h in t)!e&&!he.call(t,h)||a&&("length"==h||i&&("offset"==h||"parent"==h)||o&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||zo(h,u))||s.push(h);return s}function wn(t){var e=t.length;return e?t[yi(0,e-1)]:o}function An(t,e){return sa(eo(t),Pn(e,0,t.length))}function En(t){return sa(eo(t))}function Cn(t,e,r){(r===o||cs(t[e],r))&&(r!==o||e in t)||Dn(t,e,r)}function Sn(t,e,r){var n=t[e];he.call(t,e)&&cs(n,r)&&(r!==o||e in t)||Dn(t,e,r)}function Rn(t,e){for(var r=t.length;r--;)if(cs(t[r][0],e))return r;return-1}function Fn(t,e,r,n){return jn(t,function(t,i,o){e(n,t,r(t),o)}),n}function Ln(t,e){return t&&ro(e,nu(e),t)}function Dn(t,e,r){"__proto__"==e&&ir?ir(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function Bn(t,e){for(var n=-1,i=e.length,a=r(i),s=null==t;++n<i;)a[n]=s?o:Zs(t,e[n]);return a}function Pn(t,e,r){return t==t&&(r!==o&&(t=t<=r?t:r),e!==o&&(t=t>=e?t:e)),t}function On(t,e,r,n,i,a){var s,u=e&c,h=e&d,l=e&p;if(r&&(s=i?r(t,n,i,a):r(t)),s!==o)return s;if(!Cs(t))return t;var f=gs(t);if(f){if(s=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&he.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!u)return eo(t,s)}else{var v=Wo(t),g=v==H||v==$;if(ys(t))return $i(t,u);if(v==Q||v==W||g&&!i){if(s=h||g?{}:Go(t),!u)return h?function(t,e){return ro(t,No(t),e)}(t,function(t,e){return t&&ro(e,iu(e),t)}(s,t)):function(t,e){return ro(t,ko(t),e)}(t,Ln(s,t))}else{if(!Se[v])return i?t:{};s=function(t,e,r){var n=t.constructor;switch(e){case ut:return Ji(t);case X:case z:return new n(+t);case ht:return function(t,e){var r=e?Ji(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case lt:case ft:case ct:case dt:case pt:case vt:case gt:case mt:case _t:return Ki(t,r);case J:return new n;case K:case nt:return new n(t);case et:return function(t){var e=new t.constructor(t.source,Gt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case rt:return new n;case it:return function(t){return ln?te(ln.call(t)):{}}(t)}}(t,v,u)}}a||(a=new bn);var m=a.get(t);if(m)return m;if(a.set(t,s),Bs(t))return t.forEach(function(n){s.add(On(n,e,r,n,t,a))}),s;if(Rs(t))return t.forEach(function(n,i){s.set(i,On(n,e,r,i,t,a))}),s;var _=f?o:(l?h?Do:Lo:h?iu:nu)(t);return qe(_||t,function(n,i){_&&(n=t[i=n]),Sn(s,i,On(n,e,r,i,t,a))}),s}function In(t,e,r){var n=r.length;if(null==t)return!n;for(t=te(t);n--;){var i=r[n],a=e[i],s=t[i];if(s===o&&!(i in t)||!a(s))return!1}return!0}function Un(t,e,r){if("function"!=typeof t)throw new ne(u);return na(function(){t.apply(o,r)},e)}function Mn(t,e,r,n){var i=-1,o=Ke,s=!0,u=t.length,h=[],l=e.length;if(!u)return h;r&&(e=Qe(e,gr(r))),n?(o=Ze,s=!1):e.length>=a&&(o=_r,s=!1,e=new yn(e));t:for(;++i<u;){var f=t[i],c=null==r?f:r(f);if(f=n||0!==f?f:0,s&&c==c){for(var d=l;d--;)if(e[d]===c)continue t;h.push(f)}else o(e,c,n)||h.push(f)}return h}cn.templateSettings={escape:Ct,evaluate:St,interpolate:Rt,variable:"",imports:{_:cn}},cn.prototype=pn.prototype,cn.prototype.constructor=cn,vn.prototype=dn(pn.prototype),vn.prototype.constructor=vn,gn.prototype=dn(pn.prototype),gn.prototype.constructor=gn,mn.prototype.clear=function(){this.__data__=tn?tn(null):{},this.size=0},mn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mn.prototype.get=function(t){var e=this.__data__;if(tn){var r=e[t];return r===h?o:r}return he.call(e,t)?e[t]:o},mn.prototype.has=function(t){var e=this.__data__;return tn?e[t]!==o:he.call(e,t)},mn.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=tn&&e===o?h:e,this},_n.prototype.clear=function(){this.__data__=[],this.size=0},_n.prototype.delete=function(t){var e=this.__data__,r=Rn(e,t);return!(r<0||(r==e.length-1?e.pop():Oe.call(e,r,1),--this.size,0))},_n.prototype.get=function(t){var e=this.__data__,r=Rn(e,t);return r<0?o:e[r][1]},_n.prototype.has=function(t){return Rn(this.__data__,t)>-1},_n.prototype.set=function(t,e){var r=this.__data__,n=Rn(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},xn.prototype.clear=function(){this.size=0,this.__data__={hash:new mn,map:new(Jr||_n),string:new mn}},xn.prototype.delete=function(t){var e=Uo(this,t).delete(t);return this.size-=e?1:0,e},xn.prototype.get=function(t){return Uo(this,t).get(t)},xn.prototype.has=function(t){return Uo(this,t).has(t)},xn.prototype.set=function(t,e){var r=Uo(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},yn.prototype.add=yn.prototype.push=function(t){return this.__data__.set(t,h),this},yn.prototype.has=function(t){return this.__data__.has(t)},bn.prototype.clear=function(){this.__data__=new _n,this.size=0},bn.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},bn.prototype.get=function(t){return this.__data__.get(t)},bn.prototype.has=function(t){return this.__data__.has(t)},bn.prototype.set=function(t,e){var r=this.__data__;if(r instanceof _n){var n=r.__data__;if(!Jr||n.length<a-1)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new xn(n)}return r.set(t,e),this.size=r.size,this};var jn=oo(Vn),kn=oo(qn,!0);function Nn(t,e){var r=!0;return jn(t,function(t,n,i){return r=!!e(t,n,i)}),r}function Wn(t,e,r){for(var n=-1,i=t.length;++n<i;){var a=t[n],s=e(a);if(null!=s&&(u===o?s==s&&!Os(s):r(s,u)))var u=s,h=a}return h}function Yn(t,e){var r=[];return jn(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r}function Gn(t,e,r,n,i){var o=-1,a=t.length;for(r||(r=Xo),i||(i=[]);++o<a;){var s=t[o];e>0&&r(s)?e>1?Gn(s,e-1,r,n,i):tr(i,s):n||(i[i.length]=s)}return i}var Xn=ao(),zn=ao(!0);function Vn(t,e){return t&&Xn(t,e,nu)}function qn(t,e){return t&&zn(t,e,nu)}function Hn(t,e){return Je(e,function(e){return ws(t[e])})}function $n(t,e){for(var r=0,n=(e=zi(e,t)).length;null!=t&&r<n;)t=t[ha(e[r++])];return r&&r==n?t:o}function Jn(t,e,r){var n=e(t);return gs(t)?n:tr(n,r(t))}function Kn(t){return null==t?t===o?ot:Z:je&&je in te(t)?function(t){var e=he.call(t,je),r=t[je];try{t[je]=o;var n=!0}catch(t){}var i=ce.call(t);return n&&(e?t[je]=r:delete t[je]),i}(t):function(t){return ce.call(t)}(t)}function Zn(t,e){return t>e}function Qn(t,e){return null!=t&&he.call(t,e)}function ti(t,e){return null!=t&&e in te(t)}function ei(t,e,n){for(var i=n?Ze:Ke,a=t[0].length,s=t.length,u=s,h=r(s),l=1/0,f=[];u--;){var c=t[u];u&&e&&(c=Qe(c,gr(e))),l=Xr(c.length,l),h[u]=!n&&(e||a>=120&&c.length>=120)?new yn(u&&c):o}c=t[0];var d=-1,p=h[0];t:for(;++d<a&&f.length<l;){var v=c[d],g=e?e(v):v;if(v=n||0!==v?v:0,!(p?_r(p,g):i(f,g,n))){for(u=s;--u;){var m=h[u];if(!(m?_r(m,g):i(t[u],g,n)))continue t}p&&p.push(g),f.push(v)}}return f}function ri(t,e,r){var n=null==(t=ta(t,e=zi(e,t)))?t:t[ha(Ta(e))];return null==n?o:ze(n,t,r)}function ni(t){return Ss(t)&&Kn(t)==W}function ii(t,e,r,n,i){return t===e||(null==t||null==e||!Ss(t)&&!Ss(e)?t!=t&&e!=e:function(t,e,r,n,i,a){var s=gs(t),u=gs(e),h=s?Y:Wo(t),l=u?Y:Wo(e),f=(h=h==W?Q:h)==Q,c=(l=l==W?Q:l)==Q,d=h==l;if(d&&ys(t)){if(!ys(e))return!1;s=!0,f=!1}if(d&&!f)return a||(a=new bn),s||Is(t)?Ro(t,e,r,n,i,a):function(t,e,r,n,i,o,a){switch(r){case ht:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ut:return!(t.byteLength!=e.byteLength||!o(new ye(t),new ye(e)));case X:case z:case K:return cs(+t,+e);case q:return t.name==e.name&&t.message==e.message;case et:case nt:return t==e+"";case J:var s=Er;case rt:var u=n&v;if(s||(s=Rr),t.size!=e.size&&!u)return!1;var h=a.get(t);if(h)return h==e;n|=g,a.set(t,e);var l=Ro(s(t),s(e),n,i,o,a);return a.delete(t),l;case it:if(ln)return ln.call(t)==ln.call(e)}return!1}(t,e,h,r,n,i,a);if(!(r&v)){var p=f&&he.call(t,"__wrapped__"),m=c&&he.call(e,"__wrapped__");if(p||m){var _=p?t.value():t,x=m?e.value():e;return a||(a=new bn),i(_,x,r,n,a)}}return!!d&&(a||(a=new bn),function(t,e,r,n,i,a){var s=r&v,u=Lo(t),h=u.length,l=Lo(e).length;if(h!=l&&!s)return!1;for(var f=h;f--;){var c=u[f];if(!(s?c in e:he.call(e,c)))return!1}var d=a.get(t);if(d&&a.get(e))return d==e;var p=!0;a.set(t,e),a.set(e,t);for(var g=s;++f<h;){c=u[f];var m=t[c],_=e[c];if(n)var x=s?n(_,m,c,e,t,a):n(m,_,c,t,e,a);if(!(x===o?m===_||i(m,_,r,n,a):x)){p=!1;break}g||(g="constructor"==c)}if(p&&!g){var y=t.constructor,b=e.constructor;y!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b)&&(p=!1)}return a.delete(t),a.delete(e),p}(t,e,r,n,i,a))}(t,e,r,n,ii,i))}function oi(t,e,r,n){var i=r.length,a=i,s=!n;if(null==t)return!a;for(t=te(t);i--;){var u=r[i];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<a;){var h=(u=r[i])[0],l=t[h],f=u[1];if(s&&u[2]){if(l===o&&!(h in t))return!1}else{var c=new bn;if(n)var d=n(l,f,h,t,e,c);if(!(d===o?ii(f,l,v|g,n,c):d))return!1}}return!0}function ai(t){return!(!Cs(t)||function(t){return!!fe&&fe in t}(t))&&(ws(t)?ve:Vt).test(la(t))}function si(t){return"function"==typeof t?t:null==t?Fu:"object"==typeof t?gs(t)?di(t[0],t[1]):ci(t):ju(t)}function ui(t){if(!Jo(t))return Yr(t);var e=[];for(var r in te(t))he.call(t,r)&&"constructor"!=r&&e.push(r);return e}function hi(t){if(!Cs(t))return function(t){var e=[];if(null!=t)for(var r in te(t))e.push(r);return e}(t);var e=Jo(t),r=[];for(var n in t)("constructor"!=n||!e&&he.call(t,n))&&r.push(n);return r}function li(t,e){return t<e}function fi(t,e){var n=-1,i=_s(t)?r(t.length):[];return jn(t,function(t,r,o){i[++n]=e(t,r,o)}),i}function ci(t){var e=Mo(t);return 1==e.length&&e[0][2]?Zo(e[0][0],e[0][1]):function(r){return r===t||oi(r,t,e)}}function di(t,e){return qo(t)&&Ko(e)?Zo(ha(t),e):function(r){var n=Zs(r,t);return n===o&&n===e?Qs(r,t):ii(e,n,v|g)}}function pi(t,e,r,n,i){t!==e&&Xn(e,function(a,s){if(Cs(a))i||(i=new bn),function(t,e,r,n,i,a,s){var u=ea(t,r),h=ea(e,r),l=s.get(h);if(l)Cn(t,r,l);else{var f=a?a(u,h,r+"",t,e,s):o,c=f===o;if(c){var d=gs(h),p=!d&&ys(h),v=!d&&!p&&Is(h);f=h,d||p||v?gs(u)?f=u:xs(u)?f=eo(u):p?(c=!1,f=$i(h,!0)):v?(c=!1,f=Ki(h,!0)):f=[]:Ls(h)||vs(h)?(f=u,vs(u)?f=Gs(u):Cs(u)&&!ws(u)||(f=Go(h))):c=!1}c&&(s.set(h,f),i(f,h,n,a,s),s.delete(h)),Cn(t,r,f)}}(t,e,s,r,pi,n,i);else{var u=n?n(ea(t,s),a,s+"",t,e,i):o;u===o&&(u=a),Cn(t,s,u)}},iu)}function vi(t,e){var r=t.length;if(r)return zo(e+=e<0?r:0,r)?t[e]:o}function gi(t,e,r){var n=-1;return e=Qe(e.length?e:[Fu],gr(Io())),function(t,e){var r=t.length;for(t.sort(e);r--;)t[r]=t[r].value;return t}(fi(t,function(t,r,i){return{criteria:Qe(e,function(e){return e(t)}),index:++n,value:t}}),function(t,e){return function(t,e,r){for(var n=-1,i=t.criteria,o=e.criteria,a=i.length,s=r.length;++n<a;){var u=Zi(i[n],o[n]);if(u){if(n>=s)return u;var h=r[n];return u*("desc"==h?-1:1)}}return t.index-e.index}(t,e,r)})}function mi(t,e,r){for(var n=-1,i=e.length,o={};++n<i;){var a=e[n],s=$n(t,a);r(s,a)&&Ei(o,zi(a,t),s)}return o}function _i(t,e,r,n){var i=n?ur:sr,o=-1,a=e.length,s=t;for(t===e&&(e=eo(e)),r&&(s=Qe(t,gr(r)));++o<a;)for(var u=0,h=e[o],l=r?r(h):h;(u=i(s,l,u,n))>-1;)s!==t&&Oe.call(s,u,1),Oe.call(t,u,1);return t}function xi(t,e){for(var r=t?e.length:0,n=r-1;r--;){var i=e[r];if(r==n||i!==o){var o=i;zo(i)?Oe.call(t,i,1):Mi(t,i)}}return t}function yi(t,e){return t+Mr(qr()*(e-t+1))}function bi(t,e){var r="";if(!t||e<1||e>O)return r;do{e%2&&(r+=t),(e=Mr(e/2))&&(t+=t)}while(e);return r}function Ti(t,e){return ia(Qo(t,e,Fu),t+"")}function wi(t){return wn(cu(t))}function Ai(t,e){var r=cu(t);return sa(r,Pn(e,0,r.length))}function Ei(t,e,r,n){if(!Cs(t))return t;for(var i=-1,a=(e=zi(e,t)).length,s=a-1,u=t;null!=u&&++i<a;){var h=ha(e[i]),l=r;if(i!=s){var f=u[h];(l=n?n(f,h,u):o)===o&&(l=Cs(f)?f:zo(e[i+1])?[]:{})}Sn(u,h,l),u=u[h]}return t}var Ci=en?function(t,e){return en.set(t,e),t}:Fu,Si=ir?function(t,e){return ir(t,"toString",{configurable:!0,enumerable:!1,value:Cu(e),writable:!0})}:Fu;function Ri(t){return sa(cu(t))}function Fi(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Li(t,e){var r;return jn(t,function(t,n,i){return!(r=e(t,n,i))}),!!r}function Di(t,e,r){var n=0,i=null==t?n:t.length;if("number"==typeof e&&e==e&&i<=k){for(;n<i;){var o=n+i>>>1,a=t[o];null!==a&&!Os(a)&&(r?a<=e:a<e)?n=o+1:i=o}return i}return Bi(t,e,Fu,r)}function Bi(t,e,r,n){e=r(e);for(var i=0,a=null==t?0:t.length,s=e!=e,u=null===e,h=Os(e),l=e===o;i<a;){var f=Mr((i+a)/2),c=r(t[f]),d=c!==o,p=null===c,v=c==c,g=Os(c);if(s)var m=n||v;else m=l?v&&(n||d):u?v&&d&&(n||!p):h?v&&d&&!p&&(n||!g):!p&&!g&&(n?c<=e:c<e);m?i=f+1:a=f}return Xr(a,j)}function Pi(t,e){for(var r=-1,n=t.length,i=0,o=[];++r<n;){var a=t[r],s=e?e(a):a;if(!r||!cs(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function Oi(t){return"number"==typeof t?t:Os(t)?U:+t}function Ii(t){if("string"==typeof t)return t;if(gs(t))return Qe(t,Ii)+"";if(Os(t))return fn?fn.call(t):"";var e=t+"";return"0"==e&&1/t==-P?"-0":e}function Ui(t,e,r){var n=-1,i=Ke,o=t.length,s=!0,u=[],h=u;if(r)s=!1,i=Ze;else if(o>=a){var l=e?null:To(t);if(l)return Rr(l);s=!1,i=_r,h=new yn}else h=e?[]:u;t:for(;++n<o;){var f=t[n],c=e?e(f):f;if(f=r||0!==f?f:0,s&&c==c){for(var d=h.length;d--;)if(h[d]===c)continue t;e&&h.push(c),u.push(f)}else i(h,c,r)||(h!==u&&h.push(c),u.push(f))}return u}function Mi(t,e){return null==(t=ta(t,e=zi(e,t)))||delete t[ha(Ta(e))]}function ji(t,e,r,n){return Ei(t,e,r($n(t,e)),n)}function ki(t,e,r,n){for(var i=t.length,o=n?i:-1;(n?o--:++o<i)&&e(t[o],o,t););return r?Fi(t,n?0:o,n?o+1:i):Fi(t,n?o+1:0,n?i:o)}function Ni(t,e){var r=t;return r instanceof gn&&(r=r.value()),er(e,function(t,e){return e.func.apply(e.thisArg,tr([t],e.args))},r)}function Wi(t,e,n){var i=t.length;if(i<2)return i?Ui(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=t[o],u=-1;++u<i;)u!=o&&(a[o]=Mn(a[o]||s,t[u],e,n));return Ui(Gn(a,1),e,n)}function Yi(t,e,r){for(var n=-1,i=t.length,a=e.length,s={};++n<i;){var u=n<a?e[n]:o;r(s,t[n],u)}return s}function Gi(t){return xs(t)?t:[]}function Xi(t){return"function"==typeof t?t:Fu}function zi(t,e){return gs(t)?t:qo(t,e)?[t]:ua(Xs(t))}var Vi=Ti;function qi(t,e,r){var n=t.length;return r=r===o?n:r,!e&&r>=n?t:Fi(t,e,r)}var Hi=cr||function(t){return Pe.clearTimeout(t)};function $i(t,e){if(e)return t.slice();var r=t.length,n=Te?Te(r):new t.constructor(r);return t.copy(n),n}function Ji(t){var e=new t.constructor(t.byteLength);return new ye(e).set(new ye(t)),e}function Ki(t,e){var r=e?Ji(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function Zi(t,e){if(t!==e){var r=t!==o,n=null===t,i=t==t,a=Os(t),s=e!==o,u=null===e,h=e==e,l=Os(e);if(!u&&!l&&!a&&t>e||a&&s&&h&&!u&&!l||n&&s&&h||!r&&h||!i)return 1;if(!n&&!a&&!l&&t<e||l&&r&&i&&!n&&!a||u&&r&&i||!s&&i||!h)return-1}return 0}function Qi(t,e,n,i){for(var o=-1,a=t.length,s=n.length,u=-1,h=e.length,l=Gr(a-s,0),f=r(h+l),c=!i;++u<h;)f[u]=e[u];for(;++o<s;)(c||o<a)&&(f[n[o]]=t[o]);for(;l--;)f[u++]=t[o++];return f}function to(t,e,n,i){for(var o=-1,a=t.length,s=-1,u=n.length,h=-1,l=e.length,f=Gr(a-u,0),c=r(f+l),d=!i;++o<f;)c[o]=t[o];for(var p=o;++h<l;)c[p+h]=e[h];for(;++s<u;)(d||o<a)&&(c[p+n[s]]=t[o++]);return c}function eo(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function ro(t,e,r,n){var i=!r;r||(r={});for(var a=-1,s=e.length;++a<s;){var u=e[a],h=n?n(r[u],t[u],u,r,t):o;h===o&&(h=t[u]),i?Dn(r,u,h):Sn(r,u,h)}return r}function no(t,e){return function(r,n){var i=gs(r)?Ve:Fn,o=e?e():{};return i(r,t,Io(n,2),o)}}function io(t){return Ti(function(e,r){var n=-1,i=r.length,a=i>1?r[i-1]:o,s=i>2?r[2]:o;for(a=t.length>3&&"function"==typeof a?(i--,a):o,s&&Vo(r[0],r[1],s)&&(a=i<3?o:a,i=1),e=te(e);++n<i;){var u=r[n];u&&t(e,u,n,a)}return e})}function oo(t,e){return function(r,n){if(null==r)return r;if(!_s(r))return t(r,n);for(var i=r.length,o=e?i:-1,a=te(r);(e?o--:++o<i)&&!1!==n(a[o],o,a););return r}}function ao(t){return function(e,r,n){for(var i=-1,o=te(e),a=n(e),s=a.length;s--;){var u=a[t?s:++i];if(!1===r(o[u],u,o))break}return e}}function so(t){return function(e){var r=Ar(e=Xs(e))?Dr(e):o,n=r?r[0]:e.charAt(0),i=r?qi(r,1).join(""):e.slice(1);return n[t]()+i}}function uo(t){return function(e){return er(wu(vu(e).replace(_e,"")),t,"")}}function ho(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var r=dn(t.prototype),n=t.apply(r,e);return Cs(n)?n:r}}function lo(t){return function(e,r,n){var i=te(e);if(!_s(e)){var a=Io(r,3);e=nu(e),r=function(t){return a(i[t],t,i)}}var s=t(e,r,n);return s>-1?i[a?e[s]:s]:o}}function fo(t){return Fo(function(e){var r=e.length,n=r,i=vn.prototype.thru;for(t&&e.reverse();n--;){var a=e[n];if("function"!=typeof a)throw new ne(u);if(i&&!s&&"wrapper"==Po(a))var s=new vn([],!0)}for(n=s?n:r;++n<r;){var h=Po(a=e[n]),l="wrapper"==h?Bo(a):o;s=l&&Ho(l[0])&&l[1]==(A|y|T|E)&&!l[4].length&&1==l[9]?s[Po(l[0])].apply(s,l[3]):1==a.length&&Ho(a)?s[h]():s.thru(a)}return function(){var t=arguments,n=t[0];if(s&&1==t.length&&gs(n))return s.plant(n).value();for(var i=0,o=r?e[i].apply(this,t):n;++i<r;)o=e[i].call(this,o);return o}})}function co(t,e,n,i,a,s,u,h,l,f){var c=e&A,d=e&m,p=e&_,v=e&(y|b),g=e&C,x=p?o:ho(t);return function m(){for(var _=arguments.length,y=r(_),b=_;b--;)y[b]=arguments[b];if(v)var T=Oo(m),w=function(t,e){for(var r=t.length,n=0;r--;)t[r]===e&&++n;return n}(y,T);if(i&&(y=Qi(y,i,a,v)),s&&(y=to(y,s,u,v)),_-=w,v&&_<f){var A=Sr(y,T);return yo(t,e,co,m.placeholder,n,y,A,h,l,f-_)}var E=d?n:this,C=p?E[t]:t;return _=y.length,h?y=function(t,e){for(var r=t.length,n=Xr(e.length,r),i=eo(t);n--;){var a=e[n];t[n]=zo(a,r)?i[a]:o}return t}(y,h):g&&_>1&&y.reverse(),c&&l<_&&(y.length=l),this&&this!==Pe&&this instanceof m&&(C=x||ho(C)),C.apply(E,y)}}function po(t,e){return function(r,n){return function(t,e,r,n){return Vn(t,function(t,i,o){e(n,r(t),i,o)}),n}(r,t,e(n),{})}}function vo(t,e){return function(r,n){var i;if(r===o&&n===o)return e;if(r!==o&&(i=r),n!==o){if(i===o)return n;"string"==typeof r||"string"==typeof n?(r=Ii(r),n=Ii(n)):(r=Oi(r),n=Oi(n)),i=t(r,n)}return i}}function go(t){return Fo(function(e){return e=Qe(e,gr(Io())),Ti(function(r){var n=this;return t(e,function(t){return ze(t,n,r)})})})}function mo(t,e){var r=(e=e===o?" ":Ii(e)).length;if(r<2)return r?bi(e,t):e;var n=bi(e,Ur(t/Lr(e)));return Ar(e)?qi(Dr(n),0,t).join(""):n.slice(0,t)}function _o(t){return function(e,n,i){return i&&"number"!=typeof i&&Vo(e,n,i)&&(n=i=o),e=ks(e),n===o?(n=e,e=0):n=ks(n),function(t,e,n,i){for(var o=-1,a=Gr(Ur((e-t)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=t,t+=n;return s}(e,n,i=i===o?e<n?1:-1:ks(i),t)}}function xo(t){return function(e,r){return"string"==typeof e&&"string"==typeof r||(e=Ys(e),r=Ys(r)),t(e,r)}}function yo(t,e,r,n,i,a,s,u,h,l){var f=e&y;e|=f?T:w,(e&=~(f?w:T))&x||(e&=~(m|_));var c=[t,e,i,f?a:o,f?s:o,f?o:a,f?o:s,u,h,l],d=r.apply(o,c);return Ho(t)&&ra(d,c),d.placeholder=n,oa(d,t,e)}function bo(t){var e=Qt[t];return function(t,r){if(t=Ys(t),r=null==r?0:Xr(Ns(r),292)){var n=(Xs(t)+"e").split("e");return+((n=(Xs(e(n[0]+"e"+(+n[1]+r)))+"e").split("e"))[0]+"e"+(+n[1]-r))}return e(t)}}var To=Zr&&1/Rr(new Zr([,-0]))[1]==P?function(t){return new Zr(t)}:Ou;function wo(t){return function(e){var r=Wo(e);return r==J?Er(e):r==rt?Fr(e):function(t,e){return Qe(e,function(e){return[e,t[e]]})}(e,t(e))}}function Ao(t,e,n,i,a,s,h,l){var c=e&_;if(!c&&"function"!=typeof t)throw new ne(u);var d=i?i.length:0;if(d||(e&=~(T|w),i=a=o),h=h===o?h:Gr(Ns(h),0),l=l===o?l:Ns(l),d-=a?a.length:0,e&w){var p=i,v=a;i=a=o}var g=c?o:Bo(t),C=[t,e,n,i,a,p,v,s,h,l];if(g&&function(t,e){var r=t[1],n=e[1],i=r|n,o=i<(m|_|A),a=n==A&&r==y||n==A&&r==E&&t[7].length<=e[8]||n==(A|E)&&e[7].length<=e[8]&&r==y;if(!o&&!a)return t;n&m&&(t[2]=e[2],i|=r&m?0:x);var s=e[3];if(s){var u=t[3];t[3]=u?Qi(u,s,e[4]):s,t[4]=u?Sr(t[3],f):e[4]}(s=e[5])&&(u=t[5],t[5]=u?to(u,s,e[6]):s,t[6]=u?Sr(t[5],f):e[6]),(s=e[7])&&(t[7]=s),n&A&&(t[8]=null==t[8]?e[8]:Xr(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(C,g),t=C[0],e=C[1],n=C[2],i=C[3],a=C[4],!(l=C[9]=C[9]===o?c?0:t.length:Gr(C[9]-d,0))&&e&(y|b)&&(e&=~(y|b)),e&&e!=m)S=e==y||e==b?function(t,e,n){var i=ho(t);return function a(){for(var s=arguments.length,u=r(s),h=s,l=Oo(a);h--;)u[h]=arguments[h];var f=s<3&&u[0]!==l&&u[s-1]!==l?[]:Sr(u,l);return(s-=f.length)<n?yo(t,e,co,a.placeholder,o,u,f,o,o,n-s):ze(this&&this!==Pe&&this instanceof a?i:t,this,u)}}(t,e,l):e!=T&&e!=(m|T)||a.length?co.apply(o,C):function(t,e,n,i){var o=e&m,a=ho(t);return function e(){for(var s=-1,u=arguments.length,h=-1,l=i.length,f=r(l+u),c=this&&this!==Pe&&this instanceof e?a:t;++h<l;)f[h]=i[h];for(;u--;)f[h++]=arguments[++s];return ze(c,o?n:this,f)}}(t,e,n,i);else var S=function(t,e,r){var n=e&m,i=ho(t);return function e(){return(this&&this!==Pe&&this instanceof e?i:t).apply(n?r:this,arguments)}}(t,e,n);return oa((g?Ci:ra)(S,C),t,e)}function Eo(t,e,r,n){return t===o||cs(t,ae[r])&&!he.call(n,r)?e:t}function Co(t,e,r,n,i,a){return Cs(t)&&Cs(e)&&(a.set(e,t),pi(t,e,o,Co,a),a.delete(e)),t}function So(t){return Ls(t)?o:t}function Ro(t,e,r,n,i,a){var s=r&v,u=t.length,h=e.length;if(u!=h&&!(s&&h>u))return!1;var l=a.get(t);if(l&&a.get(e))return l==e;var f=-1,c=!0,d=r&g?new yn:o;for(a.set(t,e),a.set(e,t);++f<u;){var p=t[f],m=e[f];if(n)var _=s?n(m,p,f,e,t,a):n(p,m,f,t,e,a);if(_!==o){if(_)continue;c=!1;break}if(d){if(!nr(e,function(t,e){if(!_r(d,e)&&(p===t||i(p,t,r,n,a)))return d.push(e)})){c=!1;break}}else if(p!==m&&!i(p,m,r,n,a)){c=!1;break}}return a.delete(t),a.delete(e),c}function Fo(t){return ia(Qo(t,o,ma),t+"")}function Lo(t){return Jn(t,nu,ko)}function Do(t){return Jn(t,iu,No)}var Bo=en?function(t){return en.get(t)}:Ou;function Po(t){for(var e=t.name+"",r=rn[e],n=he.call(rn,e)?r.length:0;n--;){var i=r[n],o=i.func;if(null==o||o==t)return i.name}return e}function Oo(t){return(he.call(cn,"placeholder")?cn:t).placeholder}function Io(){var t=cn.iteratee||Lu;return t=t===Lu?si:t,arguments.length?t(arguments[0],arguments[1]):t}function Uo(t,e){var r=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?r["string"==typeof e?"string":"hash"]:r.map}function Mo(t){for(var e=nu(t),r=e.length;r--;){var n=e[r],i=t[n];e[r]=[n,i,Ko(i)]}return e}function jo(t,e){var r=function(t,e){return null==t?o:t[e]}(t,e);return ai(r)?r:o}var ko=jr?function(t){return null==t?[]:(t=te(t),Je(jr(t),function(e){return Be.call(t,e)}))}:Wu,No=jr?function(t){for(var e=[];t;)tr(e,ko(t)),t=Re(t);return e}:Wu,Wo=Kn;function Yo(t,e,r){for(var n=-1,i=(e=zi(e,t)).length,o=!1;++n<i;){var a=ha(e[n]);if(!(o=null!=t&&r(t,a)))break;t=t[a]}return o||++n!=i?o:!!(i=null==t?0:t.length)&&Es(i)&&zo(a,i)&&(gs(t)||vs(t))}function Go(t){return"function"!=typeof t.constructor||Jo(t)?{}:dn(Re(t))}function Xo(t){return gs(t)||vs(t)||!!(Ie&&t&&t[Ie])}function zo(t,e){var r=typeof t;return!!(e=null==e?O:e)&&("number"==r||"symbol"!=r&&Ht.test(t))&&t>-1&&t%1==0&&t<e}function Vo(t,e,r){if(!Cs(r))return!1;var n=typeof e;return!!("number"==n?_s(r)&&zo(e,r.length):"string"==n&&e in r)&&cs(r[e],t)}function qo(t,e){if(gs(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Os(t))||Lt.test(t)||!Ft.test(t)||null!=e&&t in te(e)}function Ho(t){var e=Po(t),r=cn[e];if("function"!=typeof r||!(e in gn.prototype))return!1;if(t===r)return!0;var n=Bo(r);return!!n&&t===n[0]}($r&&Wo(new $r(new ArrayBuffer(1)))!=ht||Jr&&Wo(new Jr)!=J||Kr&&"[object Promise]"!=Wo(Kr.resolve())||Zr&&Wo(new Zr)!=rt||Qr&&Wo(new Qr)!=at)&&(Wo=function(t){var e=Kn(t),r=e==Q?t.constructor:o,n=r?la(r):"";if(n)switch(n){case nn:return ht;case on:return J;case an:return"[object Promise]";case sn:return rt;case un:return at}return e});var $o=se?ws:Yu;function Jo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Ko(t){return t==t&&!Cs(t)}function Zo(t,e){return function(r){return null!=r&&r[t]===e&&(e!==o||t in te(r))}}function Qo(t,e,n){return e=Gr(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=Gr(i.length-e,0),s=r(a);++o<a;)s[o]=i[e+o];o=-1;for(var u=r(e+1);++o<e;)u[o]=i[o];return u[e]=n(s),ze(t,this,u)}}function ta(t,e){return e.length<2?t:$n(t,Fi(e,0,-1))}function ea(t,e){if("__proto__"!=e)return t[e]}var ra=aa(Ci),na=Ir||function(t,e){return Pe.setTimeout(t,e)},ia=aa(Si);function oa(t,e,r){var n=e+"";return ia(t,function(t,e){var r=e.length;if(!r)return t;var n=r-1;return e[n]=(r>1?"& ":"")+e[n],e=e.join(r>2?", ":" "),t.replace(Mt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return qe(N,function(r){var n="_."+r[0];e&r[1]&&!Ke(t,n)&&t.push(n)}),t.sort()}(function(t){var e=t.match(jt);return e?e[1].split(kt):[]}(n),r)))}function aa(t){var e=0,r=0;return function(){var n=zr(),i=L-(n-r);if(r=n,i>0){if(++e>=F)return arguments[0]}else e=0;return t.apply(o,arguments)}}function sa(t,e){var r=-1,n=t.length,i=n-1;for(e=e===o?n:e;++r<e;){var a=yi(r,i),s=t[a];t[a]=t[r],t[r]=s}return t.length=e,t}var ua=function(t){var e=as(t,function(t){return r.size===l&&r.clear(),t}),r=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Dt,function(t,r,n,i){e.push(n?i.replace(Wt,"$1"):r||t)}),e});function ha(t){if("string"==typeof t||Os(t))return t;var e=t+"";return"0"==e&&1/t==-P?"-0":e}function la(t){if(null!=t){try{return ue.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof gn)return t.clone();var e=new vn(t.__wrapped__,t.__chain__);return e.__actions__=eo(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ca=Ti(function(t,e){return xs(t)?Mn(t,Gn(e,1,xs,!0)):[]}),da=Ti(function(t,e){var r=Ta(e);return xs(r)&&(r=o),xs(t)?Mn(t,Gn(e,1,xs,!0),Io(r,2)):[]}),pa=Ti(function(t,e){var r=Ta(e);return xs(r)&&(r=o),xs(t)?Mn(t,Gn(e,1,xs,!0),o,r):[]});function va(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:Ns(r);return i<0&&(i=Gr(n+i,0)),ar(t,Io(e,3),i)}function ga(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=n-1;return r!==o&&(i=Ns(r),i=r<0?Gr(n+i,0):Xr(i,n-1)),ar(t,Io(e,3),i,!0)}function ma(t){return null!=t&&t.length?Gn(t,1):[]}function _a(t){return t&&t.length?t[0]:o}var xa=Ti(function(t){var e=Qe(t,Gi);return e.length&&e[0]===t[0]?ei(e):[]}),ya=Ti(function(t){var e=Ta(t),r=Qe(t,Gi);return e===Ta(r)?e=o:r.pop(),r.length&&r[0]===t[0]?ei(r,Io(e,2)):[]}),ba=Ti(function(t){var e=Ta(t),r=Qe(t,Gi);return(e="function"==typeof e?e:o)&&r.pop(),r.length&&r[0]===t[0]?ei(r,o,e):[]});function Ta(t){var e=null==t?0:t.length;return e?t[e-1]:o}var wa=Ti(Aa);function Aa(t,e){return t&&t.length&&e&&e.length?_i(t,e):t}var Ea=Fo(function(t,e){var r=null==t?0:t.length,n=Bn(t,e);return xi(t,Qe(e,function(t){return zo(t,r)?+t:t}).sort(Zi)),n});function Ca(t){return null==t?t:Hr.call(t)}var Sa=Ti(function(t){return Ui(Gn(t,1,xs,!0))}),Ra=Ti(function(t){var e=Ta(t);return xs(e)&&(e=o),Ui(Gn(t,1,xs,!0),Io(e,2))}),Fa=Ti(function(t){var e=Ta(t);return e="function"==typeof e?e:o,Ui(Gn(t,1,xs,!0),o,e)});function La(t){if(!t||!t.length)return[];var e=0;return t=Je(t,function(t){if(xs(t))return e=Gr(t.length,e),!0}),vr(e,function(e){return Qe(t,fr(e))})}function Da(t,e){if(!t||!t.length)return[];var r=La(t);return null==e?r:Qe(r,function(t){return ze(e,o,t)})}var Ba=Ti(function(t,e){return xs(t)?Mn(t,e):[]}),Pa=Ti(function(t){return Wi(Je(t,xs))}),Oa=Ti(function(t){var e=Ta(t);return xs(e)&&(e=o),Wi(Je(t,xs),Io(e,2))}),Ia=Ti(function(t){var e=Ta(t);return e="function"==typeof e?e:o,Wi(Je(t,xs),o,e)}),Ua=Ti(La);var Ma=Ti(function(t){var e=t.length,r=e>1?t[e-1]:o;return Da(t,r="function"==typeof r?(t.pop(),r):o)});function ja(t){var e=cn(t);return e.__chain__=!0,e}function ka(t,e){return e(t)}var Na=Fo(function(t){var e=t.length,r=e?t[0]:0,n=this.__wrapped__,i=function(e){return Bn(e,t)};return!(e>1||this.__actions__.length)&&n instanceof gn&&zo(r)?((n=n.slice(r,+r+(e?1:0))).__actions__.push({func:ka,args:[i],thisArg:o}),new vn(n,this.__chain__).thru(function(t){return e&&!t.length&&t.push(o),t})):this.thru(i)});var Wa=no(function(t,e,r){he.call(t,r)?++t[r]:Dn(t,r,1)});var Ya=lo(va),Ga=lo(ga);function Xa(t,e){return(gs(t)?qe:jn)(t,Io(e,3))}function za(t,e){return(gs(t)?He:kn)(t,Io(e,3))}var Va=no(function(t,e,r){he.call(t,r)?t[r].push(e):Dn(t,r,[e])});var qa=Ti(function(t,e,n){var i=-1,o="function"==typeof e,a=_s(t)?r(t.length):[];return jn(t,function(t){a[++i]=o?ze(e,t,n):ri(t,e,n)}),a}),Ha=no(function(t,e,r){Dn(t,r,e)});function $a(t,e){return(gs(t)?Qe:fi)(t,Io(e,3))}var Ja=no(function(t,e,r){t[r?0:1].push(e)},function(){return[[],[]]});var Ka=Ti(function(t,e){if(null==t)return[];var r=e.length;return r>1&&Vo(t,e[0],e[1])?e=[]:r>2&&Vo(e[0],e[1],e[2])&&(e=[e[0]]),gi(t,Gn(e,1),[])}),Za=Or||function(){return Pe.Date.now()};function Qa(t,e,r){return e=r?o:e,e=t&&null==e?t.length:e,Ao(t,A,o,o,o,o,e)}function ts(t,e){var r;if("function"!=typeof e)throw new ne(u);return t=Ns(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=o),r}}var es=Ti(function(t,e,r){var n=m;if(r.length){var i=Sr(r,Oo(es));n|=T}return Ao(t,n,e,r,i)}),rs=Ti(function(t,e,r){var n=m|_;if(r.length){var i=Sr(r,Oo(rs));n|=T}return Ao(e,n,t,r,i)});function ns(t,e,r){var n,i,a,s,h,l,f=0,c=!1,d=!1,p=!0;if("function"!=typeof t)throw new ne(u);function v(e){var r=n,a=i;return n=i=o,f=e,s=t.apply(a,r)}function g(t){var r=t-l;return l===o||r>=e||r<0||d&&t-f>=a}function m(){var t=Za();if(g(t))return _(t);h=na(m,function(t){var r=e-(t-l);return d?Xr(r,a-(t-f)):r}(t))}function _(t){return h=o,p&&n?v(t):(n=i=o,s)}function x(){var t=Za(),r=g(t);if(n=arguments,i=this,l=t,r){if(h===o)return function(t){return f=t,h=na(m,e),c?v(t):s}(l);if(d)return h=na(m,e),v(l)}return h===o&&(h=na(m,e)),s}return e=Ys(e)||0,Cs(r)&&(c=!!r.leading,a=(d="maxWait"in r)?Gr(Ys(r.maxWait)||0,e):a,p="trailing"in r?!!r.trailing:p),x.cancel=function(){h!==o&&Hi(h),f=0,n=l=i=h=o},x.flush=function(){return h===o?s:_(Za())},x}var is=Ti(function(t,e){return Un(t,1,e)}),os=Ti(function(t,e,r){return Un(t,Ys(e)||0,r)});function as(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ne(u);var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var a=t.apply(this,n);return r.cache=o.set(i,a)||o,a};return r.cache=new(as.Cache||xn),r}function ss(t){if("function"!=typeof t)throw new ne(u);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}as.Cache=xn;var us=Vi(function(t,e){var r=(e=1==e.length&&gs(e[0])?Qe(e[0],gr(Io())):Qe(Gn(e,1),gr(Io()))).length;return Ti(function(n){for(var i=-1,o=Xr(n.length,r);++i<o;)n[i]=e[i].call(this,n[i]);return ze(t,this,n)})}),hs=Ti(function(t,e){var r=Sr(e,Oo(hs));return Ao(t,T,o,e,r)}),ls=Ti(function(t,e){var r=Sr(e,Oo(ls));return Ao(t,w,o,e,r)}),fs=Fo(function(t,e){return Ao(t,E,o,o,o,e)});function cs(t,e){return t===e||t!=t&&e!=e}var ds=xo(Zn),ps=xo(function(t,e){return t>=e}),vs=ni(function(){return arguments}())?ni:function(t){return Ss(t)&&he.call(t,"callee")&&!Be.call(t,"callee")},gs=r.isArray,ms=ke?gr(ke):function(t){return Ss(t)&&Kn(t)==ut};function _s(t){return null!=t&&Es(t.length)&&!ws(t)}function xs(t){return Ss(t)&&_s(t)}var ys=kr||Yu,bs=Ne?gr(Ne):function(t){return Ss(t)&&Kn(t)==z};function Ts(t){if(!Ss(t))return!1;var e=Kn(t);return e==q||e==V||"string"==typeof t.message&&"string"==typeof t.name&&!Ls(t)}function ws(t){if(!Cs(t))return!1;var e=Kn(t);return e==H||e==$||e==G||e==tt}function As(t){return"number"==typeof t&&t==Ns(t)}function Es(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=O}function Cs(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ss(t){return null!=t&&"object"==typeof t}var Rs=We?gr(We):function(t){return Ss(t)&&Wo(t)==J};function Fs(t){return"number"==typeof t||Ss(t)&&Kn(t)==K}function Ls(t){if(!Ss(t)||Kn(t)!=Q)return!1;var e=Re(t);if(null===e)return!0;var r=he.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&ue.call(r)==de}var Ds=Ye?gr(Ye):function(t){return Ss(t)&&Kn(t)==et};var Bs=Ge?gr(Ge):function(t){return Ss(t)&&Wo(t)==rt};function Ps(t){return"string"==typeof t||!gs(t)&&Ss(t)&&Kn(t)==nt}function Os(t){return"symbol"==typeof t||Ss(t)&&Kn(t)==it}var Is=Xe?gr(Xe):function(t){return Ss(t)&&Es(t.length)&&!!Ce[Kn(t)]};var Us=xo(li),Ms=xo(function(t,e){return t<=e});function js(t){if(!t)return[];if(_s(t))return Ps(t)?Dr(t):eo(t);if(Me&&t[Me])return function(t){for(var e,r=[];!(e=t.next()).done;)r.push(e.value);return r}(t[Me]());var e=Wo(t);return(e==J?Er:e==rt?Rr:cu)(t)}function ks(t){return t?(t=Ys(t))===P||t===-P?(t<0?-1:1)*I:t==t?t:0:0===t?t:0}function Ns(t){var e=ks(t),r=e%1;return e==e?r?e-r:e:0}function Ws(t){return t?Pn(Ns(t),0,M):0}function Ys(t){if("number"==typeof t)return t;if(Os(t))return U;if(Cs(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Cs(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Ot,"");var r=zt.test(t);return r||qt.test(t)?Le(t.slice(2),r?2:8):Xt.test(t)?U:+t}function Gs(t){return ro(t,iu(t))}function Xs(t){return null==t?"":Ii(t)}var zs=io(function(t,e){if(Jo(e)||_s(e))ro(e,nu(e),t);else for(var r in e)he.call(e,r)&&Sn(t,r,e[r])}),Vs=io(function(t,e){ro(e,iu(e),t)}),qs=io(function(t,e,r,n){ro(e,iu(e),t,n)}),Hs=io(function(t,e,r,n){ro(e,nu(e),t,n)}),$s=Fo(Bn);var Js=Ti(function(t,e){t=te(t);var r=-1,n=e.length,i=n>2?e[2]:o;for(i&&Vo(e[0],e[1],i)&&(n=1);++r<n;)for(var a=e[r],s=iu(a),u=-1,h=s.length;++u<h;){var l=s[u],f=t[l];(f===o||cs(f,ae[l])&&!he.call(t,l))&&(t[l]=a[l])}return t}),Ks=Ti(function(t){return t.push(o,Co),ze(au,o,t)});function Zs(t,e,r){var n=null==t?o:$n(t,e);return n===o?r:n}function Qs(t,e){return null!=t&&Yo(t,e,ti)}var tu=po(function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=ce.call(e)),t[e]=r},Cu(Fu)),eu=po(function(t,e,r){null!=e&&"function"!=typeof e.toString&&(e=ce.call(e)),he.call(t,e)?t[e].push(r):t[e]=[r]},Io),ru=Ti(ri);function nu(t){return _s(t)?Tn(t):ui(t)}function iu(t){return _s(t)?Tn(t,!0):hi(t)}var ou=io(function(t,e,r){pi(t,e,r)}),au=io(function(t,e,r,n){pi(t,e,r,n)}),su=Fo(function(t,e){var r={};if(null==t)return r;var n=!1;e=Qe(e,function(e){return e=zi(e,t),n||(n=e.length>1),e}),ro(t,Do(t),r),n&&(r=On(r,c|d|p,So));for(var i=e.length;i--;)Mi(r,e[i]);return r});var uu=Fo(function(t,e){return null==t?{}:function(t,e){return mi(t,e,function(e,r){return Qs(t,r)})}(t,e)});function hu(t,e){if(null==t)return{};var r=Qe(Do(t),function(t){return[t]});return e=Io(e),mi(t,r,function(t,r){return e(t,r[0])})}var lu=wo(nu),fu=wo(iu);function cu(t){return null==t?[]:mr(t,nu(t))}var du=uo(function(t,e,r){return e=e.toLowerCase(),t+(r?pu(e):e)});function pu(t){return Tu(Xs(t).toLowerCase())}function vu(t){return(t=Xs(t))&&t.replace($t,br).replace(xe,"")}var gu=uo(function(t,e,r){return t+(r?"-":"")+e.toLowerCase()}),mu=uo(function(t,e,r){return t+(r?" ":"")+e.toLowerCase()}),_u=so("toLowerCase");var xu=uo(function(t,e,r){return t+(r?"_":"")+e.toLowerCase()});var yu=uo(function(t,e,r){return t+(r?" ":"")+Tu(e)});var bu=uo(function(t,e,r){return t+(r?" ":"")+e.toUpperCase()}),Tu=so("toUpperCase");function wu(t,e,r){return t=Xs(t),(e=r?o:e)===o?function(t){return we.test(t)}(t)?function(t){return t.match(be)||[]}(t):function(t){return t.match(Nt)||[]}(t):t.match(e)||[]}var Au=Ti(function(t,e){try{return ze(t,o,e)}catch(t){return Ts(t)?t:new i(t)}}),Eu=Fo(function(t,e){return qe(e,function(e){e=ha(e),Dn(t,e,es(t[e],t))}),t});function Cu(t){return function(){return t}}var Su=fo(),Ru=fo(!0);function Fu(t){return t}function Lu(t){return si("function"==typeof t?t:On(t,c))}var Du=Ti(function(t,e){return function(r){return ri(r,t,e)}}),Bu=Ti(function(t,e){return function(r){return ri(t,r,e)}});function Pu(t,e,r){var n=nu(e),i=Hn(e,n);null!=r||Cs(e)&&(i.length||!n.length)||(r=e,e=t,t=this,i=Hn(e,nu(e)));var o=!(Cs(r)&&"chain"in r&&!r.chain),a=ws(t);return qe(i,function(r){var n=e[r];t[r]=n,a&&(t.prototype[r]=function(){var e=this.__chain__;if(o||e){var r=t(this.__wrapped__);return(r.__actions__=eo(this.__actions__)).push({func:n,args:arguments,thisArg:t}),r.__chain__=e,r}return n.apply(t,tr([this.value()],arguments))})}),t}function Ou(){}var Iu=go(Qe),Uu=go($e),Mu=go(nr);function ju(t){return qo(t)?fr(ha(t)):function(t){return function(e){return $n(e,t)}}(t)}var ku=_o(),Nu=_o(!0);function Wu(){return[]}function Yu(){return!1}var Gu=vo(function(t,e){return t+e},0),Xu=bo("ceil"),zu=vo(function(t,e){return t/e},1),Vu=bo("floor");var qu=vo(function(t,e){return t*e},1),Hu=bo("round"),$u=vo(function(t,e){return t-e},0);return cn.after=function(t,e){if("function"!=typeof e)throw new ne(u);return t=Ns(t),function(){if(--t<1)return e.apply(this,arguments)}},cn.ary=Qa,cn.assign=zs,cn.assignIn=Vs,cn.assignInWith=qs,cn.assignWith=Hs,cn.at=$s,cn.before=ts,cn.bind=es,cn.bindAll=Eu,cn.bindKey=rs,cn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return gs(t)?t:[t]},cn.chain=ja,cn.chunk=function(t,e,n){e=(n?Vo(t,e,n):e===o)?1:Gr(Ns(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,s=0,u=r(Ur(i/e));a<i;)u[s++]=Fi(t,a,a+=e);return u},cn.compact=function(t){for(var e=-1,r=null==t?0:t.length,n=0,i=[];++e<r;){var o=t[e];o&&(i[n++]=o)}return i},cn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tr(gs(n)?eo(n):[n],Gn(e,1))},cn.cond=function(t){var e=null==t?0:t.length,r=Io();return t=e?Qe(t,function(t){if("function"!=typeof t[1])throw new ne(u);return[r(t[0]),t[1]]}):[],Ti(function(r){for(var n=-1;++n<e;){var i=t[n];if(ze(i[0],this,r))return ze(i[1],this,r)}})},cn.conforms=function(t){return function(t){var e=nu(t);return function(r){return In(r,t,e)}}(On(t,c))},cn.constant=Cu,cn.countBy=Wa,cn.create=function(t,e){var r=dn(t);return null==e?r:Ln(r,e)},cn.curry=function t(e,r,n){var i=Ao(e,y,o,o,o,o,o,r=n?o:r);return i.placeholder=t.placeholder,i},cn.curryRight=function t(e,r,n){var i=Ao(e,b,o,o,o,o,o,r=n?o:r);return i.placeholder=t.placeholder,i},cn.debounce=ns,cn.defaults=Js,cn.defaultsDeep=Ks,cn.defer=is,cn.delay=os,cn.difference=ca,cn.differenceBy=da,cn.differenceWith=pa,cn.drop=function(t,e,r){var n=null==t?0:t.length;return n?Fi(t,(e=r||e===o?1:Ns(e))<0?0:e,n):[]},cn.dropRight=function(t,e,r){var n=null==t?0:t.length;return n?Fi(t,0,(e=n-(e=r||e===o?1:Ns(e)))<0?0:e):[]},cn.dropRightWhile=function(t,e){return t&&t.length?ki(t,Io(e,3),!0,!0):[]},cn.dropWhile=function(t,e){return t&&t.length?ki(t,Io(e,3),!0):[]},cn.fill=function(t,e,r,n){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&Vo(t,e,r)&&(r=0,n=i),function(t,e,r,n){var i=t.length;for((r=Ns(r))<0&&(r=-r>i?0:i+r),(n=n===o||n>i?i:Ns(n))<0&&(n+=i),n=r>n?0:Ws(n);r<n;)t[r++]=e;return t}(t,e,r,n)):[]},cn.filter=function(t,e){return(gs(t)?Je:Yn)(t,Io(e,3))},cn.flatMap=function(t,e){return Gn($a(t,e),1)},cn.flatMapDeep=function(t,e){return Gn($a(t,e),P)},cn.flatMapDepth=function(t,e,r){return r=r===o?1:Ns(r),Gn($a(t,e),r)},cn.flatten=ma,cn.flattenDeep=function(t){return null!=t&&t.length?Gn(t,P):[]},cn.flattenDepth=function(t,e){return null!=t&&t.length?Gn(t,e=e===o?1:Ns(e)):[]},cn.flip=function(t){return Ao(t,C)},cn.flow=Su,cn.flowRight=Ru,cn.fromPairs=function(t){for(var e=-1,r=null==t?0:t.length,n={};++e<r;){var i=t[e];n[i[0]]=i[1]}return n},cn.functions=function(t){return null==t?[]:Hn(t,nu(t))},cn.functionsIn=function(t){return null==t?[]:Hn(t,iu(t))},cn.groupBy=Va,cn.initial=function(t){return null!=t&&t.length?Fi(t,0,-1):[]},cn.intersection=xa,cn.intersectionBy=ya,cn.intersectionWith=ba,cn.invert=tu,cn.invertBy=eu,cn.invokeMap=qa,cn.iteratee=Lu,cn.keyBy=Ha,cn.keys=nu,cn.keysIn=iu,cn.map=$a,cn.mapKeys=function(t,e){var r={};return e=Io(e,3),Vn(t,function(t,n,i){Dn(r,e(t,n,i),t)}),r},cn.mapValues=function(t,e){var r={};return e=Io(e,3),Vn(t,function(t,n,i){Dn(r,n,e(t,n,i))}),r},cn.matches=function(t){return ci(On(t,c))},cn.matchesProperty=function(t,e){return di(t,On(e,c))},cn.memoize=as,cn.merge=ou,cn.mergeWith=au,cn.method=Du,cn.methodOf=Bu,cn.mixin=Pu,cn.negate=ss,cn.nthArg=function(t){return t=Ns(t),Ti(function(e){return vi(e,t)})},cn.omit=su,cn.omitBy=function(t,e){return hu(t,ss(Io(e)))},cn.once=function(t){return ts(2,t)},cn.orderBy=function(t,e,r,n){return null==t?[]:(gs(e)||(e=null==e?[]:[e]),gs(r=n?o:r)||(r=null==r?[]:[r]),gi(t,e,r))},cn.over=Iu,cn.overArgs=us,cn.overEvery=Uu,cn.overSome=Mu,cn.partial=hs,cn.partialRight=ls,cn.partition=Ja,cn.pick=uu,cn.pickBy=hu,cn.property=ju,cn.propertyOf=function(t){return function(e){return null==t?o:$n(t,e)}},cn.pull=wa,cn.pullAll=Aa,cn.pullAllBy=function(t,e,r){return t&&t.length&&e&&e.length?_i(t,e,Io(r,2)):t},cn.pullAllWith=function(t,e,r){return t&&t.length&&e&&e.length?_i(t,e,o,r):t},cn.pullAt=Ea,cn.range=ku,cn.rangeRight=Nu,cn.rearg=fs,cn.reject=function(t,e){return(gs(t)?Je:Yn)(t,ss(Io(e,3)))},cn.remove=function(t,e){var r=[];if(!t||!t.length)return r;var n=-1,i=[],o=t.length;for(e=Io(e,3);++n<o;){var a=t[n];e(a,n,t)&&(r.push(a),i.push(n))}return xi(t,i),r},cn.rest=function(t,e){if("function"!=typeof t)throw new ne(u);return Ti(t,e=e===o?e:Ns(e))},cn.reverse=Ca,cn.sampleSize=function(t,e,r){return e=(r?Vo(t,e,r):e===o)?1:Ns(e),(gs(t)?An:Ai)(t,e)},cn.set=function(t,e,r){return null==t?t:Ei(t,e,r)},cn.setWith=function(t,e,r,n){return n="function"==typeof n?n:o,null==t?t:Ei(t,e,r,n)},cn.shuffle=function(t){return(gs(t)?En:Ri)(t)},cn.slice=function(t,e,r){var n=null==t?0:t.length;return n?(r&&"number"!=typeof r&&Vo(t,e,r)?(e=0,r=n):(e=null==e?0:Ns(e),r=r===o?n:Ns(r)),Fi(t,e,r)):[]},cn.sortBy=Ka,cn.sortedUniq=function(t){return t&&t.length?Pi(t):[]},cn.sortedUniqBy=function(t,e){return t&&t.length?Pi(t,Io(e,2)):[]},cn.split=function(t,e,r){return r&&"number"!=typeof r&&Vo(t,e,r)&&(e=r=o),(r=r===o?M:r>>>0)?(t=Xs(t))&&("string"==typeof e||null!=e&&!Ds(e))&&!(e=Ii(e))&&Ar(t)?qi(Dr(t),0,r):t.split(e,r):[]},cn.spread=function(t,e){if("function"!=typeof t)throw new ne(u);return e=null==e?0:Gr(Ns(e),0),Ti(function(r){var n=r[e],i=qi(r,0,e);return n&&tr(i,n),ze(t,this,i)})},cn.tail=function(t){var e=null==t?0:t.length;return e?Fi(t,1,e):[]},cn.take=function(t,e,r){return t&&t.length?Fi(t,0,(e=r||e===o?1:Ns(e))<0?0:e):[]},cn.takeRight=function(t,e,r){var n=null==t?0:t.length;return n?Fi(t,(e=n-(e=r||e===o?1:Ns(e)))<0?0:e,n):[]},cn.takeRightWhile=function(t,e){return t&&t.length?ki(t,Io(e,3),!1,!0):[]},cn.takeWhile=function(t,e){return t&&t.length?ki(t,Io(e,3)):[]},cn.tap=function(t,e){return e(t),t},cn.throttle=function(t,e,r){var n=!0,i=!0;if("function"!=typeof t)throw new ne(u);return Cs(r)&&(n="leading"in r?!!r.leading:n,i="trailing"in r?!!r.trailing:i),ns(t,e,{leading:n,maxWait:e,trailing:i})},cn.thru=ka,cn.toArray=js,cn.toPairs=lu,cn.toPairsIn=fu,cn.toPath=function(t){return gs(t)?Qe(t,ha):Os(t)?[t]:eo(ua(Xs(t)))},cn.toPlainObject=Gs,cn.transform=function(t,e,r){var n=gs(t),i=n||ys(t)||Is(t);if(e=Io(e,4),null==r){var o=t&&t.constructor;r=i?n?new o:[]:Cs(t)&&ws(o)?dn(Re(t)):{}}return(i?qe:Vn)(t,function(t,n,i){return e(r,t,n,i)}),r},cn.unary=function(t){return Qa(t,1)},cn.union=Sa,cn.unionBy=Ra,cn.unionWith=Fa,cn.uniq=function(t){return t&&t.length?Ui(t):[]},cn.uniqBy=function(t,e){return t&&t.length?Ui(t,Io(e,2)):[]},cn.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Ui(t,o,e):[]},cn.unset=function(t,e){return null==t||Mi(t,e)},cn.unzip=La,cn.unzipWith=Da,cn.update=function(t,e,r){return null==t?t:ji(t,e,Xi(r))},cn.updateWith=function(t,e,r,n){return n="function"==typeof n?n:o,null==t?t:ji(t,e,Xi(r),n)},cn.values=cu,cn.valuesIn=function(t){return null==t?[]:mr(t,iu(t))},cn.without=Ba,cn.words=wu,cn.wrap=function(t,e){return hs(Xi(e),t)},cn.xor=Pa,cn.xorBy=Oa,cn.xorWith=Ia,cn.zip=Ua,cn.zipObject=function(t,e){return Yi(t||[],e||[],Sn)},cn.zipObjectDeep=function(t,e){return Yi(t||[],e||[],Ei)},cn.zipWith=Ma,cn.entries=lu,cn.entriesIn=fu,cn.extend=Vs,cn.extendWith=qs,Pu(cn,cn),cn.add=Gu,cn.attempt=Au,cn.camelCase=du,cn.capitalize=pu,cn.ceil=Xu,cn.clamp=function(t,e,r){return r===o&&(r=e,e=o),r!==o&&(r=(r=Ys(r))==r?r:0),e!==o&&(e=(e=Ys(e))==e?e:0),Pn(Ys(t),e,r)},cn.clone=function(t){return On(t,p)},cn.cloneDeep=function(t){return On(t,c|p)},cn.cloneDeepWith=function(t,e){return On(t,c|p,e="function"==typeof e?e:o)},cn.cloneWith=function(t,e){return On(t,p,e="function"==typeof e?e:o)},cn.conformsTo=function(t,e){return null==e||In(t,e,nu(e))},cn.deburr=vu,cn.defaultTo=function(t,e){return null==t||t!=t?e:t},cn.divide=zu,cn.endsWith=function(t,e,r){t=Xs(t),e=Ii(e);var n=t.length,i=r=r===o?n:Pn(Ns(r),0,n);return(r-=e.length)>=0&&t.slice(r,i)==e},cn.eq=cs,cn.escape=function(t){return(t=Xs(t))&&Et.test(t)?t.replace(wt,Tr):t},cn.escapeRegExp=function(t){return(t=Xs(t))&&Pt.test(t)?t.replace(Bt,"\\$&"):t},cn.every=function(t,e,r){var n=gs(t)?$e:Nn;return r&&Vo(t,e,r)&&(e=o),n(t,Io(e,3))},cn.find=Ya,cn.findIndex=va,cn.findKey=function(t,e){return or(t,Io(e,3),Vn)},cn.findLast=Ga,cn.findLastIndex=ga,cn.findLastKey=function(t,e){return or(t,Io(e,3),qn)},cn.floor=Vu,cn.forEach=Xa,cn.forEachRight=za,cn.forIn=function(t,e){return null==t?t:Xn(t,Io(e,3),iu)},cn.forInRight=function(t,e){return null==t?t:zn(t,Io(e,3),iu)},cn.forOwn=function(t,e){return t&&Vn(t,Io(e,3))},cn.forOwnRight=function(t,e){return t&&qn(t,Io(e,3))},cn.get=Zs,cn.gt=ds,cn.gte=ps,cn.has=function(t,e){return null!=t&&Yo(t,e,Qn)},cn.hasIn=Qs,cn.head=_a,cn.identity=Fu,cn.includes=function(t,e,r,n){t=_s(t)?t:cu(t),r=r&&!n?Ns(r):0;var i=t.length;return r<0&&(r=Gr(i+r,0)),Ps(t)?r<=i&&t.indexOf(e,r)>-1:!!i&&sr(t,e,r)>-1},cn.indexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=null==r?0:Ns(r);return i<0&&(i=Gr(n+i,0)),sr(t,e,i)},cn.inRange=function(t,e,r){return e=ks(e),r===o?(r=e,e=0):r=ks(r),function(t,e,r){return t>=Xr(e,r)&&t<Gr(e,r)}(t=Ys(t),e,r)},cn.invoke=ru,cn.isArguments=vs,cn.isArray=gs,cn.isArrayBuffer=ms,cn.isArrayLike=_s,cn.isArrayLikeObject=xs,cn.isBoolean=function(t){return!0===t||!1===t||Ss(t)&&Kn(t)==X},cn.isBuffer=ys,cn.isDate=bs,cn.isElement=function(t){return Ss(t)&&1===t.nodeType&&!Ls(t)},cn.isEmpty=function(t){if(null==t)return!0;if(_s(t)&&(gs(t)||"string"==typeof t||"function"==typeof t.splice||ys(t)||Is(t)||vs(t)))return!t.length;var e=Wo(t);if(e==J||e==rt)return!t.size;if(Jo(t))return!ui(t).length;for(var r in t)if(he.call(t,r))return!1;return!0},cn.isEqual=function(t,e){return ii(t,e)},cn.isEqualWith=function(t,e,r){var n=(r="function"==typeof r?r:o)?r(t,e):o;return n===o?ii(t,e,o,r):!!n},cn.isError=Ts,cn.isFinite=function(t){return"number"==typeof t&&Nr(t)},cn.isFunction=ws,cn.isInteger=As,cn.isLength=Es,cn.isMap=Rs,cn.isMatch=function(t,e){return t===e||oi(t,e,Mo(e))},cn.isMatchWith=function(t,e,r){return r="function"==typeof r?r:o,oi(t,e,Mo(e),r)},cn.isNaN=function(t){return Fs(t)&&t!=+t},cn.isNative=function(t){if($o(t))throw new i(s);return ai(t)},cn.isNil=function(t){return null==t},cn.isNull=function(t){return null===t},cn.isNumber=Fs,cn.isObject=Cs,cn.isObjectLike=Ss,cn.isPlainObject=Ls,cn.isRegExp=Ds,cn.isSafeInteger=function(t){return As(t)&&t>=-O&&t<=O},cn.isSet=Bs,cn.isString=Ps,cn.isSymbol=Os,cn.isTypedArray=Is,cn.isUndefined=function(t){return t===o},cn.isWeakMap=function(t){return Ss(t)&&Wo(t)==at},cn.isWeakSet=function(t){return Ss(t)&&Kn(t)==st},cn.join=function(t,e){return null==t?"":Wr.call(t,e)},cn.kebabCase=gu,cn.last=Ta,cn.lastIndexOf=function(t,e,r){var n=null==t?0:t.length;if(!n)return-1;var i=n;return r!==o&&(i=(i=Ns(r))<0?Gr(n+i,0):Xr(i,n-1)),e==e?function(t,e,r){for(var n=r+1;n--;)if(t[n]===e)return n;return n}(t,e,i):ar(t,hr,i,!0)},cn.lowerCase=mu,cn.lowerFirst=_u,cn.lt=Us,cn.lte=Ms,cn.max=function(t){return t&&t.length?Wn(t,Fu,Zn):o},cn.maxBy=function(t,e){return t&&t.length?Wn(t,Io(e,2),Zn):o},cn.mean=function(t){return lr(t,Fu)},cn.meanBy=function(t,e){return lr(t,Io(e,2))},cn.min=function(t){return t&&t.length?Wn(t,Fu,li):o},cn.minBy=function(t,e){return t&&t.length?Wn(t,Io(e,2),li):o},cn.stubArray=Wu,cn.stubFalse=Yu,cn.stubObject=function(){return{}},cn.stubString=function(){return""},cn.stubTrue=function(){return!0},cn.multiply=qu,cn.nth=function(t,e){return t&&t.length?vi(t,Ns(e)):o},cn.noConflict=function(){return Pe._===this&&(Pe._=pe),this},cn.noop=Ou,cn.now=Za,cn.pad=function(t,e,r){t=Xs(t);var n=(e=Ns(e))?Lr(t):0;if(!e||n>=e)return t;var i=(e-n)/2;return mo(Mr(i),r)+t+mo(Ur(i),r)},cn.padEnd=function(t,e,r){t=Xs(t);var n=(e=Ns(e))?Lr(t):0;return e&&n<e?t+mo(e-n,r):t},cn.padStart=function(t,e,r){t=Xs(t);var n=(e=Ns(e))?Lr(t):0;return e&&n<e?mo(e-n,r)+t:t},cn.parseInt=function(t,e,r){return r||null==e?e=0:e&&(e=+e),Vr(Xs(t).replace(It,""),e||0)},cn.random=function(t,e,r){if(r&&"boolean"!=typeof r&&Vo(t,e,r)&&(e=r=o),r===o&&("boolean"==typeof e?(r=e,e=o):"boolean"==typeof t&&(r=t,t=o)),t===o&&e===o?(t=0,e=1):(t=ks(t),e===o?(e=t,t=0):e=ks(e)),t>e){var n=t;t=e,e=n}if(r||t%1||e%1){var i=qr();return Xr(t+i*(e-t+Fe("1e-"+((i+"").length-1))),e)}return yi(t,e)},cn.reduce=function(t,e,r){var n=gs(t)?er:dr,i=arguments.length<3;return n(t,Io(e,4),r,i,jn)},cn.reduceRight=function(t,e,r){var n=gs(t)?rr:dr,i=arguments.length<3;return n(t,Io(e,4),r,i,kn)},cn.repeat=function(t,e,r){return e=(r?Vo(t,e,r):e===o)?1:Ns(e),bi(Xs(t),e)},cn.replace=function(){var t=arguments,e=Xs(t[0]);return t.length<3?e:e.replace(t[1],t[2])},cn.result=function(t,e,r){var n=-1,i=(e=zi(e,t)).length;for(i||(i=1,t=o);++n<i;){var a=null==t?o:t[ha(e[n])];a===o&&(n=i,a=r),t=ws(a)?a.call(t):a}return t},cn.round=Hu,cn.runInContext=t,cn.sample=function(t){return(gs(t)?wn:wi)(t)},cn.size=function(t){if(null==t)return 0;if(_s(t))return Ps(t)?Lr(t):t.length;var e=Wo(t);return e==J||e==rt?t.size:ui(t).length},cn.snakeCase=xu,cn.some=function(t,e,r){var n=gs(t)?nr:Li;return r&&Vo(t,e,r)&&(e=o),n(t,Io(e,3))},cn.sortedIndex=function(t,e){return Di(t,e)},cn.sortedIndexBy=function(t,e,r){return Bi(t,e,Io(r,2))},cn.sortedIndexOf=function(t,e){var r=null==t?0:t.length;if(r){var n=Di(t,e);if(n<r&&cs(t[n],e))return n}return-1},cn.sortedLastIndex=function(t,e){return Di(t,e,!0)},cn.sortedLastIndexBy=function(t,e,r){return Bi(t,e,Io(r,2),!0)},cn.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var r=Di(t,e,!0)-1;if(cs(t[r],e))return r}return-1},cn.startCase=yu,cn.startsWith=function(t,e,r){return t=Xs(t),r=null==r?0:Pn(Ns(r),0,t.length),e=Ii(e),t.slice(r,r+e.length)==e},cn.subtract=$u,cn.sum=function(t){return t&&t.length?pr(t,Fu):0},cn.sumBy=function(t,e){return t&&t.length?pr(t,Io(e,2)):0},cn.template=function(t,e,r){var n=cn.templateSettings;r&&Vo(t,e,r)&&(e=o),t=Xs(t),e=qs({},e,n,Eo);var i,a,s=qs({},e.imports,n.imports,Eo),u=nu(s),h=mr(s,u),l=0,f=e.interpolate||Jt,c="__p += '",d=ee((e.escape||Jt).source+"|"+f.source+"|"+(f===Rt?Yt:Jt).source+"|"+(e.evaluate||Jt).source+"|$","g"),p="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Ee+"]")+"\n";t.replace(d,function(e,r,n,o,s,u){return n||(n=o),c+=t.slice(l,u).replace(Kt,wr),r&&(i=!0,c+="' +\n__e("+r+") +\n'"),s&&(a=!0,c+="';\n"+s+";\n__p += '"),n&&(c+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),l=u+e.length,e}),c+="';\n";var v=e.variable;v||(c="with (obj) {\n"+c+"\n}\n"),c=(a?c.replace(xt,""):c).replace(yt,"$1").replace(bt,"$1;"),c="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+c+"return __p\n}";var g=Au(function(){return Zt(u,p+"return "+c).apply(o,h)});if(g.source=c,Ts(g))throw g;return g},cn.times=function(t,e){if((t=Ns(t))<1||t>O)return[];var r=M,n=Xr(t,M);e=Io(e),t-=M;for(var i=vr(n,e);++r<t;)e(r);return i},cn.toFinite=ks,cn.toInteger=Ns,cn.toLength=Ws,cn.toLower=function(t){return Xs(t).toLowerCase()},cn.toNumber=Ys,cn.toSafeInteger=function(t){return t?Pn(Ns(t),-O,O):0===t?t:0},cn.toString=Xs,cn.toUpper=function(t){return Xs(t).toUpperCase()},cn.trim=function(t,e,r){if((t=Xs(t))&&(r||e===o))return t.replace(Ot,"");if(!t||!(e=Ii(e)))return t;var n=Dr(t),i=Dr(e);return qi(n,xr(n,i),yr(n,i)+1).join("")},cn.trimEnd=function(t,e,r){if((t=Xs(t))&&(r||e===o))return t.replace(Ut,"");if(!t||!(e=Ii(e)))return t;var n=Dr(t);return qi(n,0,yr(n,Dr(e))+1).join("")},cn.trimStart=function(t,e,r){if((t=Xs(t))&&(r||e===o))return t.replace(It,"");if(!t||!(e=Ii(e)))return t;var n=Dr(t);return qi(n,xr(n,Dr(e))).join("")},cn.truncate=function(t,e){var r=S,n=R;if(Cs(e)){var i="separator"in e?e.separator:i;r="length"in e?Ns(e.length):r,n="omission"in e?Ii(e.omission):n}var a=(t=Xs(t)).length;if(Ar(t)){var s=Dr(t);a=s.length}if(r>=a)return t;var u=r-Lr(n);if(u<1)return n;var h=s?qi(s,0,u).join(""):t.slice(0,u);if(i===o)return h+n;if(s&&(u+=h.length-u),Ds(i)){if(t.slice(u).search(i)){var l,f=h;for(i.global||(i=ee(i.source,Xs(Gt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var c=l.index;h=h.slice(0,c===o?u:c)}}else if(t.indexOf(Ii(i),u)!=u){var d=h.lastIndexOf(i);d>-1&&(h=h.slice(0,d))}return h+n},cn.unescape=function(t){return(t=Xs(t))&&At.test(t)?t.replace(Tt,Br):t},cn.uniqueId=function(t){var e=++le;return Xs(t)+e},cn.upperCase=bu,cn.upperFirst=Tu,cn.each=Xa,cn.eachRight=za,cn.first=_a,Pu(cn,function(){var t={};return Vn(cn,function(e,r){he.call(cn.prototype,r)||(t[r]=e)}),t}(),{chain:!1}),cn.VERSION="4.17.11",qe(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){cn[t].placeholder=cn}),qe(["drop","take"],function(t,e){gn.prototype[t]=function(r){r=r===o?1:Gr(Ns(r),0);var n=this.__filtered__&&!e?new gn(this):this.clone();return n.__filtered__?n.__takeCount__=Xr(r,n.__takeCount__):n.__views__.push({size:Xr(r,M),type:t+(n.__dir__<0?"Right":"")}),n},gn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),qe(["filter","map","takeWhile"],function(t,e){var r=e+1,n=r==D||3==r;gn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Io(t,3),type:r}),e.__filtered__=e.__filtered__||n,e}}),qe(["head","last"],function(t,e){var r="take"+(e?"Right":"");gn.prototype[t]=function(){return this[r](1).value()[0]}}),qe(["initial","tail"],function(t,e){var r="drop"+(e?"":"Right");gn.prototype[t]=function(){return this.__filtered__?new gn(this):this[r](1)}}),gn.prototype.compact=function(){return this.filter(Fu)},gn.prototype.find=function(t){return this.filter(t).head()},gn.prototype.findLast=function(t){return this.reverse().find(t)},gn.prototype.invokeMap=Ti(function(t,e){return"function"==typeof t?new gn(this):this.map(function(r){return ri(r,t,e)})}),gn.prototype.reject=function(t){return this.filter(ss(Io(t)))},gn.prototype.slice=function(t,e){t=Ns(t);var r=this;return r.__filtered__&&(t>0||e<0)?new gn(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),e!==o&&(r=(e=Ns(e))<0?r.dropRight(-e):r.take(e-t)),r)},gn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},gn.prototype.toArray=function(){return this.take(M)},Vn(gn.prototype,function(t,e){var r=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),i=cn[n?"take"+("last"==e?"Right":""):e],a=n||/^find/.test(e);i&&(cn.prototype[e]=function(){var e=this.__wrapped__,s=n?[1]:arguments,u=e instanceof gn,h=s[0],l=u||gs(e),f=function(t){var e=i.apply(cn,tr([t],s));return n&&c?e[0]:e};l&&r&&"function"==typeof h&&1!=h.length&&(u=l=!1);var c=this.__chain__,d=!!this.__actions__.length,p=a&&!c,v=u&&!d;if(!a&&l){e=v?e:new gn(this);var g=t.apply(e,s);return g.__actions__.push({func:ka,args:[f],thisArg:o}),new vn(g,c)}return p&&v?t.apply(this,s):(g=this.thru(f),p?n?g.value()[0]:g.value():g)})}),qe(["pop","push","shift","sort","splice","unshift"],function(t){var e=ie[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);cn.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var i=this.value();return e.apply(gs(i)?i:[],t)}return this[r](function(r){return e.apply(gs(r)?r:[],t)})}}),Vn(gn.prototype,function(t,e){var r=cn[e];if(r){var n=r.name+"";(rn[n]||(rn[n]=[])).push({name:e,func:r})}}),rn[co(o,_).name]=[{name:"wrapper",func:o}],gn.prototype.clone=function(){var t=new gn(this.__wrapped__);return t.__actions__=eo(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=eo(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=eo(this.__views__),t},gn.prototype.reverse=function(){if(this.__filtered__){var t=new gn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},gn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,r=gs(t),n=e<0,i=r?t.length:0,o=function(t,e,r){for(var n=-1,i=r.length;++n<i;){var o=r[n],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Xr(e,t+a);break;case"takeRight":t=Gr(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,h=n?s:a-1,l=this.__iteratees__,f=l.length,c=0,d=Xr(u,this.__takeCount__);if(!r||!n&&i==u&&d==u)return Ni(t,this.__actions__);var p=[];t:for(;u--&&c<d;){for(var v=-1,g=t[h+=e];++v<f;){var m=l[v],_=m.iteratee,x=m.type,y=_(g);if(x==B)g=y;else if(!y){if(x==D)continue t;break t}}p[c++]=g}return p},cn.prototype.at=Na,cn.prototype.chain=function(){return ja(this)},cn.prototype.commit=function(){return new vn(this.value(),this.__chain__)},cn.prototype.next=function(){this.__values__===o&&(this.__values__=js(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},cn.prototype.plant=function(t){for(var e,r=this;r instanceof pn;){var n=fa(r);n.__index__=0,n.__values__=o,e?i.__wrapped__=n:e=n;var i=n;r=r.__wrapped__}return i.__wrapped__=t,e},cn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof gn){var e=t;return this.__actions__.length&&(e=new gn(this)),(e=e.reverse()).__actions__.push({func:ka,args:[Ca],thisArg:o}),new vn(e,this.__chain__)}return this.thru(Ca)},cn.prototype.toJSON=cn.prototype.valueOf=cn.prototype.value=function(){return Ni(this.__wrapped__,this.__actions__)},cn.prototype.first=cn.prototype.head,Me&&(cn.prototype[Me]=function(){return this}),cn}();Pe._=Pr,(i=function(){return Pr}.call(e,r,e,n))===o||(n.exports=i)}).call(this)}).call(this,r(28),r(71)(t))},function(t,e,r){"use strict";r.r(e);var n=r(39),i=r.n(n),o=r(40),a=r.n(o);console.log(i.a),document.body.appendChild(function(){let t=document.createElement("div");return t.innerHTML=a.a.join(["Hello","webpack"]," "),t}())},function(t,e,r){"use strict";function n(){this.program=null,this.fragmentSrc=["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"],this.vertexSrc=["attribute vec2 aVertexPosition;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform float alpha;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = aColor  * alpha;","}"]}var i=r(18),o=r(0);n.prototype.init=function(){var t=o.gl,e=i.program(t,this.vertexSrc,this.fragmentSrc);t.useProgram(e),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.colorAttribute=t.getAttribLocation(e,"aColor"),this.translationMatrix=t.getUniformLocation(e,"translationMatrix"),this.alpha=t.getUniformLocation(e,"alpha"),this.program=e},t.exports=n},function(t,e,r){"use strict";function n(){this.program=null,this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float alpha;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));","   gl_FragColor = gl_FragColor * alpha;","}"],this.vertexSrc=["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","varying vec2 vTextureCoord;","varying vec2 offsetVector;","varying float vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / projectionVector.y + 1.0 , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"]}var i=r(18),o=r(0);n.prototype.init=function(){var t=o.gl,e=i.program(t,this.vertexSrc,this.fragmentSrc);t.useProgram(e),this.uSampler=t.getUniformLocation(e,"uSampler"),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.colorAttribute=t.getAttribLocation(e,"aColor"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.aTextureCoord=t.getAttribLocation(e,"aTextureCoord"),this.translationMatrix=t.getUniformLocation(e,"translationMatrix"),this.alpha=t.getUniformLocation(e,"alpha"),this.program=e},t.exports=n},function(t,e,r){"use strict";function n(t){if(t instanceof Array||(t=Array.prototype.slice.call(arguments)),"number"==typeof t[0]){for(var e=[],r=0,n=t.length;n>r;r+=2)e.push(new i(t[r],t[r+1]));t=e}this.points=t}var i=r(3),o=n.prototype;o.clone=function(){for(var t=[],e=0;e<this.points.length;e++)t.push(this.points[e].clone());return new n(t)},o.contains=function(t,e){for(var r=!1,n=0,i=this.points.length-1;n<this.points.length;i=n++){var o=this.points[n].x,a=this.points[n].y,s=this.points[i].x,u=this.points[i].y;a>e!=u>e&&(s-o)*(e-a)/(u-a)+o>t&&(r=!r)}return r},t.exports=n},function(t,e,r){"use strict";function n(t,e,r){this.x=t||0,this.y=e||0,this.radius=r||0}var i=n.prototype;i.clone=function(){return new n(this.x,this.y,this.radius)},i.contains=function(t,e){if(this.radius<=0)return!1;var r=this.x-t,n=this.y-e;return this.radius*this.radius>=(r*=r)+(n*=n)},t.exports=n},function(t,e,r){"use strict";function n(t,e,r,n){this.x=t||0,this.y=e||0,this.width=r||0,this.height=n||0}var i=r(8),o=n.prototype;o.clone=function(){return new n(this.x,this.y,this.width,this.height)},o.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var r=(t-this.x)/this.width-.5,n=(e-this.y)/this.height-.5;return.25>(r*=r)+(n*=n)},o.getBounds=function(){return new i(this.x,this.y,this.width,this.height)},t.exports=n},function(t,e,r){"use strict";function n(t){i.call(this,t[0]),this.textures=t,this.animationSpeed=1,this.loop=!0,this.onComplete=null,this.currentFrame=0,this.playing=!1}var i=r(7),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"totalFrames",{get:function(){return this.textures.length}}),o.stop=function(){this.playing=!1},o.play=function(){this.playing=!0},o.gotoAndStop=function(t){this.playing=!1,this.currentFrame=t;var e=this.currentFrame+.5|0;this.setTexture(this.textures[e%this.textures.length])},o.gotoAndPlay=function(t){this.currentFrame=t,this.playing=!0},o.updateTransform=function(){if(i.prototype.updateTransform.call(this),this.playing){this.currentFrame+=this.animationSpeed;var t=this.currentFrame+.5|0;this.loop||t<this.textures.length?this.setTexture(this.textures[t%this.textures.length]):t>=this.textures.length&&(this.gotoAndStop(this.textures.length-1),this.onComplete&&this.onComplete())}},t.exports=n},function(t,e,r){"use strict";function n(){this.blurXFilter=new i,this.blurYFilter=new o,this.passes=[this.blurXFilter,this.blurYFilter]}var i=r(30),o=r(31),a=n.prototype;Object.defineProperty(a,"blur",{get:function(){return this.blurXFilter.blur},set:function(t){this.blurXFilter.blur=this.blurYFilter.blur=t}}),Object.defineProperty(a,"blurX",{get:function(){return this.blurXFilter.blur},set:function(t){this.blurXFilter.blur=t}}),Object.defineProperty(a,"blurY",{get:function(){return this.blurYFilter.blur},set:function(t){this.blurYFilter.blur=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={matrix:{type:"mat4",value:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float invert;","uniform mat4 matrix;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * matrix;","   gl_FragColor = gl_FragColor * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"matrix",{get:function(){return this.uniforms.matrix.value},set:function(t){this.uniforms.matrix.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={step:{type:"1f",value:5}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","uniform float step;","void main(void) {","   vec4 color = texture2D(uSampler, vTextureCoord);","   color = floor(color * step) / step;","   gl_FragColor = color * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"step",{get:function(){return this.uniforms.step.value},set:function(t){this.uniforms.step.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);","    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);","    if (lum < 1.00) {","        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.75) {","        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.50) {","        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.3) {","        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),t.exports=n},function(t,e,r){"use strict";function n(t){i.call(this),this.passes=[this],t.baseTexture._powerOf2=!0,this.uniforms={displacementMap:{type:"sampler2D",value:t},scale:{type:"2f",value:{x:30,y:30}},offset:{type:"2f",value:{x:0,y:0}},mapDimensions:{type:"2f",value:{x:1,y:5112}},dimensions:{type:"4fv",value:[0,0,0,0]}},t.baseTexture.hasLoaded?(this.uniforms.mapDimensions.value.x=t.width,this.uniforms.mapDimensions.value.y=t.height):(this.boundLoadedFunction=this.onTextureLoaded.bind(this),t.baseTexture.on("loaded",this.boundLoadedFunction)),this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D displacementMap;","uniform sampler2D uSampler;","uniform vec2 scale;","uniform vec2 offset;","uniform vec4 dimensions;","uniform vec2 mapDimensions;","void main(void) {","   vec2 mapCords = vTextureCoord.xy;","   mapCords += (dimensions.zw + offset)/ dimensions.xy ;","   mapCords.y *= -1.0;","   mapCords.y += 1.0;","   vec2 matSample = texture2D(displacementMap, mapCords).xy;","   matSample -= 0.5;","   matSample *= scale;","   matSample /= mapDimensions;","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x + matSample.x, vTextureCoord.y + matSample.y));","   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb, 1.0);","   vec2 cord = vTextureCoord;","   gl_FragColor = gl_FragColor * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});o.onTextureLoaded=function(){this.uniforms.mapDimensions.value.x=this.uniforms.displacementMap.value.width,this.uniforms.mapDimensions.value.y=this.uniforms.displacementMap.value.height,this.uniforms.displacementMap.value.baseTexture.off("loaded",this.boundLoadedFunction)},Object.defineProperty(o,"map",{get:function(){return this.uniforms.displacementMap.value},set:function(t){this.uniforms.displacementMap.value=t}}),Object.defineProperty(o,"scale",{get:function(){return this.uniforms.scale.value},set:function(t){this.uniforms.scale.value=t}}),Object.defineProperty(o,"offset",{get:function(){return this.uniforms.offset.value},set:function(t){this.uniforms.offset.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={scale:{type:"1f",value:1},angle:{type:"1f",value:5},dimensions:{type:"4fv",value:[0,0,0,0]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform vec4 dimensions;","uniform sampler2D uSampler;","uniform float angle;","uniform float scale;","float pattern() {","   float s = sin(angle), c = cos(angle);","   vec2 tex = vTextureCoord * dimensions.xy;","   vec2 point = vec2(","       c * tex.x - s * tex.y,","       s * tex.x + c * tex.y","   ) * scale;","   return (sin(point.x) * sin(point.y)) * 4.0;","}","void main() {","   vec4 color = texture2D(uSampler, vTextureCoord);","   float average = (color.r + color.g + color.b) / 3.0;","   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"scale",{get:function(){return this.uniforms.scale.value},set:function(t){this.dirty=!0,this.uniforms.scale.value=t}}),Object.defineProperty(o,"angle",{get:function(){return this.uniforms.angle.value},set:function(t){this.dirty=!0,this.uniforms.angle.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={gray:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","uniform float gray;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.2126*gl_FragColor.r + 0.7152*gl_FragColor.g + 0.0722*gl_FragColor.b), gray);","   gl_FragColor = gl_FragColor * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"gray",{get:function(){return this.uniforms.gray.value},set:function(t){this.uniforms.gray.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={invert:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float invert;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix( (vec3(1)-gl_FragColor.rgb) * gl_FragColor.a, gl_FragColor.rgb, 1.0 - invert);","   gl_FragColor = gl_FragColor * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"invert",{get:function(){return this.uniforms.invert.value},set:function(t){this.uniforms.invert.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={invert:{type:"1f",value:0},dimensions:{type:"4fv",value:new Float32Array([1e4,100,10,10])},pixelSize:{type:"2f",value:{x:10,y:10}}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform vec2 testDim;","uniform vec4 dimensions;","uniform vec2 pixelSize;","uniform sampler2D uSampler;","void main(void) {","   vec2 coord = vTextureCoord;","   vec2 size = dimensions.xy/pixelSize;","   vec2 color = floor( ( vTextureCoord * size ) ) / size + pixelSize/dimensions.xy * 0.5;","   gl_FragColor = texture2D(uSampler, color);","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"size",{get:function(){return this.uniforms.pixelSize.value},set:function(t){this.dirty=!0,this.uniforms.pixelSize.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={red:{type:"2f",value:{x:20,y:20}},green:{type:"2f",value:{x:-20,y:20}},blue:{type:"2f",value:{x:20,y:-20}},dimensions:{type:"4fv",value:[0,0,0,0]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform vec2 red;","uniform vec2 green;","uniform vec2 blue;","uniform vec4 dimensions;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/dimensions.xy).r;","   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/dimensions.xy).g;","   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/dimensions.xy).b;","   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"angle",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={sepia:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float sepia;","uniform sampler2D uSampler;","const mat3 sepiaMatrix = mat3(0.3588, 0.7044, 0.1368, 0.2990, 0.5870, 0.1140, 0.2392, 0.4696, 0.0912);","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb * sepiaMatrix, sepia);","   gl_FragColor = gl_FragColor * vColor;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"sepia",{get:function(){return this.uniforms.sepia.value},set:function(t){this.uniforms.sepia.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","uniform sampler2D uSampler;","const vec2 delta = vec2(1.0/10.0, 0.0);","float random(vec3 scale, float seed) {","   return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);","}","void main(void) {","   vec4 color = vec4(0.0);","   float total = 0.0;","   float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);","   for (float t = -30.0; t <= 30.0; t++) {","       float percent = (t + offset - 0.5) / 30.0;","       float weight = 1.0 - abs(percent);","       vec4 sample = texture2D(uSampler, vTextureCoord + delta * percent);","       sample.rgb *= sample.a;","       color += sample * weight;","       total += weight;","   }","   gl_FragColor = color / total;","   gl_FragColor.rgb /= gl_FragColor.a + 0.00001;","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"blur",{get:function(){return this.uniforms.blur.value},set:function(t){this.uniforms.blur.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(){i.call(this),this.passes=[this],this.uniforms={radius:{type:"1f",value:.5},angle:{type:"1f",value:5},offset:{type:"2f",value:{x:.5,y:.5}}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform vec4 dimensions;","uniform sampler2D uSampler;","uniform float radius;","uniform float angle;","uniform vec2 offset;","void main(void) {","   vec2 coord = vTextureCoord - offset;","   float distance = length(coord);","   if (distance < radius) {","       float ratio = (radius - distance) / radius;","       float angleMod = ratio * ratio * angle;","       float s = sin(angleMod);","       float c = cos(angleMod);","       coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);","   }","   gl_FragColor = texture2D(uSampler, coord+offset);","}"]}var i=r(1),o=n.prototype=Object.create(i.prototype,{constructor:{value:n}});Object.defineProperty(o,"offset",{get:function(){return this.uniforms.offset.value},set:function(t){this.dirty=!0,this.uniforms.offset.value=t}}),Object.defineProperty(o,"radius",{get:function(){return this.uniforms.radius.value},set:function(t){this.dirty=!0,this.uniforms.radius.value=t}}),Object.defineProperty(o,"angle",{get:function(){return this.uniforms.angle.value},set:function(t){this.dirty=!0,this.uniforms.angle.value=t}}),t.exports=n},function(t,e,r){"use strict";function n(t,e){this.canvas=i.createCanvas(),this.context=this.canvas.getContext("2d"),s.call(this,u.fromCanvas(this.canvas)),this.setText(t),this.setStyle(e),this.updateText(),this.dirty=!1}var i=r(2),o=r(0),a=r(3),s=r(7),u=r(4),h=n.prototype=Object.create(s.prototype,{constructor:{value:n}});h.setStyle=function(t){(t=t||{}).font=t.font||"bold 20pt Arial",t.fill=t.fill||"black",t.align=t.align||"left",t.stroke=t.stroke||"black",t.strokeThickness=t.strokeThickness||0,t.wordWrap=t.wordWrap||!1,t.wordWrapWidth=t.wordWrapWidth||100,this.style=t,this.dirty=!0},h.setText=function(t){this.text=t.toString()||" ",this.dirty=!0},h.updateText=function(){this.context.font=this.style.font;var t=this.text;this.style.wordWrap&&(t=this.wordWrap(this.text));for(var e=t.split(/(?:\r\n|\r|\n)/),r=[],n=0,i=0;i<e.length;i++){var o=this.context.measureText(e[i]).width;r[i]=o,n=Math.max(n,o)}this.canvas.width=n+this.style.strokeThickness;var s=this.determineFontHeight("font: "+this.style.font+";")+this.style.strokeThickness;for(this.canvas.height=s*e.length,this.context.fillStyle=this.style.fill,this.context.font=this.style.font,this.context.strokeStyle=this.style.stroke,this.context.lineWidth=this.style.strokeThickness,this.context.textBaseline="top",i=0;i<e.length;i++){var u=new a(this.style.strokeThickness/2,this.style.strokeThickness/2+i*s);"right"===this.style.align?u.x+=n-r[i]:"center"===this.style.align&&(u.x+=(n-r[i])/2),this.style.stroke&&this.style.strokeThickness&&this.context.strokeText(e[i],u.x,u.y),this.style.fill&&this.context.fillText(e[i],u.x,u.y)}this.updateTexture()},h.updateTexture=function(){this.texture.baseTexture.width=this.canvas.width,this.texture.baseTexture.height=this.canvas.height,this.texture.frame.width=this.canvas.width,this.texture.frame.height=this.canvas.height,this._width=this.canvas.width,this._height=this.canvas.height,o.texturesToUpdate.push(this.texture.baseTexture)},h.updateTransform=function(){this.dirty&&(this.updateText(),this.dirty=!1),s.prototype.updateTransform.call(this)},h.determineFontHeight=function(t){var e=n.heightCache[t];if(!e){var r=i.document.getElementsByTagName("body")[0],o=i.document.createElement("div"),a=i.document.createTextNode("M");o.appendChild(a),o.setAttribute("style",t+";position:absolute;top:0;left:0"),r.appendChild(o),e=o.offsetHeight,n.heightCache[t]=e,r.removeChild(o)}return e},h.wordWrap=function(t){for(var e="",r=t.split("\n"),n=0;n<r.length;n++){for(var i=this.style.wordWrapWidth,o=r[n].split(" "),a=0;a<o.length;a++){var s=this.context.measureText(o[a]).width,u=s+this.context.measureText(" ").width;u>i?(a>0&&(e+="\n"),e+=o[a]+" ",i=this.style.wordWrapWidth-s):(i-=u,e+=o[a]+" ")}e+="\n"}return e},h.destroy=function(t){t&&this.texture.destroy()},n.heightCache={},t.exports=n},function(t,e,r){"use strict";function n(t){s.call(this),this.worldTransform=o.create(),this.interactive=!0,this.interactionManager=new u(this),this.dirty=!0,this.__childrenAdded=[],this.__childrenRemoved=[],this.stage=this,this.stage.hitArea=new h(0,0,1e5,1e5),this.setBackgroundColor(t),this.worldVisible=!0}var i=r(0),o=r(9).mat3,a=r(34).hex2rgb,s=r(6),u=r(33),h=r(8),l=n.prototype=Object.create(s.prototype,{constructor:{value:n}});l.setInteractionDelegate=function(t){this.interactionManager.setTargetDomElement(t)},l.updateTransform=function(){this.worldAlpha=1,this.vcount=i.visibleCount;for(var t=0,e=this.children.length;e>t;t++)this.children[t].updateTransform();this.dirty&&(this.dirty=!1,this.interactionManager.dirty=!0),this.interactive&&this.interactionManager.update()},l.setBackgroundColor=function(t){this.backgroundColor=t||0,this.backgroundColorSplit=a(this.backgroundColor);var e=this.backgroundColor.toString(16);e="000000".substr(0,6-e.length)+e,this.backgroundColorString="#"+e},l.getMousePosition=function(){return this.interactionManager.mouse.global},t.exports=n},function(t,e,r){"use strict";var n=r(2),i=r(20),o=r(36);t.exports=function(t,e,r,a,s){t||(t=800),e||(e=600);var u=function(){try{var t=n.createCanvas();return!!n.window.WebGLRenderingContext&&(t.getContext("webgl")||t.getContext("experimental-webgl"))}catch(t){return!1}}();u&&n.navigator&&(u=!(-1!==n.navigator.userAgent.toLowerCase().indexOf("trident")));return u?new o(t,e,r,a,s):new i(t,e,r,a)}},function(t,e,r){"use strict";function n(t,e){var r=o.gl;this.frameBuffer=r.createFramebuffer(),this.texture=r.createTexture(),r.bindTexture(r.TEXTURE_2D,this.texture),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer),r.bindFramebuffer(r.FRAMEBUFFER,this.frameBuffer),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,this.texture,0),this.resize(t,e)}function i(t){this.transparent=t,this.filterStack=[],this.texturePool=[],this.offsetX=0,this.offsetY=0,this.initShaderBuffers()}var o=r(0),a=r(7),s=r(10),u=r(29);n.prototype.resize=function(t,e){if(this.width!==t||this.height!==e){this.width=t,this.height=e;var r=o.gl;r.bindTexture(r.TEXTURE_2D,this.texture),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t,e,0,r.RGBA,r.UNSIGNED_BYTE,null)}};var h=i.prototype;h.begin=function(t,e){this.width=2*t.x,this.height=2*-t.y,this.buffer=e},h.pushFilter=function(t){var e=o.gl;this.filterStack.push(t);var r=t.filterPasses[0];this.offsetX+=t.target.filterArea.x,this.offsetY+=t.target.filterArea.y;var i=this.texturePool.pop();i?i.resize(this.width,this.height):i=new n(this.width,this.height),e.bindTexture(e.TEXTURE_2D,i.texture),this.getBounds(t.target);var a=t.target.filterArea,s=r.padding;a.x-=s,a.y-=s,a.width+=2*s,a.height+=2*s,a.x<0&&(a.x=0),a.width>this.width&&(a.width=this.width),a.y<0&&(a.y=0),a.height>this.height&&(a.height=this.height),e.bindFramebuffer(e.FRAMEBUFFER,i.frameBuffer),e.viewport(0,0,a.width,a.height),o.projection.x=a.width/2,o.projection.y=-a.height/2,o.offset.x=-a.x,o.offset.y=-a.y,e.uniform2f(o.defaultShader.projectionVector,a.width/2,-a.height/2),e.uniform2f(o.defaultShader.offsetVector,-a.x,-a.y),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),t._glFilterTexture=i},h.popFilter=function(){var t=o.gl,e=this.filterStack.pop(),r=e.target.filterArea,i=e._glFilterTexture;if(e.filterPasses.length>1){t.viewport(0,0,r.width,r.height),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),this.vertexArray[0]=0,this.vertexArray[1]=r.height,this.vertexArray[2]=r.width,this.vertexArray[3]=r.height,this.vertexArray[4]=0,this.vertexArray[5]=0,this.vertexArray[6]=r.width,this.vertexArray[7]=0,t.bufferSubData(t.ARRAY_BUFFER,0,this.vertexArray),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),this.uvArray[2]=r.width/this.width,this.uvArray[5]=r.height/this.height,this.uvArray[6]=r.width/this.width,this.uvArray[7]=r.height/this.height,t.bufferSubData(t.ARRAY_BUFFER,0,this.uvArray);var a=i,s=this.texturePool.pop();s||(s=new n(this.width,this.height)),t.bindFramebuffer(t.FRAMEBUFFER,s.frameBuffer),t.clear(t.COLOR_BUFFER_BIT),t.disable(t.BLEND);for(var u=0;u<e.filterPasses.length-1;u++){var h=e.filterPasses[u];t.bindFramebuffer(t.FRAMEBUFFER,s.frameBuffer),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,a.texture),this.applyFilterPass(h,r,r.width,r.height);var l=a;a=s,s=l}t.enable(t.BLEND),i=a,this.texturePool.push(s)}var f=e.filterPasses[e.filterPasses.length-1];this.offsetX-=r.x,this.offsetY-=r.y;var c=this.width,d=this.height,p=0,v=0,g=this.buffer;if(0===this.filterStack.length)t.colorMask(!0,!0,!0,this.transparent);else{var m=this.filterStack[this.filterStack.length-1];c=(r=m.target.filterArea).width,d=r.height,p=r.x,v=r.y,g=m._glFilterTexture.frameBuffer}o.projection.x=c/2,o.projection.y=-d/2,o.offset.x=p,o.offset.y=v;var _=(r=e.target.filterArea).x-p,x=r.y-v;t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),this.vertexArray[0]=_,this.vertexArray[1]=x+r.height,this.vertexArray[2]=_+r.width,this.vertexArray[3]=x+r.height,this.vertexArray[4]=_,this.vertexArray[5]=x,this.vertexArray[6]=_+r.width,this.vertexArray[7]=x,t.bufferSubData(t.ARRAY_BUFFER,0,this.vertexArray),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),this.uvArray[2]=r.width/this.width,this.uvArray[5]=r.height/this.height,this.uvArray[6]=r.width/this.width,this.uvArray[7]=r.height/this.height,t.bufferSubData(t.ARRAY_BUFFER,0,this.uvArray),t.viewport(0,0,c,d),t.bindFramebuffer(t.FRAMEBUFFER,g),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,i.texture),this.applyFilterPass(f,r,c,d),t.useProgram(o.defaultShader.program),t.uniform2f(o.defaultShader.projectionVector,c/2,-d/2),t.uniform2f(o.defaultShader.offsetVector,-p,-v),this.texturePool.push(i),e._glFilterTexture=null},h.applyFilterPass=function(t,e,r,n){var i=o.gl,a=t.shader;a||((a=new u).fragmentSrc=t.fragmentSrc,a.uniforms=t.uniforms,a.init(),t.shader=a),i.useProgram(a.program),i.uniform2f(a.projectionVector,r/2,-n/2),i.uniform2f(a.offsetVector,0,0),t.uniforms.dimensions&&(t.uniforms.dimensions.value[0]=this.width,t.uniforms.dimensions.value[1]=this.height,t.uniforms.dimensions.value[2]=this.vertexArray[0],t.uniforms.dimensions.value[3]=this.vertexArray[5]),a.syncUniforms(),i.bindBuffer(i.ARRAY_BUFFER,this.vertexBuffer),i.vertexAttribPointer(a.aVertexPosition,2,i.FLOAT,!1,0,0),i.bindBuffer(i.ARRAY_BUFFER,this.uvBuffer),i.vertexAttribPointer(a.aTextureCoord,2,i.FLOAT,!1,0,0),i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,this.indexBuffer),i.drawElements(i.TRIANGLES,6,i.UNSIGNED_SHORT,0)},h.initShaderBuffers=function(){var t=o.gl;this.vertexBuffer=t.createBuffer(),this.uvBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),this.vertexArray=new Float32Array([0,0,1,0,0,1,1,1]),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertexArray,t.STATIC_DRAW),this.uvArray=new Float32Array([0,0,1,0,0,1,1,1]),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),t.bufferData(t.ARRAY_BUFFER,this.uvArray,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),t.STATIC_DRAW)},h.getBounds=function(t){var e,r,n,i,o,u,h,l,f,c,d,p,v,g,m,_,x,y,b,T,w,A,E,C,S=t.first,R=t.last._iNext,F=-1/0,L=-1/0,D=1/0,B=1/0;do{if(S.visible)if(S instanceof a)r=S.texture.frame.width,n=S.texture.frame.height,u=r*(1-(i=S.anchor.x)),h=r*-i,l=n*(1-(o=S.anchor.y)),f=n*-o,c=!0;else if(S instanceof s){S.updateFilterBounds();var P=S.bounds;r=P.width,n=P.height,u=P.x,h=P.x+P.width,l=P.y,f=P.y+P.height,c=!0}c&&(d=(e=S.worldTransform)[0],p=e[3],v=e[1],g=e[4],m=e[2],w=g*f+p*h+(_=e[5]),y=d*u+v*f+m,A=g*f+p*u+_,b=d*u+v*l+m,E=g*l+p*u+_,T=d*h+v*l+m,C=g*l+p*h+_,D=(D=(D=(D=D>(x=d*h+v*f+m)?x:D)>y?y:D)>b?b:D)>T?T:D,B=(B=(B=(B=B>w?w:B)>A?A:B)>E?E:B)>C?C:B,F=T>(F=b>(F=y>(F=x>F?x:F)?y:F)?b:F)?T:F,L=C>(L=E>(L=A>(L=w>L?w:L)?A:L)?E:L)?C:L),c=!1,S=S._iNext}while(S!==R);t.filterArea.x=D,t.filterArea.y=B,t.filterArea.width=F-D,t.filterArea.height=L-B},t.exports=i},function(t,e,r){"use strict";function n(t,e){i.call(this,t),this.points=e;try{this.verticies=new Float32Array(4*e.length),this.uvs=new Float32Array(4*e.length),this.colors=new Float32Array(2*e.length),this.indices=new Uint16Array(2*e.length)}catch(t){this.verticies=new Array(4*e.length),this.uvs=new Array(4*e.length),this.colors=new Array(2*e.length),this.indices=new Array(2*e.length)}this.refresh()}var i=r(16),o=r(6),a=n.prototype=Object.create(i.prototype,{constructor:{value:n}});a.refresh=function(){var t=this.points;if(!(t.length<1)){var e=this.uvs,r=(t[0],this.indices),n=this.colors;this.count-=.2,e[0]=0,e[1]=1,e[2]=0,e[3]=1,n[0]=1,n[1]=1,r[0]=0,r[1]=1;for(var i,o,a,s=t.length,u=1;s>u;u++)i=t[u],a=u/(s-1),e[o=4*u]=a,e[o+1]=0,e[o+2]=a,e[o+3]=1,n[o=2*u]=1,n[o+1]=1,r[o=2*u]=o,r[o+1]=o+1,i}},a.updateTransform=function(){var t=this.points;if(!(t.length<1)){var e,r=t[0],n={x:0,y:0};this.count-=.2;var i=this.verticies;i[0]=r.x+n.x,i[1]=r.y+n.y,i[2]=r.x-n.x,i[3]=r.y-n.y;for(var a,s,u,h,l=t.length,f=1;l>f;f++)a=t[f],s=4*f,e=f<t.length-1?t[f+1]:a,n.y=-(e.x-r.x),n.x=e.y-r.y,10*(1-f/(l-1))>1&&1,u=Math.sqrt(n.x*n.x+n.y*n.y),h=this.texture.height/2,n.x/=u,n.y/=u,n.x*=h,n.y*=h,i[s]=a.x+n.x,i[s+1]=a.y+n.y,i[s+2]=a.x-n.x,i[s+3]=a.y-n.y,r=a;o.prototype.updateTransform.call(this)}},a.setTexture=function(t){this.texture=t,this.updateFrame=!0},t.exports=n},function(t,e,r){"use strict";function n(t,e){l.call(this),this.width=t||100,this.height=e||100,this.identityMatrix=o.create(),this.frame=new h(0,0,this.width,this.height),i.gl?this.initWebGL():this.initCanvas()}var i=r(0),o=r(9).mat3,a=r(4),s=r(12),u=r(3),h=r(8),l=r(5),f=r(20),c=r(24),d=n.prototype=Object.create(a.prototype,{constructor:{value:n}});d.initWebGL=function(){var t=i.gl;this.glFramebuffer=t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,this.glFramebuffer),this.glFramebuffer.width=this.width,this.glFramebuffer.height=this.height,this.baseTexture=new s,this.baseTexture.width=this.width,this.baseTexture.height=this.height,this.baseTexture._glTexture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this.baseTexture._glTexture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,this.width,this.height,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),this.baseTexture.isRender=!0,t.bindFramebuffer(t.FRAMEBUFFER,this.glFramebuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.baseTexture._glTexture,0),this.projection=new u(this.width/2,-this.height/2),this.render=this.renderWebGL},d.resize=function(t,e){if(this.width=t,this.height=e,i.gl){this.projection.x=this.width/2,this.projection.y=-this.height/2;var r=i.gl;r.bindTexture(r.TEXTURE_2D,this.baseTexture._glTexture),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,this.width,this.height,0,r.RGBA,r.UNSIGNED_BYTE,null)}else this.frame.width=this.width,this.frame.height=this.height,this.renderer.resize(this.width,this.height)},d.initCanvas=function(){this.renderer=new f(this.width,this.height,null,0),this.baseTexture=new s(this.renderer.view),this.frame=new h(0,0,this.width,this.height),this.render=this.renderCanvas},d.renderWebGL=function(t,e,r){var n=i.gl;n.colorMask(!0,!0,!0,!0),n.viewport(0,0,this.width,this.height),n.bindFramebuffer(n.FRAMEBUFFER,this.glFramebuffer),r&&(n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT));var a=t.children,s=t.worldTransform;t.worldTransform=o.create(),t.worldTransform[4]=-1,t.worldTransform[5]=-2*this.projection.y,e&&(t.worldTransform[2]=e.x,t.worldTransform[5]-=e.y),i.visibleCount++,t.vcount=i.visibleCount;for(var u=0,h=a.length;h>u;u++)a[u].updateTransform();var l=t.__renderGroup;l?t===l.root?l.render(this.projection,this.glFramebuffer):l.renderSpecific(t,this.projection,this.glFramebuffer):(this.renderGroup||(this.renderGroup=new c(n)),this.renderGroup.setRenderable(t),this.renderGroup.render(this.projection,this.glFramebuffer)),t.worldTransform=s},d.renderCanvas=function(t,e,r){var n=t.children;t.worldTransform=o.create(),e&&(t.worldTransform[2]=e.x,t.worldTransform[5]=e.y);for(var i=0,a=n.length;a>i;i++)n[i].updateTransform();r&&this.renderer.context.clearRect(0,0,this.width,this.height),this.renderer.renderDisplayObject(t),this.renderer.context.setTransform(1,0,0,1,0,0)},t.exports=n},function(t,e,r){"use strict";function n(t,e){a.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.texture=null,this.frames={}}var i=r(27),o=r(17),a=r(5),s=r(4),u=n.prototype;u.load=function(){var t=this,e=new i(this.url,this.crossorigin);e.addEventListener("loaded",function(e){t.json=e.content.json,t.onJSONLoaded()}),e.load()},u.onJSONLoaded=function(){var t=this,e=this.baseUrl+this.json.meta.image,r=new o(e,this.crossorigin),n=this.json.frames;for(var i in this.texture=r.texture.baseTexture,r.addEventListener("loaded",function(){t.onLoaded()}),n){var a=n[i].frame;a&&(s.cache[i]=new s(this.texture,{x:a.x,y:a.y,width:a.w,height:a.h}),n[i].trimmed&&(s.cache[i].realSize=n[i].spriteSourceSize,s.cache[i].trim.x=0))}r.load()},u.onLoaded=function(){this.dispatchEvent({type:"loaded",content:this})},t.exports=n},function(t,e,r){"use strict";function n(t,e){s.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.texture=null}var i=r(13),o=r(17),a=r(8),s=r(5),u=r(32),h=r(4),l=r(2),f=n.prototype;f.handleEvent=function(t){switch(t.type){case"load":this.onXMLLoaded();break;default:this.onError()}},f.load=function(){this.request=l.createRequest(),this.request.addEventListener("load",this),this.request.addEventListener("error",this),this.request.open("GET",this.url,!0),this.request.overrideMimeType&&this.request.overrideMimeType("application/xml"),this.request.send(null)},f.onXMLLoaded=function(){var t=this.baseUrl+this.request.responseXML.getElementsByTagName("page")[0].attributes.getNamedItem("file").nodeValue,e=new o(t,this.crossorigin);this.texture=e.texture.baseTexture;var r={},n=this.request.responseXML.getElementsByTagName("info")[0],i=this.request.responseXML.getElementsByTagName("common")[0];r.font=n.attributes.getNamedItem("face").nodeValue,r.size=parseInt(n.attributes.getNamedItem("size").nodeValue,10),r.lineHeight=parseInt(i.attributes.getNamedItem("lineHeight").nodeValue,10),r.chars={};for(var s=this.request.responseXML.getElementsByTagName("char"),l=0;l<s.length;l++){var f=parseInt(s[l].attributes.getNamedItem("id").nodeValue,10),c=new a(parseInt(s[l].attributes.getNamedItem("x").nodeValue,10),parseInt(s[l].attributes.getNamedItem("y").nodeValue,10),parseInt(s[l].attributes.getNamedItem("width").nodeValue,10),parseInt(s[l].attributes.getNamedItem("height").nodeValue,10));r.chars[f]={xOffset:parseInt(s[l].attributes.getNamedItem("xoffset").nodeValue,10),yOffset:parseInt(s[l].attributes.getNamedItem("yoffset").nodeValue,10),xAdvance:parseInt(s[l].attributes.getNamedItem("xadvance").nodeValue,10),kerning:{},texture:h.cache[f]=new h(this.texture,c)}}var d=this.request.responseXML.getElementsByTagName("kerning");for(l=0;l<d.length;l++){var p=parseInt(d[l].attributes.getNamedItem("first").nodeValue,10),v=parseInt(d[l].attributes.getNamedItem("second").nodeValue,10),g=parseInt(d[l].attributes.getNamedItem("amount").nodeValue,10);r.chars[v].kerning[p]=g}u.fonts[r.font]=r;var m=this;e.addEventListener("loaded",function(){m.onLoaded()}),e.load()},f.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:"loaded",content:this})},f.onError=function(){this.dispatchEvent({type:"error",content:this})},i.registerLoaderType("xml",n),i.registerLoaderType("fnt",n),t.exports=n},function(t,e,r){"use strict";function n(t,e){a.call(this),this.url=t,this.crossorigin=e,this.loaded=!1}var i=r(13),o=r(27),a=r(5),s=r(25),u=r(26).SkeletonJson,h=n.prototype;h.load=function(){var t=this,e=new o(this.url,this.crossorigin);e.addEventListener("loaded",function(e){t.json=e.content.json,t.onJSONLoaded()}),e.load()},h.onJSONLoaded=function(){var t=(new u).readSkeletonData(this.json);s.animCache[this.url]=t,this.onLoaded()},h.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:"loaded",content:this})},i.registerLoaderType("anim",n),t.exports=n},function(t,e,r){"use strict";var n=r(2);e.runList=function(t,e){var r=0,i=t.first;for(function(t){var e=n.console;e.groupCollapsed?e.groupCollapsed(t):e.group?e.group(t):e.log(t+" >>>>>>>>>")}(e="pixi.runList"+(e?"("+e+")":"")),n.console.log(i);i._iNext;)if(r++,i=i._iNext,n.console.log(i),r>100){n.console.log("BREAK");break}!function(t){var e=n.console;e.groupEnd?e.groupEnd(t):e.log(t+" _________")}(e)}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,